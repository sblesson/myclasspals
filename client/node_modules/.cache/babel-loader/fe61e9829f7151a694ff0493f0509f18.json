{"ast":null,"code":"import _objectSpread from \"/Users/sapnablesson/myGit/classvilla/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  categories: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POST_CATEGORIES:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload,\n        loading: false\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: payload\n        }),\n        loading: false\n      });\n\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        }),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sapnablesson/myGit/classvilla/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","categories","post","loading","error","state","action","type","payload","GET_POST_CATEGORIES","filter","_id","map","id","likes","comments","comment"],"mappings":";AAAA,SACEA,SADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,cARF,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,eAAe,UAASC,KAAK,GAAGN,YAAjB,EAA+BO,MAA/B,EAAuC;AAAA,QAC5CC,IAD4C,GAC1BD,MAD0B,CAC5CC,IAD4C;AAAA,QACtCC,OADsC,GAC1BF,MAD0B,CACtCE,OADsC;;AAGpD,UAAQD,IAAR;AACE,SAAKhB,SAAL;AACE,+BACKc,KADL;AAEEL,QAAAA,KAAK,EAAEQ,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKM,mBAAL;AACE,+BACKJ,KADL;AAEEL,QAAAA,KAAK,EAAEQ,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKP,QAAL;AACE,+BACKS,KADL;AAEEH,QAAAA,IAAI,EAAEM,OAFR;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKR,QAAL;AACE,+BACKU,KADL;AAEEL,QAAAA,KAAK,EAAE,CAACQ,OAAD,EAAU,GAAGH,KAAK,CAACL,KAAnB,CAFT;AAGEG,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,WAAL;AACE,+BACKW,KADL;AAEEL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYU,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaH,OAAxC,CAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKX,UAAL;AACE,+BACKa,KADL;AAEED,QAAAA,KAAK,EAAEI,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,YAAL;AACE,+BACKY,KADL;AAEEL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYY,GAAZ,CAAgBV,IAAI,IACzBA,IAAI,CAACS,GAAL,KAAaH,OAAO,CAACK,EAArB,qBAA+BX,IAA/B;AAAqCY,UAAAA,KAAK,EAAEN,OAAO,CAACM;AAApD,aAA8DZ,IADzD,CAFT;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKN,WAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,IAAI,oBAAOG,KAAK,CAACH,IAAb;AAAmBa,UAAAA,QAAQ,EAAEP;AAA7B,UAFN;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,cAAL;AACE,+BACKO,KADL;AAEEH,QAAAA,IAAI,oBACCG,KAAK,CAACH,IADP;AAEFa,UAAAA,QAAQ,EAAEV,KAAK,CAACH,IAAN,CAAWa,QAAX,CAAoBL,MAApB,CACRM,OAAO,IAAIA,OAAO,CAACL,GAAR,KAAgBH,OADnB;AAFR,UAFN;AAQEL,QAAAA,OAAO,EAAE;AARX;;AAUF;AACE,aAAOE,KAAP;AA/DJ;AAiED","sourcesContent":["import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  categories: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST_CATEGORIES:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            comment => comment._id !== payload\n          )\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}