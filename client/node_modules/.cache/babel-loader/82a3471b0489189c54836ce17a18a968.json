{"ast":null,"code":"import _slicedToArray from \"/Users/sapnablesson/myGit/devconnector_2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js\";\nimport React, { useState } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport axios from 'axios';\nimport { debounce, throttle, isInteger } from 'lodash';\nimport Autosuggest from 'react-autosuggest';\nimport SelectSearch from 'react-select-search';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\nimport { getSchoolDetails } from '../../actions/profile';\n\nconst AddSchoolForm = ({\n  addSchool,\n  getSchoolDetails\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modal = _useState4[0],\n        setModal = _useState4[1];\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        school = _React$useState2[0],\n        setSchool = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        suggestions = _React$useState4[0],\n        setSuggestions = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        grades = _React$useState6[0],\n        setGrades = _React$useState6[1];\n\n  const toggle = () => setModal(!modal);\n\n  const loadSuggestions = async ({\n    value\n  }) => {\n    if (!value) {\n      setSuggestions([]);\n      return;\n    }\n\n    try {\n      const url = \"https://api.schooldigger.com/v1.2/autocomplete/schools?q=\".concat(value, \"&appID=02e5e1fb&appKey=516f6dd0da01a186ffedea905bec1041\");\n      const response = await axios.get(url);\n      console.log(response.data);\n      setSuggestions(response.data.schoolMatches.map(row => ({\n        schoolName: row.schoolName,\n        schoolCity: row.city,\n        schoolState: row.state,\n        lowGrade: row.lowGrade,\n        highGrade: row.highGrade,\n        schoolLevel: row.schoolLevel\n      })));\n    } catch (e) {\n      setSuggestions([]);\n    }\n  };\n\n  const debouncedLoadSuggestions = debounce(loadSuggestions, 500);\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const renderSuggestion = suggestion => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, suggestion.schoolName, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), suggestion.schoolCity, \", \", suggestion.schoolState);\n  };\n\n  const checkGradePreKOrKG = grade => {\n    //check both are numbers, then create array\n    if (grade === 'PK' || grade === 'KG') {\n      return true;\n    }\n\n    return false;\n  };\n\n  const setSchoolGrades = (lowGrade, highGrade) => {\n    let isLowGradePreKorKG = false,\n        isHighGradePreKorKG = false;\n\n    if (!isInteger(parseInt(lowGrade))) {\n      isLowGradePreKorKG = checkGradePreKOrKG(lowGrade);\n    }\n\n    if (!isInteger(parseInt(highGrade))) {\n      isHighGradePreKorKG = checkGradePreKOrKG(lowGrade);\n    }\n\n    if (isLowGradePreKorKG && isHighGradePreKorKG) {\n      if (lowGrade === highGrade) {\n        setGrades([lowGrade]);\n      } else if (lowGrade === 'PK' && highGrade === 'KG') {\n        setGrades([lowGrade]);\n        setGrades([highGrade]);\n      } else {\n        setGrades([highGrade]);\n      }\n    } else if (isLowGradePreKorKG) {\n      if (lowGrade === 'PK') {\n        setGrades([lowGrade]);\n        lowGrade = 'KG';\n        setGrades([lowGrade]);\n        lowGrade = 1;\n      }\n    }\n\n    if (isInteger(parseInt(highGrade)) && isInteger(parseInt(lowGrade))) {\n      for (var i = lowGrade; i < highGrade; i++) {\n        console.log(i);\n        setGrades(i);\n      }\n    }\n\n    console.log(grades);\n  };\n\n  const onSuggestionSelected = (event, {\n    suggestion,\n    method\n  }) => {\n    if (method === 'enter') {\n      event.preventDefault();\n    }\n\n    setSchool(suggestion.schoolName);\n    setSchoolGrades(suggestion.lowGrade, suggestion.highGrade);\n  };\n\n  const inputProps = {\n    placeholder: 'Search school name',\n    autoComplete: 'abcd',\n    value: school,\n    name: 'school',\n    onChange: (_event, {\n      newValue\n    }) => {\n      setSchool(newValue);\n    }\n  };\n\n  const getSuggestionValue = suggestion => suggestion.schoolName;\n\n  const shouldRenderSuggestions = suggestion => {\n    if (suggestion.length > 2) {\n      return true;\n    } else return false;\n  };\n\n  const gradeOptions = [{\n    name: 'Swedish',\n    value: 'sv'\n  }, {\n    name: 'English',\n    value: 'en'\n  }];\n  const classroomOptions = [{\n    name: 'Sunshine',\n    value: 'sv'\n  }, {\n    name: 'Moonshine',\n    value: 'en'\n  }];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-form\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Add School\")), React.createElement(Modal, {\n    isOpen: modal,\n    fade: false,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \" Add School\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Child Name (optional)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }))), React.createElement(FormGroup, {\n    tag: \"fieldset\",\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Choose category\"), React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    inputProps: inputProps,\n    onSuggestionsFetchRequested: debouncedLoadSuggestions,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    onSuggestionSelected: onSuggestionSelected,\n    shouldRenderSuggestions: shouldRenderSuggestions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), React.createElement(SelectSearch, {\n    options: gradeOptions,\n    value: \"\",\n    name: \"language\",\n    placeholder: \"Choose grade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(SelectSearch, {\n    options: classroomOptions,\n    value: \"sv\",\n    name: \"language\",\n    placeholder: \"Choose classroom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  })))))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"Add\"))));\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired,\n  getSchoolDetails: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addSchool,\n  getSchoolDetails\n})(AddSchoolForm);","map":{"version":3,"sources":["/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js"],"names":["React","useState","Col","Button","Form","FormGroup","Label","Input","FormText","Modal","ModalHeader","ModalBody","ModalFooter","axios","debounce","throttle","isInteger","Autosuggest","SelectSearch","PropTypes","connect","addSchool","getSchoolDetails","AddSchoolForm","text","setText","modal","setModal","school","setSchool","suggestions","setSuggestions","grades","setGrades","toggle","loadSuggestions","value","url","response","get","console","log","data","schoolMatches","map","row","schoolName","schoolCity","city","schoolState","state","lowGrade","highGrade","schoolLevel","e","debouncedLoadSuggestions","onSuggestionsClearRequested","renderSuggestion","suggestion","checkGradePreKOrKG","grade","setSchoolGrades","isLowGradePreKorKG","isHighGradePreKorKG","parseInt","i","onSuggestionSelected","event","method","preventDefault","inputProps","placeholder","autoComplete","name","onChange","_event","newValue","getSuggestionValue","shouldRenderSuggestions","length","gradeOptions","classroomOptions","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap';\nimport axios from 'axios';\nimport { debounce, throttle, isInteger } from 'lodash';\n\nimport Autosuggest from 'react-autosuggest';\nimport SelectSearch from 'react-select-search';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\nimport { getSchoolDetails } from '../../actions/profile';\n\nconst AddSchoolForm = ({ addSchool, getSchoolDetails }) => {\n  const [text, setText] = useState('');\n  const [modal, setModal] = useState(false);\n  const [school, setSchool] = React.useState('');\n  const [suggestions, setSuggestions] = React.useState([]);\n  const [grades, setGrades] = React.useState([]);\n\n  const toggle = () => setModal(!modal);\n\n  const loadSuggestions = async ({ value }) => {\n    if (!value) {\n      setSuggestions([]);\n      return;\n    }\n\n    try {\n      const url = `https://api.schooldigger.com/v1.2/autocomplete/schools?q=${value}&appID=02e5e1fb&appKey=516f6dd0da01a186ffedea905bec1041`;\n      const response = await axios.get(url);\n      console.log(response.data);\n      setSuggestions(\n        response.data.schoolMatches.map(row => ({\n          schoolName: row.schoolName,\n          schoolCity: row.city,\n          schoolState: row.state,\n          lowGrade: row.lowGrade,\n          highGrade: row.highGrade,\n          schoolLevel: row.schoolLevel\n        }))\n      );\n    } catch (e) {\n      setSuggestions([]);\n    }\n  };\n\n  const debouncedLoadSuggestions = debounce(loadSuggestions, 500);\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const renderSuggestion = suggestion => {\n    return (\n      <div>\n        {suggestion.schoolName}\n        <br />\n        {suggestion.schoolCity}, {suggestion.schoolState}\n      </div>\n    );\n  };\n\n  const checkGradePreKOrKG = grade => {\n    //check both are numbers, then create array\n    if (grade === 'PK' || grade === 'KG') {\n      return true;\n    }\n\n    return false;\n  };\n\n  const setSchoolGrades = (lowGrade, highGrade) => {\n    let isLowGradePreKorKG = false,\n      isHighGradePreKorKG = false;\n\n    if (!isInteger(parseInt(lowGrade))) {\n      isLowGradePreKorKG = checkGradePreKOrKG(lowGrade);\n    }\n\n    if (!isInteger(parseInt(highGrade))) {\n      isHighGradePreKorKG = checkGradePreKOrKG(lowGrade);\n    }\n\n    if (isLowGradePreKorKG && isHighGradePreKorKG) {\n      if (lowGrade === highGrade) {\n        setGrades([lowGrade]);\n      } else if (lowGrade === 'PK' && highGrade === 'KG') {\n        setGrades([lowGrade]);\n        setGrades([highGrade]);\n      } else {\n        setGrades([highGrade]);\n      }\n    } else if (isLowGradePreKorKG) {\n      if (lowGrade === 'PK') {\n        setGrades([lowGrade]);\n        lowGrade = 'KG';\n        setGrades([lowGrade]);\n        lowGrade = 1;\n      }\n    }\n\n    if (isInteger(parseInt(highGrade)) && isInteger(parseInt(lowGrade))) {\n      for (var i = lowGrade; i < highGrade; i++) {\n        console.log(i);\n        setGrades(i);\n      }\n    }\n\n    console.log(grades);\n  };\n\n  const onSuggestionSelected = (event, { suggestion, method }) => {\n    if (method === 'enter') {\n      event.preventDefault();\n    }\n    setSchool(suggestion.schoolName);\n    setSchoolGrades(suggestion.lowGrade, suggestion.highGrade);\n  };\n\n  const inputProps = {\n    placeholder: 'Search school name',\n    autoComplete: 'abcd',\n    value: school,\n    name: 'school',\n    onChange: (_event, { newValue }) => {\n      setSchool(newValue);\n    }\n  };\n\n  const getSuggestionValue = suggestion => suggestion.schoolName;\n\n  const shouldRenderSuggestions = suggestion => {\n    if (suggestion.length > 2) {\n      return true;\n    } else return false;\n  };\n\n  const gradeOptions = [\n    { name: 'Swedish', value: 'sv' },\n    { name: 'English', value: 'en' }\n  ];\n  const classroomOptions = [\n    { name: 'Sunshine', value: 'sv' },\n    { name: 'Moonshine', value: 'en' }\n  ];\n\n  return (\n    <div>\n      <div className='post-form' onClick={toggle}>\n        <Button color='primary' onClick={toggle}>\n          Add School\n        </Button>\n      </div>\n      <Modal isOpen={modal} fade={false} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Add School</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup row>\n              <Col sm={10}>\n                <Input\n                  type='text'\n                  name='text'\n                  placeholder='Child Name (optional)'\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup tag='fieldset' row>\n              <legend className='col-form-label'>Choose category</legend>\n              <Col sm={10}>\n                <FormGroup>\n                  <Autosuggest\n                    suggestions={suggestions}\n                    inputProps={inputProps}\n                    onSuggestionsFetchRequested={debouncedLoadSuggestions}\n                    onSuggestionsClearRequested={onSuggestionsClearRequested}\n                    getSuggestionValue={getSuggestionValue}\n                    renderSuggestion={renderSuggestion}\n                    onSuggestionSelected={onSuggestionSelected}\n                    shouldRenderSuggestions={shouldRenderSuggestions}\n                  />\n                  <SelectSearch\n                    options={gradeOptions}\n                    value=''\n                    name='language'\n                    placeholder='Choose grade'\n                  />\n                  <SelectSearch\n                    options={classroomOptions}\n                    value='sv'\n                    name='language'\n                    placeholder='Choose classroom'\n                  />\n                </FormGroup>\n              </Col>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={toggle}>\n            Add\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired,\n  getSchoolDetails: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addSchool, getSchoolDetails })(AddSchoolForm);\n"]},"metadata":{},"sourceType":"module"}