{"version":3,"sources":["actions/post.js","components/posts/CommentForm.js","components/posts/modal/DeletePostModal.js","components/posts/CommentItem.js","components/posts/PostItem.js","components/posts/SinglePost.js"],"names":["addPost","formData","callback","dispatch","a","config","headers","axios","post","res","type","ADD_POST","payload","data","setAlert","catchHandler","searchPost","requestObj","cancelToken","CancelToken","c","cancel","SEARCH_POST","isCancel","getPrivateMessages","cancelTokenSrc","source","token","GET_PRIVATE_MESSAGES","sendPrivateMessage","SEND_PRIVATE_MESSAGE","getPost","id","get","GET_POST","addMessageReply","postId","ADD_MESSAGE_REPLY","comments","addComment","ADD_COMMENT","addCommentToSinglePost","ADD_COMMENT_SINGLE_POST","deletePost","delete","DELETE_POST","deleteMessage","deleteComment","commentId","isSinglePost","REMOVE_COMMENT_SINGLE_POST","REMOVE_COMMENT","connect","groupId","userId","userName","useState","message","setFormData","onChatFormSubmit","e","preventDefault","className","onSubmit","name","rows","placeholder","value","onChange","target","onKeyDown","required","htmlType","onClick","style","float","marginTop","state","postType","headerTitle","visible","setModalVisibility","toggleModal","title","centered","onOk","currentPost","_id","okText","onCancel","destroyOnClose","cancelButtonProps","display","CommentItem","comment","postedDate","avatar","subject","Meta","Card","menu","Item","key","actions","overlay","placement","EllipsisOutlined","size","charAt","description","to","fromNow","ago","length","tooltip","PostItem","user","likes","thanks","showActions","showAllComments","Paragraph","Typography","allComments","itemLayout","dataSource","overflow","renderItem","IconText","icon","text","React","createElement","lastThreeComments","slice","width","extra","ellipsis","expandable","symbol","MessageOutlined","marginBottom","defaultProps","auth","loading","match","useEffect","params","fontSize","marginLeft","cursor"],"mappings":"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","file":"static/js/14.5cdeb421.chunk.js","sourcesContent":["import axios from 'axios';\nimport { setAlert, catchHandler } from './alert';\nimport {\n  GET_POST_CATEGORIES,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  ADD_COMMENT_SINGLE_POST,\n  REMOVE_COMMENT_SINGLE_POST,\n  REMOVE_COMMENT_ERROR,\n  SEND_PRIVATE_MESSAGE,\n  SEARCH_POST,\n  GET_PRIVATE_MESSAGES,\n  GET_POST_CATEGORIES_ERROR,\n  ADD_MESSAGE_REPLY,\n} from './types';\nimport { CancelToken } from '../utils/axios';\n\n// Get posts\nexport const getPostCategories = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_POST_CATEGORIES,\n      payload: { screen: 'dash' },\n    });\n  } catch (err) {\n    catchHandler(err, GET_POST_CATEGORIES_ERROR);\n  }\n};\n\n// Add post\nexport const addPost = (formData, callback) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/post/createpost', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post created', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_POST_ERROR');\n  }\n  callback();\n};\n\n// Add post\nexport const addEvent = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/post/createpost', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post created', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_POST_ERROR');\n  }\n};\n\n// Search post by groupId\nexport const searchPost = (requestObj, callback) => async (dispatch) => {\n  let cancel;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/post/searchpost', requestObj, config, {\n      cancelToken: new axios.CancelToken((c) => (cancel = c)),\n    });\n    dispatch({\n      type: SEARCH_POST,\n      payload: res.data,\n    });\n    callback(res.data.post, cancel);\n  } catch (err) {\n    if (axios.isCancel(err)) return;\n    catchHandler(err, 'SEARCH_POST_ERROR');\n  }\n};\n\n// Search post by groupId\nexport const getPrivateMessages = (formData, callback) => async (dispatch) => {\n  let cancelTokenSrc = axios.CancelToken.source();\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const res = await axios.post('/post/searchpost', formData, config, {\n      cancelToken: cancelTokenSrc.token,\n    });\n    dispatch({\n      type: GET_PRIVATE_MESSAGES,\n      payload: res.data.post,\n    });\n  } catch (err) {\n    catchHandler(err, 'CREATE_PRIVATE_POST_ERROR');\n  }\n  callback(cancelTokenSrc);\n};\n// Add post\nexport const sendPrivateMessage = (formData, callback) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const res = await axios.post('/post/createpost', formData, config);\n\n    dispatch({\n      type: SEND_PRIVATE_MESSAGE,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('New Message Created', 'success'));\n    callback(res.data);\n  } catch (err) {\n    catchHandler(err, 'CREATE_POST_ERROR');\n  }\n};\n\n// Search post by postId\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/post/getpost?id=${id}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data.post,\n    });\n  } catch (err) {\n    catchHandler(err, 'GET_POST_ERROR');\n  }\n};\n\n// Add comment\nexport const addMessageReply = (postId, formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/post/${postId}/addcomment`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_MESSAGE_REPLY,\n      payload: { postId, comments: res.data.post.comments },\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_MESSAGE_REPLY_ERROR');\n  }\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/post/${postId}/addcomment`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: { postId, comments: res.data.post.comments },\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_COMMENT_ERROR');\n  }\n};\n\n// Add comment\nexport const addCommentToSinglePost = (postId, formData) => async (\n  dispatch\n) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/post/${postId}/addcomment`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT_SINGLE_POST,\n      payload: { postId, comments: res.data.post.comments },\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_COMMENT_SINGLE_POST_ERROR');\n  }\n};\n// Delete post\nexport const deletePost = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`/post/deletepost/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId,\n    });\n  } catch (err) {\n    catchHandler(err, 'DELETE_POST_ERROR');\n  }\n};\n\n// Delete post\nexport const deleteMessage = (postId, callback) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`/post/deletepost/${postId}`);\n    dispatch({\n      type: 'DELETE_MESSAGE',\n      payload: postId,\n    });\n  } catch (err) {\n    catchHandler(err, 'DELETE_POST_ERROR');\n  }\n  callback();\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId, isSinglePost) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.delete(`/post/deletepost/${commentId}`);\n    if (isSinglePost) {\n      dispatch({\n        type: REMOVE_COMMENT_SINGLE_POST,\n        payload: { postId, commentId, comments: res.data },\n      });\n    } else {\n      dispatch({\n        type: REMOVE_COMMENT,\n        payload: { postId, commentId, comments: res.data },\n      });\n    }\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    catchHandler(err, 'DELETE_POST_ERROR');\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addComment, addCommentToSinglePost } from '../../actions/post';\nimport { Button } from 'antd';\n\nimport './CommentItem.scss';\n\nconst CommentForm = ({\n  postId,\n  groupId,\n  userId,\n  userName,\n  isSinglePost,\n  addComment,\n  addCommentToSinglePost,\n}) => {\n  const [formData, setFormData] = useState({\n    message: '',\n    groupId: groupId,\n    userId: userId,\n    userName: userName,\n  });\n\n  const [text, setText] = useState('');\n  const keyPress = (e) => {\n    if (e.keyCode == 13) {\n      onChatFormSubmit(e);\n    }\n  };\n  const onChatFormSubmit = (e) => {\n    e.preventDefault();\n    if (formData.message) {\n      if (isSinglePost) {\n        addCommentToSinglePost(postId, formData);\n      } else {\n        addComment(postId, formData);\n      }\n      setFormData({ ...formData, ['message']: '' });\n    }\n  };\n  return (\n    <div className='comment-form'>\n      <form\n        onSubmit={(e) => {\n          onChatFormSubmit(e);\n        }}\n      >\n        <textarea\n          name='message'\n          className='form-control comment-rounded-textarea '\n          rows='2'\n          placeholder='Write a comment...'\n          value={formData.message}\n          onChange={(e) =>\n            setFormData({ ...formData, [e.target.name]: e.target.value })\n          }\n          onKeyDown={(e) =>\n            setFormData({ ...formData, [e.target.name]: e.target.value })\n          }\n          required\n        />\n        <Button\n          htmlType='button'\n          onClick={onChatFormSubmit}\n          type='primary'\n          style={{ float: 'right', marginTop: 5 }}\n          className='btn-primary reply-btn'\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nCommentForm.propTypes = {\n  isSinglePost: PropTypes.bool.isRequired,\n  addComment: PropTypes.func.isRequired,\n  addCommentToSinglePost: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { addComment, addCommentToSinglePost })(\n  CommentForm\n);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { deletePost, deleteComment } from '../../../actions/post';\nimport { Modal } from 'antd';\n\nimport _ from 'lodash';\n\nconst DeletePostModal = ({\n  deletePost,\n  deleteComment,\n  postId,\n  postType,\n  commentId,\n  isSinglePost,\n  post,\n}) => {\n  const [headerTitle, setHeaderTitle] = useState(\"Please don't delete me!\");\n\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  const handleDelete = () => {\n    if (postType === 'comment') {\n      deleteComment(postId, commentId, isSinglePost);\n    } else if (postId) {\n      deletePost(postId);\n    } else if (post && post.currentPost && post.currentPost._id) {\n      deletePost(post.currentPost._id);\n    }\n    hideModal();\n  };\n  return (\n    <div>\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div className='account-info-delete-button-right'>\n          <span>Delete</span>\n        </div>\n      </div>\n      <Modal\n        title={headerTitle}\n        centered\n        visible={visible}\n        onOk={handleDelete}\n        okText='Delete'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n      >\n        <div>\n          Deleting this {postType} will removes it forever. Are you sure you\n          want to delete?\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {\n  deletePost,\n  deleteComment,\n})(DeletePostModal);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport { Avatar, Card, Dropdown, Menu, List } from 'antd';\nimport Ellipsis from 'ant-design-pro/lib/Ellipsis';\n\nimport DeleteCommentModal from './modal/DeletePostModal';\nimport { EllipsisOutlined } from '@ant-design/icons';\nimport './PostItem.scss';\n\nconst CommentItem = ({\n  postId,\n  comment: { _id, message, userName, userId, avatar, postedDate, subject },\n  isSinglePost,\n}) => {\n  const { Meta } = Card;\n\n  const menu = (\n    <Menu>\n      <Menu.Item key='deletepost'>\n        {' '}\n        <DeleteCommentModal\n          postId={postId}\n          commentId={_id}\n          postType='comment'\n          isSinglePost={isSinglePost}\n        />\n      </Menu.Item>\n    </Menu>\n  );\n  return (\n    <List.Item\n      className='feed-comment'\n      actions={[\n        <Dropdown overlay={menu} placement='bottomCenter'>\n          <a className='ant-dropdown-link' onClick={(e) => e.preventDefault()}>\n            <EllipsisOutlined />\n          </a>\n        </Dropdown>,\n      ]}\n    >\n      <Meta\n        avatar={\n          <Avatar className='avatar-icon' size='small'>\n            {userId.charAt(0)}\n          </Avatar>\n        }\n        description={\n          <div>\n            <Link to={`/profile/${postId}/${userId}`}>\n              <span className='feed-author-title'>{userName}</span>\n            </Link>\n            <div className='feed-author-time'>\n              <Moment fromNow ago>\n                {postedDate}\n              </Moment>\n              {' ago'}\n            </div>\n            <Ellipsis length={200} tooltip>\n              {message}\n            </Ellipsis>\n          </div>\n        }\n      />\n    </List.Item>\n  );\n};\n\nCommentItem.propTypes = {\n  postId: PropTypes.string.isRequired,\n  comment: PropTypes.object.isRequired,\n};\n\nexport default CommentItem;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport { connect } from 'react-redux';\nimport CommentForm from './CommentForm';\nimport CommentItem from './CommentItem';\nimport { Avatar, Card, Menu, Dropdown, List, Typography } from 'antd';\nimport Ellipsis from 'ant-design-pro/lib/Ellipsis';\n\nimport {\n  EditOutlined,\n  EllipsisOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { deletePost } from '../../actions/post';\nimport DeletePostModal from './modal/DeletePostModal';\nimport { MessageOutlined } from '@ant-design/icons';\n\nimport './PostItem.scss';\n\nconst PostItem = ({\n  style,\n  post: {\n    _id,\n    userId,\n    subject,\n    message,\n    userName,\n    avatar,\n    user,\n    likes,\n    thanks,\n    groupId,\n    comments,\n    postedDate,\n  },\n  showActions,\n  showAllComments,\n  isSinglePost,\n}) => {\n  const { Paragraph } = Typography;\n\n  const { Meta } = Card;\n\n  const firstLetterUserName = (userName) => {\n    if (typeof userName !== 'string') return '';\n    return userName.charAt(0).toUpperCase();\n  };\n\n  const onClick = (key) => {\n    if (key === 'deletepost') {\n    } else if (key === 'editpost') {\n    }\n  };\n\n  const menu = (\n    <Menu onClick={onClick}>\n      <Menu.Item key='deletepost'>\n        {' '}\n        <DeletePostModal postId={_id} postType='post' />\n      </Menu.Item>\n      <Menu.Item key='editpost'>Edit</Menu.Item>\n    </Menu>\n  );\n  const allComments = comments !== null && comments && comments.length > 0 && (\n    <List\n      itemLayout='horizontal'\n      dataSource={comments}\n      style={{ overflow: 'hidden' }}\n      renderItem={(comment) => (\n        <CommentItem\n          key={comment._id}\n          comment={comment}\n          postId={_id}\n          groupId={groupId}\n          isSinglePost={isSinglePost}\n        />\n      )}\n    />\n  );\n  const IconText = ({ icon, text }) => (\n    <Link to={`/posts/${_id}/${groupId}`}>\n      {' '}\n      {React.createElement(icon)}{' '}\n      <span className='comment-count-text'>\n        {comments.length > 1\n          ? `${comments.length} comments`\n          : `${comments.length} comment`}\n      </span>\n    </Link>\n  );\n\n  const lastThreeComments = comments !== null &&\n    comments &&\n    comments.length > 0 && (\n      <List\n        itemLayout='horizontal'\n        dataSource={comments.slice(-3)}\n        style={{ overflow: 'hidden' }}\n        renderItem={(comment) => (\n          <CommentItem\n            key={comment._id}\n            comment={comment}\n            postId={_id}\n            groupId={groupId}\n            isSinglePost={isSinglePost}\n          />\n        )}\n      />\n    );\n\n  return (\n    <div className='feed' style={{ width: '100%' }}>\n      <Card\n        className={isSinglePost ? 'single-feed-card' : 'feed-card'}\n        title={\n          <Link to={`/profile/${groupId}/${userId}`}>\n            <Meta\n              avatar={\n                <Avatar className='avatar-icon' size='large'>\n                  {userId.charAt(0)}\n                </Avatar>\n              }\n              title={<span className='feed-author-title'>{userId}</span>}\n              description={\n                <div className='feed-author-time'>\n                  <Moment fromNow ago>\n                    {postedDate}\n                  </Moment>\n                </div>\n              }\n            />\n          </Link>\n        }\n        extra={\n          <Dropdown overlay={menu} placement='bottomCenter'>\n            <a\n              className='ant-dropdown-link'\n              onClick={(e) => e.preventDefault()}\n            >\n              <EllipsisOutlined />\n            </a>\n          </Dropdown>\n        }\n      >\n        <Link className='feed-title' to={`/posts/${_id}/${groupId}`}>\n          <Meta\n            title={\n              <Ellipsis length={100} tooltip>\n                {subject}\n              </Ellipsis>\n            }\n          />\n        </Link>\n        <Paragraph ellipsis={{ rows: 2, expandable: true, symbol: 'more' }}>\n          {message}\n        </Paragraph>\n\n        {comments && comments.length > 0 ? (\n          <IconText icon={MessageOutlined} key='list-vertical-message' />\n        ) : (\n          ''\n        )}\n        {showActions && (\n          <div style={{ marginBottom: '2rem' }}>\n            {showAllComments ? allComments : lastThreeComments}\n            <CommentForm\n              postId={_id}\n              groupId={groupId}\n              userId={userId}\n              userName={userName}\n              isSinglePost={isSinglePost}\n            />{' '}\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nPostItem.defaultProps = {\n  showActions: true,\n  showAllComments: false,\n  isSinglePost: false,\n};\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  showActions: PropTypes.bool,\n  showAllComments: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {})(PostItem);\n","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../common/spinner/Spinner';\nimport PostItem from './PostItem';\nimport { getPost } from '../../actions/post';\nimport { LeftCircleOutlined } from '@ant-design/icons';\n\nconst SinglePost = ({ getPost, post: { currentPost, loading }, match }) => {\n  let groupId = null;\n  useEffect(() => {\n    getPost(match.params.id);\n    groupId = match.params.groupId;\n  }, [getPost, match]);\n\n  return loading || currentPost === null ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      <Link\n        to={`/dashboard/${match.params.groupId}`}\n        style={{\n          fontSize: '1rem',\n          marginLeft: '1rem',\n          marginTop: '1rem',\n          cursor: 'pointer',\n          display: 'inline-block'\n        }}\n      >\n        <LeftCircleOutlined />\n      </Link>\n      <PostItem\n        post={currentPost}\n        showActions={true}\n        showAllComments={true}\n        isSinglePost={true}\n      />\n    </Fragment>\n  );\n};\n\nSinglePost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, { getPost })(SinglePost);\n"],"sourceRoot":""}