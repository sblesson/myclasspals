{"version":3,"sources":["components/common/autocompletecitysearch/AutoCompleteCitySearch.js","actions/address.js","components/profile/account/modal/EditAccountModal.js","components/profile/account/Account.js"],"names":["connect","state","address","getCityData","searchTerm","dispatch","a","axios","get","res","type","GET_CITY_DATA","payload","data","catchHandler","Option","Select","children","results","length","map","item","index","selectedAddress","JSON","stringify","key","value","city","statecode","postalcode","name","showSearch","placeholder","onSearch","setTimeout","Math","random","onChange","option","auth","updateUser","withRouter","useState","visible","setModalVisibility","toggleModal","componentSize","formItemLayout","labelCol","xs","span","sm","wrapperCol","yourInfo","initialValues","email","user","zipcode","onSubmit","values","myAddress","parse","citySelect","userName","validator","render","style","flex","padding","className","layout","size","onClick","float","fontSize","cursor","marginTop","marginRight","title","centered","onOk","okText","onCancel","destroyOnClose","cancelButtonProps","display","Content","Layout","userDetails","_id","phone"],"mappings":"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","file":"static/js/15.f500fac3.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'formik-antd';\n\nimport { getCityData } from '../../../actions/address';\n\nconst AutoCompleteCitySeach = ({ getCityData, address }) => {\n  const Option = Select.Option;\n\n  const handleCitySearch = searchTerm => {\n    setTimeout(() => {\n      getCityData(searchTerm);\n    }, Math.random() * 1000);\n  };\n\n  const onCitySelect = (value, option) => {\n    if (address && address.results && address.results.length > 0) {\n      //update selected address in the reducer\n      address.selectedAddress = address.results[option.key];\n    }\n  };\n\n  const children =\n    address &&\n    address.results &&\n    address.results.length > 0 &&\n    address.results.map((item, index) => {\n      let selectedAddress = JSON.stringify(item);\n\n      return (\n        <Option key={index} value={selectedAddress}>\n          {item.city}, {item.statecode} {item.postalcode}\n        </Option>\n      );\n    });\n\n  return (\n    <Select\n      name='citySelect'\n      showSearch\n      placeholder='Select City'\n      onSearch={handleCitySearch}\n      onChange={onCitySelect}\n    >\n      {children}\n    </Select>\n  );\n};\nconst mapStateToProps = state => ({\n  address: state.address\n});\nexport default connect(mapStateToProps, { getCityData })(AutoCompleteCitySeach);\n","import axios from 'axios';\nimport { catchHandler } from './alert';\n\nimport { GET_CITY_DATA, GET_CITY_DATA_ERROR } from './types';\n\n// Get Github repos\nexport const getCityData = (searchTerm = '') => async dispatch => {\n  try {\n    const res = await axios.get(\n      `/postaladdress/searchbycity?searchkey=${searchTerm}`\n    );\n    dispatch({\n      type: GET_CITY_DATA,\n      payload: res.data\n    });\n  } catch (err) {\n    catchHandler(err, 'Error occured when fetching city');\n  }\n};\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { updateUser } from '../../../../actions/auth';\nimport { Modal } from 'antd';\n\nimport { Formik, ErrorMessage } from 'formik';\nimport { SubmitButton, Input, Form, FormItem, FormikDebug } from 'formik-antd';\n\nimport AutoCompleteCitySeach from '../../../common/autocompletecitysearch/AutoCompleteCitySearch';\n\nconst EditAccountModal = ({ auth, updateUser }) => {\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  //const [formData, setFormData] = useState({ user });\n  const validateRequired = value => {\n    return value ? undefined : 'required';\n  };\n  const [componentSize, setComponentSize] = useState('small');\n  const inputOnChange = event => {\n    if (!event.target.value) {\n      return;\n    }\n    //fetchSchools(event.target.value);\n  };\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 }\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 16 }\n    }\n  };\n\n  const yourInfo = (\n    <Formik\n      initialValues={{\n        email: auth.user.email,\n        name: '',\n        city: '',\n        state: '',\n        zipcode: ''\n      }}\n      onSubmit={values => {\n        let myAddress = JSON.parse(values.citySelect);\n\n        updateUser(\n          {\n            email: auth.user.email,\n            name: values.userName,\n            city: myAddress.city,\n            state: myAddress.state,\n            zipcode: myAddress.postalcode\n          },\n          true\n        );\n        setModalVisibility(false);\n      }}\n      validator={() => ({})}\n      //validate={values => {}}\n      render={() => (\n        <div style={{ flex: 1, padding: 10 }}>\n          <Form\n            className='form-wrapper'\n            {...formItemLayout}\n            layout='vertical'\n            initialValues={{\n              size: componentSize\n            }}\n          >\n            {auth !== null && auth.user ? (\n              <FormItem name='userName'>\n                <Input name='userName' placeholder={auth.user.name} />\n              </FormItem>\n            ) : (\n              ''\n            )}\n            <FormItem name='city'>\n              <AutoCompleteCitySeach />\n            </FormItem>\n            <SubmitButton className='ant-btn btn-primary'> Update</SubmitButton>\n          </Form>\n\n          {/*      <pre style={{ flex: 1 }}>\n            <FormikDebug />\n          </pre> */}\n        </div>\n      )}\n    />\n  );\n\n  return (\n    <Fragment>\n      {' '}\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div\n          style={{\n            float: 'right',\n            fontSize: '12px',\n            cursor: 'pointer',\n            marginTop: '12px',\n            marginRight: '10px'\n          }}\n        >\n          <span>Edit</span>\n        </div>\n      </div>\n      <Modal\n        title={'Edit My Account'}\n        centered\n        visible={visible}\n        onOk={hideModal}\n        okText='Post'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n        footer={null}\n      >\n        {yourInfo}\n      </Modal>\n    </Fragment>\n  );\n};\n\nEditAccountModal.propTypes = {\n  //profileData: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  updateUser\n})(withRouter(EditAccountModal));\n","import React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Layout } from 'antd';\n\nimport EditAccountModal from './modal/EditAccountModal';\n\nimport './Account.scss';\nconst Account = ({ auth }) => {\n  const { Content } = Layout;\n\n  const userDetails = (\n    <div className='profile-content-details' key={auth.user._id}>\n      <EditAccountModal />\n\n      <div className='user-info-item'>\n        <div className='user-info-content'>{auth.user.name} </div>\n      </div>\n      {auth.user.phone && (\n        <div className='user-info-item'>\n          <i className='fas fa-mobile'></i>\n          <div className='user-info-content'>{auth.user.phone} </div>\n        </div>\n      )}\n\n      <div className='user-info-item'>\n        <i className='fas fa-at'></i>\n        <div className='user-info-content'>{auth.user.email} </div>\n      </div>\n      {auth.user.city ? (\n        <div className='user-info-item'>\n          <i className='fas fa-map-marker big'></i>\n          <div className='user-info-content'>\n            {auth.user.city}, {auth.user.state} {auth.user.zipcode}\n          </div>\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n\n  return (\n    <Content>\n      <div className='wrapper'>\n        {auth && auth.user && (\n          <div className='profile-component-container'>\n            <div className='profile-component-header'>\n              <h4 className='profile-component-title'>My Account</h4>\n            </div>\n            <div className='profile-component-content'> {userDetails}</div>\n          </div>\n        )}\n      </div>\n    </Content>\n  );\n};\n\nAccount.propTypes = {\n  auth: PropTypes.object.isRequired\n  //deleteAccount: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {})(Account);\n"],"sourceRoot":""}