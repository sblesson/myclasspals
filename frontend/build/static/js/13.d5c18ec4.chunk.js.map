{"version":3,"sources":["components/groups/modal/DeleteGroupModal.js","components/groups/GroupCard.js","components/groups/Groups.js"],"names":["connect","state","group","deleteGroup","groupId","useState","headerTitle","visible","setModalVisibility","toggleModal","className","onClick","title","centered","onOk","okText","onCancel","destroyOnClose","cancelButtonProps","style","display","ownProps","auth","acceptUserGroupInvitation","requestToJoinUserGroup","currentGroup","index","type","Meta","Card","requestToJoinUserGroupClickHandler","record","id","role","requestorUserId","user","email","userGroup","console","log","menu","key","Item","acceptPendingInviteActionClick","invitedUserId","getGroupPrivacyLabel","EllipsisOutlined","privacy","groupPrivacy","toLowerCase","_","startCase","to","avatar","isSchoolGroup","paddingRight","groupName","description","userGroupMembers","length","getGroupPrivacy","getUserGroupMemberCount","color","getUserGroupRole","overlay","placement","float","e","preventDefault","groupActionMenu","schoolName","isGroupStatusUpdated","getAllGroups","Content","Layout","TabPane","Tabs","Input","Search","useEffect","_id","operations","loading","defaultActiveKey","tabBarExtraContent","tab","map","pendingInvitedUserGroups","requestedUserGroup"],"mappings":"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","file":"static/js/13.d5c18ec4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteGroup } from '../../../actions/group';\nimport { Modal } from 'antd';\n\nimport _ from 'lodash';\n\nconst DeleteGroupModal = ({ deleteGroup, groupId }) => {\n  const [headerTitle, setHeaderTitle] = useState(\"Please don't delete me!\");\n\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  const handleDelete = () => {\n    deleteGroup(groupId);\n    hideModal();\n  };\n  return (\n    <div>\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div className='account-info-delete-button-right'>\n          <span>Delete</span>\n        </div>\n      </div>\n      <Modal\n        title={headerTitle}\n        centered\n        visible={visible}\n        onOk={handleDelete}\n        okText='Delete'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n      >\n        <div>\n          Deleting this grouop will removes it forever. Are you sure you want to\n          delete?\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  group: state.group\n});\n\nexport default connect(mapStateToProps, {\n  deleteGroup\n})(DeleteGroupModal);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Menu, Tag, Button, Dropdown } from 'antd';\nimport _ from 'lodash';\nimport DeleteGroupModal from './modal/DeleteGroupModal';\n\nimport {\n  EditOutlined,\n  EllipsisOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\n\nimport {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup,\n} from '../../actions/group';\n\nimport './GroupCard.scss';\n\nconst GroupCard = ({\n  currentGroup,\n  index,\n  type,\n  auth,\n  group,\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup,\n}) => {\n  const { Meta } = Card;\n  const [isRequestUpdated, setRequestUpdate] = useState(false);\n\n  const requestToJoinUserGroupClickHandler = (record) => {\n    requestToJoinUserGroup(\n      {\n        groupId: record.id,\n        role: 'member',\n        requestorUserId: auth.user.email,\n      },\n      record,\n      (userGroup) => {\n        console.log(userGroup);\n        //searchGroupWithFilters({ groupKeyword: group.searchTerm });\n      }\n    );\n  };\n\n  const onClick = (key) => {\n    if (key === 'deletegroup') {\n      console.log('deletegroup');\n    } else if (key === 'editpost') {\n    }\n  };\n\n  const menu = (\n    <Menu onClick={onClick}>\n      <Menu.Item key='deletegroup'>\n        {' '}\n        <DeleteGroupModal groupId={currentGroup.id} />\n      </Menu.Item>\n    </Menu>\n  );\n  const acceptPendingInviteActionClick = (record) => {\n    acceptUserGroupInvitation({\n      groupId: record.id,\n      role: 'member',\n      invitedUserId: auth.user.email,\n    });\n  };\n\n  const adminMemberActionMenu = (\n    <Dropdown overlay={menu} placement='bottomCenter'>\n      <a className='ant-dropdown-link' onClick={(e) => e.preventDefault()}>\n        <EllipsisOutlined />\n      </a>\n    </Dropdown>\n  );\n\n  const groupActionMenu = (currentGroup, type) => {\n    if (currentGroup) {\n      switch (type) {\n        case 'mygroup':\n        case 'discover':\n          if (currentGroup.role === null) {\n            //non members\n            if (currentGroup.privacy === 'PUBLIC') {\n              //display join button for public group\n              return (\n                <Button\n                  key={`${currentGroup.id}_join_btn`}\n                  className='btn-primary'\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Join'}\n                </Button>\n              );\n            } else {\n              //display request button for private group\n              return (\n                <Button\n                  className='btn-primary'\n                  key={`${currentGroup.id}_request_btn`}\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Request'}\n                </Button>\n              );\n            }\n          } else if (currentGroup.role === 'admin') {\n            return (\n              <Dropdown\n                overlay={menu}\n                placement='bottomCenter'\n                style={{ float: 'right' }}\n              >\n                <a\n                  className='ant-dropdown-link'\n                  onClick={(e) => e.preventDefault()}\n                >\n                  <EllipsisOutlined />\n                </a>\n              </Dropdown>\n            );\n          } else if (currentGroup.role === 'member') {\n            return null;\n          } else if (\n            currentGroup.role === 'Pending Invitation' ||\n            currentGroup.role === 'Pending Requests'\n          ) {\n            return <Tag color='green'>{currentGroup.role}</Tag>;\n          }\n        case 'pendingInvitedUserGroups': {\n          if (type === 'discover' && currentGroup.privacy === 'PRIVATE') {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Request'}\n              </Button>\n            );\n          } else {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Join'}\n              </Button>\n            );\n          }\n        }\n        default:\n          return null;\n      }\n    }\n  };\n\n  const getUserGroupRole = (currentGroup) => {\n    if (currentGroup.role === 'admin') {\n      return <Tag color={'blue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'member') {\n      return <Tag color={'geekblue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'y      hb youhkujhjmhjhkhvitation') {\n      return <Tag color={'green'}>{currentGroup.role}</Tag>;\n    }\n  };\n\n  const getUserGroupMemberCount = (currentGroup) => {\n    if (currentGroup && currentGroup.userGroupMembers) {\n      if (currentGroup.userGroupMembers.length <= 1) {\n        return `${currentGroup.userGroupMembers.length} member`;\n      } else if (currentGroup.userGroupMembers.length > 1) {\n        return `${currentGroup.userGroupMembers.length} members`;\n      }\n    }\n  };\n\n  const getGroupPrivacyLabel = (privacy) => {\n    if (privacy) {\n      let groupPrivacy = privacy.toLowerCase();\n      groupPrivacy = _.startCase(groupPrivacy);\n\n      if (privacy === 'PRIVATE') {\n        return (\n          <span>\n            <i className='fa fa-lock' title='private group'></i>&nbsp;\n            {groupPrivacy}\n          </span>\n        );\n      } else {\n        return (\n          <span>\n            <i className='fa fa-globe' title='public group'></i>\n            &nbsp;{groupPrivacy}\n          </span>\n        );\n      }\n    }\n  };\n\n  const getGroupPrivacy = (currentGroup) => {\n    if (\n      currentGroup &&\n      currentGroup.userGroupMembers &&\n      currentGroup.userGroupMembers.length > 0\n    ) {\n      if (currentGroup.userGroupMembers.length === 1) {\n        return <div>{getGroupPrivacyLabel(currentGroup.privacy)}</div>;\n      } else {\n        return <div>{getGroupPrivacyLabel()}</div>;\n      }\n    }\n  };\n\n  return (\n    <Card key={index} className='discover-group-card'>\n      <Link to={`/group/${currentGroup.id}`}>\n        <Meta\n          avatar={\n            currentGroup.isSchoolGroup === 'no' ? (\n              <i\n                className='fas fa-users icon-group no-padding'\n                style={{ paddingRight: 0 }}\n              ></i>\n            ) : (\n              <i\n                className='fas fa-school icon-group no-padding'\n                title='school group'\n              ></i>\n            )\n          }\n          title={currentGroup.groupName}\n        ></Meta>\n      </Link>\n      <Meta\n        className='group-card-meta-privacy no-padding'\n        description={getGroupPrivacy(currentGroup)}\n      ></Meta>\n\n      <Meta\n        className='group-card-meta-count no-padding'\n        description={getUserGroupMemberCount(currentGroup)}\n      ></Meta>\n\n      <Meta\n        className='group-card-meta-role no-padding'\n        description={getUserGroupRole(currentGroup)}\n      ></Meta>\n      <Meta\n        className='group-card-meta-action group-action no-padding'\n        description={groupActionMenu(currentGroup, type)}\n      ></Meta>\n      {currentGroup.schoolName ? (\n        <Meta\n          className='group-card-meta-desc no-padding'\n          description={\n            currentGroup.schoolName\n              ? `School Name: ${currentGroup.schoolName}`\n              : ''\n          }\n        />\n      ) : (\n        ''\n      )}\n\n      {currentGroup.isGroupStatusUpdated ? (\n        <Meta\n          className='group-card-update-status-link no-padding'\n          description={\n            <Link to={`/group/${currentGroup.id}`}>Peek inside</Link>\n          }\n        />\n      ) : (\n        ''\n      )}\n    </Card>\n  );\n};\n\nGroupCard.propTypes = {\n  currentGroup: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  auth: state.auth,\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n})(GroupCard);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../common/spinner/Spinner';\nimport GroupCard from './GroupCard';\n\nimport CreateGroupModal from './modal/CreateGroupModal';\nimport { getAllGroups } from '../../actions/group';\nimport { Tabs, Table, Tag, Button, Input, Empty } from 'antd';\nimport { Layout, Card } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nimport './Groups.scss';\nconst Groups = ({ getAllGroups, group, auth }) => {\n  const { Meta } = Card;\n  const { Content } = Layout;\n\n  const { TabPane } = Tabs;\n\n  const { Search } = Input;\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  useEffect(() => {\n    getAllGroups(auth.user._id);\n  }, []);\n\n  const handleTabChange = (e, { activeIndex }) => setActiveIndex(activeIndex);\n\n  const handlePageChange = e => {\n    setActiveIndex(e.target.value);\n  };\n\n  const operations = <CreateGroupModal />;\n\n  return (\n    <Fragment>\n      {group.loading ? (\n        <Spinner />\n      ) : (\n        <Content className='container'>\n          <div className='wrapper'>\n            {group !== null ? (\n              <Tabs defaultActiveKey='1' tabBarExtraContent={operations}>\n                <TabPane tab='My Groups' key='1'>\n                  {group.userGroup && group.userGroup.length > 0 ? (\n                    group.userGroup.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        type='mygroup'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={'Current user is not part of any groups.'}\n                    />\n                  )}\n                </TabPane>\n                <TabPane tab='Pending Invitations' key='2'>\n                  {group.pendingInvitedUserGroups &&\n                  group.pendingInvitedUserGroups.length > 0 ? (\n                    group.pendingInvitedUserGroups.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        type='pendingInvitedUserGroups'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={\n                        'There are no pending group invitation for current user.'\n                      }\n                    />\n                  )}\n                </TabPane>\n                <TabPane tab='Requested To Join' key='3'>\n                  {group.requestedUserGroup &&\n                  group.requestedUserGroup.length > 0 ? (\n                    group.requestedUserGroup.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        index={index}\n                        type='requestedUserGroup'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={\n                        'There are no group requests initiated by the current user.'\n                      }\n                    />\n                  )}\n                </TabPane>\n              </Tabs>\n            ) : (\n              <Empty description={'No Group Data Found'} />\n            )}\n          </div>\n        </Content>\n      )}\n    </Fragment>\n  );\n};\n\nGroups.propTypes = {\n  getAllGroups: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  group: state.group,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getAllGroups\n})(Groups);\n"],"sourceRoot":""}