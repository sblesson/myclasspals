{"ast":null,"code":"import _slicedToArray from \"/Users/sapnablesson/myGit/devconnector_2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js\";\nimport React, { useState } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport axios from 'axios';\nimport Autosuggest from 'react-autosuggest';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\n\nconst AddSchoolForm = ({\n  addSchool\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        school = _React$useState2[0],\n        setSchool = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        suggestions = _React$useState4[0],\n        setSuggestions = _React$useState4[1];\n\n  this.state = {\n    value: ''\n  };\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modal = _useState4[0],\n        setModal = _useState4[1];\n\n  const toggle = () => setModal(!modal);\n\n  onChange = (event, {\n    newValue\n  }) => {\n    this.setState({\n      value: newValue\n    });\n  }; // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n\n  onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  }; // Autosuggest will call this function every time you need to clear suggestions.\n\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  }; // Imagine you have a list of languages that you'd like to autosuggest.\n\n\n  const languages = [{\n    name: 'C',\n    year: 1972\n  }, {\n    name: 'Elm',\n    year: 2012\n  }]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\n  const getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n  }; // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n\n\n  const getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\n  const renderSuggestion = suggestion => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, suggestion.name);\n\n  const value = this.state.value; // Autosuggest will pass through all these props to the input.\n\n  const inputProps = {\n    placeholder: 'Type a programming language',\n    value,\n    onChange: this.onChange\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-form\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Add School\")), React.createElement(Modal, {\n    isOpen: modal,\n    fade: false,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \" Add School\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Child Name (optional)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))), React.createElement(FormGroup, {\n    tag: \"fieldset\",\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Choose category\"), React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })))))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Add\"))));\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addSchool\n})(AddSchoolForm);","map":{"version":3,"sources":["/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js"],"names":["React","useState","Col","Button","Form","FormGroup","Label","Input","FormText","Modal","ModalHeader","ModalBody","ModalFooter","axios","Autosuggest","PropTypes","connect","addSchool","AddSchoolForm","text","setText","school","setSchool","suggestions","setSuggestions","state","value","modal","setModal","toggle","onChange","event","newValue","setState","onSuggestionsFetchRequested","getSuggestions","onSuggestionsClearRequested","languages","name","year","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","inputProps","placeholder","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap';\nimport axios from 'axios';\n\nimport Autosuggest from 'react-autosuggest';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\n\nconst AddSchoolForm = ({ addSchool }) => {\n  const [text, setText] = useState('');\n  const [school, setSchool] = React.useState('');\n  const [suggestions, setSuggestions] = React.useState([]);\n  this.state = {\n    value: ''\n  };\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  // Imagine you have a list of languages that you'd like to autosuggest.\n  const languages = [\n    {\n      name: 'C',\n      year: 1972\n    },\n    {\n      name: 'Elm',\n      year: 2012\n    }\n  ];\n\n  // Teach Autosuggest how to calculate suggestions for any given input value.\n  const getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0\n      ? []\n      : languages.filter(\n          lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n        );\n  };\n\n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = suggestion => suggestion.name;\n\n  // Use your imagination to render suggestions.\n  const renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\n  const { value } = this.state;\n\n  // Autosuggest will pass through all these props to the input.\n  const inputProps = {\n    placeholder: 'Type a programming language',\n    value,\n    onChange: this.onChange\n  };\n\n  return (\n    <div>\n      <div className='post-form' onClick={toggle}>\n        <Button color='primary' onClick={toggle}>\n          Add School\n        </Button>\n      </div>\n      <Modal isOpen={modal} fade={false} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Add School</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup row>\n              <Col sm={10}>\n                <Input\n                  type='text'\n                  name='text'\n                  placeholder='Child Name (optional)'\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup tag='fieldset' row>\n              <legend className='col-form-label'>Choose category</legend>\n              <Col sm={10}>\n                <FormGroup check>\n                  <Autosuggest\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={\n                      this.onSuggestionsFetchRequested\n                    }\n                    onSuggestionsClearRequested={\n                      this.onSuggestionsClearRequested\n                    }\n                    getSuggestionValue={getSuggestionValue}\n                    renderSuggestion={renderSuggestion}\n                    inputProps={inputProps}\n                  />\n                </FormGroup>\n              </Col>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={toggle}>\n            Add\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addSchool })(AddSchoolForm);\n"]},"metadata":{},"sourceType":"module"}