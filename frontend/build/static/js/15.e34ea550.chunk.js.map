{"version":3,"sources":["components/common/autocompletecitysearch/AutoCompleteCitySearch.js","actions/address.js","components/profile/account/modal/EditAccountModal.js","components/profile/account/Account.js"],"names":["connect","state","address","getCityData","searchTerm","arguments","length","undefined","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","get","concat","sent","type","GET_CITY_DATA","payload","data","t0","catchHandler","stop","_x","apply","this","Option","Select","children","results","map","item","index","selectedAddress","JSON","stringify","react_default","createElement","key","value","city","statecode","postalcode","es_select","name","showSearch","placeholder","onSearch","setTimeout","Math","random","onChange","option","auth","updateUser","withRouter","_React$createElement","_useState","useState","_useState2","slicedToArray","visible","setModalVisibility","toggleModal","_useState3","_useState4","componentSize","formItemLayout","labelCol","xs","span","sm","wrapperCol","yourInfo","formik_esm","initialValues","email","user","zipcode","onSubmit","values","myAddress","parse","citySelect","userName","validator","render","style","flex","padding","form_form","assign","className","layout","size","form_item","input","AutoCompleteCitySearch","submit_button","react","onClick","float","fontSize","cursor","marginTop","marginRight","modal","title","centered","onOk","okText","onCancel","destroyOnClose","cancelButtonProps","display","defineProperty","Content","Layout","userDetails","_id","modal_EditAccountModal","phone"],"mappings":"qLAmDeA,gBAHS,SAAAC,GAAK,MAAK,CAChCC,QAASD,EAAMC,UAEuB,CAAEC,YC7Cf,eAACC,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAc,GAAd,sBAAAG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAqB,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE1BC,IAAMC,IAAN,yCAAAC,OACyBnB,IAHC,OAEtCY,EAFsCE,EAAAM,KAK5CT,EAAS,CACPU,KAAMC,IACNC,QAASX,EAAIY,OAP6BV,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAU5CY,YAAYZ,EAAAW,GAAM,oCAV0B,yBAAAX,EAAAa,SAAAjB,EAAA,iBAArB,gBAAAkB,GAAA,OAAAxB,EAAAyB,MAAAC,KAAA7B,YAAA,KD6CZL,CA7Ce,SAAAQ,GAA8B,IAA3BL,EAA2BK,EAA3BL,YAAaD,EAAcM,EAAdN,QACtCiC,EAASC,IAAOD,OAehBE,EACJnC,GACAA,EAAQoC,SACRpC,EAAQoC,QAAQhC,OAAS,GACzBJ,EAAQoC,QAAQC,IAAI,SAACC,EAAMC,GACzB,IAAIC,EAAkBC,KAAKC,UAAUJ,GAErC,OACEK,EAAAjC,EAAAkC,cAACX,EAAD,CAAQY,IAAKN,EAAOO,MAAON,GACxBF,EAAKS,KADR,KACgBT,EAAKU,UADrB,IACiCV,EAAKW,cAK5C,OACEN,EAAAjC,EAAAkC,cAACM,EAAA,EAAD,CACEC,KAAK,aACLC,YAAU,EACVC,YAAY,cACZC,SAhCqB,SAAApD,GACvBqD,WAAW,WACTtD,EAAYC,IACK,IAAhBsD,KAAKC,WA8BNC,SA3BiB,SAACZ,EAAOa,GACvB3D,GAAWA,EAAQoC,SAAWpC,EAAQoC,QAAQhC,OAAS,IAEzDJ,EAAQwC,gBAAkBxC,EAAQoC,QAAQuB,EAAOd,QA0BhDV,gNEsGQrC,cAJS,SAAAC,GAAK,MAAK,CAChC6D,KAAM7D,EAAM6D,OAG0B,CACtCC,gBADa/D,CAEZgE,YAvIsB,SAAAxD,GAA0B,IAAAyD,EAAvBH,EAAuBtD,EAAvBsD,KAAMC,EAAiBvD,EAAjBuD,WAAiBG,EACXC,oBAAS,GADEC,EAAA3D,OAAA4D,EAAA,EAAA5D,CAAAyD,EAAA,GAC1CI,EAD0CF,EAAA,GACjCG,EADiCH,EAAA,GAU3CI,EAAc,WAClBD,GAAoBD,IAX2BG,EAiBPN,mBAAS,SAjBFO,EAAAjE,OAAA4D,EAAA,EAAA5D,CAAAgE,EAAA,GAiB1CE,EAjB0CD,EAAA,GAwB3CE,GAxB2CF,EAAA,GAwB1B,CACrBG,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,OAIVG,EACJrC,EAAAjC,EAAAkC,cAACqC,EAAA,EAAD,CACEC,cAAe,CACbC,MAAOvB,EAAKwB,KAAKD,MACjBhC,KAAM,GACNJ,KAAM,GACNhD,MAAO,GACPsF,QAAS,IAEXC,SAAU,SAAAC,GACR,IAAIC,EAAY/C,KAAKgD,MAAMF,EAAOG,YAElC7B,EACE,CACEsB,MAAOvB,EAAKwB,KAAKD,MACjBhC,KAAMoC,EAAOI,SACb5C,KAAMyC,EAAUzC,KAChBhD,MAAOyF,EAAUzF,MACjBsF,QAASG,EAAUvC,aAErB,GAEFoB,GAAmB,IAErBuB,UAAW,iBAAO,IAElBC,OAAQ,kBACNlD,EAAAjC,EAAAkC,cAAA,OAAKkD,MAAO,CAAEC,KAAM,EAAGC,QAAS,KAC9BrD,EAAAjC,EAAAkC,cAACqD,EAAA,EAAD1F,OAAA2F,OAAA,CACEC,UAAU,gBACNzB,EAFN,CAGE0B,OAAO,WACPlB,cAAe,CACbmB,KAAM5B,KAGE,OAATb,GAAiBA,EAAKwB,KACrBzC,EAAAjC,EAAAkC,cAAC0D,EAAA,EAAD,CAAUnD,KAAK,YACbR,EAAAjC,EAAAkC,cAAC2D,EAAA,EAAD,CAAOpD,KAAK,WAAWE,YAAaO,EAAKwB,KAAKjC,QAGhD,GAEFR,EAAAjC,EAAAkC,cAAC0D,EAAA,EAAD,CAAUnD,KAAK,QACbR,EAAAjC,EAAAkC,cAAC4D,EAAA,EAAD,OAEF7D,EAAAjC,EAAAkC,cAAC6D,EAAA,EAAD,CAAcN,UAAU,uBAAxB,gBAWV,OACExD,EAAAjC,EAAAkC,cAAC8D,EAAA,SAAD,KACG,IACD/D,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,gCAAgCQ,QAASrC,GACtD3B,EAAAjC,EAAAkC,cAAA,OACEkD,MAAO,CACLc,MAAO,QACPC,SAAU,OACVC,OAAQ,UACRC,UAAW,OACXC,YAAa,SAGfrE,EAAAjC,EAAAkC,cAAA,sBAGJD,EAAAjC,EAAAkC,cAACqE,EAAA,GAADlD,EAAA,CACEmD,MAAO,kBACPC,UAAQ,EACR/C,QAASA,EACTgD,KAzGY,WAChB/C,GAAmB,IAyGfgD,OAAO,OACPC,SAAUhD,EACViD,gBAAgB,EAChBC,kBAAmB,CAAE1B,MAAO,CAAE2B,QAAS,UARzClH,OAAAmH,EAAA,EAAAnH,CAAAwD,EAAA,kBASkB,GATlBxD,OAAAmH,EAAA,EAAAnH,CAAAwD,EAAA,SAUU,MAVVA,GAYGiB,cClEMlF,sBAJS,SAAAC,GAAK,MAAK,CAChC6D,KAAM7D,EAAM6D,OAG0B,GAAzB9D,CA3DC,SAAAQ,GAAc,IAAXsD,EAAWtD,EAAXsD,KACT+D,EAAYC,IAAZD,QAEFE,EACJlF,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,0BAA0BtD,IAAKe,EAAKwB,KAAK0C,KACtDnF,EAAAjC,EAAAkC,cAACmF,EAAD,MAEApF,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,kBACbxD,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,qBAAqBvC,EAAKwB,KAAKjC,KAA9C,MAEDS,EAAKwB,KAAK4C,OACTrF,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,kBACbxD,EAAAjC,EAAAkC,cAAA,KAAGuD,UAAU,kBACbxD,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,qBAAqBvC,EAAKwB,KAAK4C,MAA9C,MAIJrF,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,kBACbxD,EAAAjC,EAAAkC,cAAA,KAAGuD,UAAU,cACbxD,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,qBAAqBvC,EAAKwB,KAAKD,MAA9C,MAEDvB,EAAKwB,KAAKrC,KACTJ,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,kBACbxD,EAAAjC,EAAAkC,cAAA,KAAGuD,UAAU,0BACbxD,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,qBACZvC,EAAKwB,KAAKrC,KADb,KACqBa,EAAKwB,KAAKrF,MAD/B,IACuC6D,EAAKwB,KAAKC,UAInD,IAKN,OACE1C,EAAAjC,EAAAkC,cAAC+E,EAAD,KACEhF,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,WACZvC,GAAQA,EAAKwB,MACZzC,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,+BACbxD,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,4BACbxD,EAAAjC,EAAAkC,cAAA,MAAIuD,UAAU,2BAAd,eAEFxD,EAAAjC,EAAAkC,cAAA,OAAKuD,UAAU,6BAAf,IAA6C0B","file":"static/js/15.e34ea550.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'formik-antd';\n\nimport { getCityData } from '../../../actions/address';\n\nconst AutoCompleteCitySeach = ({ getCityData, address }) => {\n  const Option = Select.Option;\n\n  const handleCitySearch = searchTerm => {\n    setTimeout(() => {\n      getCityData(searchTerm);\n    }, Math.random() * 1000);\n  };\n\n  const onCitySelect = (value, option) => {\n    if (address && address.results && address.results.length > 0) {\n      //update selected address in the reducer\n      address.selectedAddress = address.results[option.key];\n    }\n  };\n\n  const children =\n    address &&\n    address.results &&\n    address.results.length > 0 &&\n    address.results.map((item, index) => {\n      let selectedAddress = JSON.stringify(item);\n\n      return (\n        <Option key={index} value={selectedAddress}>\n          {item.city}, {item.statecode} {item.postalcode}\n        </Option>\n      );\n    });\n\n  return (\n    <Select\n      name='citySelect'\n      showSearch\n      placeholder='Select City'\n      onSearch={handleCitySearch}\n      onChange={onCitySelect}\n    >\n      {children}\n    </Select>\n  );\n};\nconst mapStateToProps = state => ({\n  address: state.address\n});\nexport default connect(mapStateToProps, { getCityData })(AutoCompleteCitySeach);\n","import axios from 'axios';\nimport { catchHandler } from './alert';\n\nimport { GET_CITY_DATA, GET_CITY_DATA_ERROR } from './types';\n\n// Get Github repos\nexport const getCityData = (searchTerm = '') => async dispatch => {\n  try {\n    const res = await axios.get(\n      `/postaladdress/searchbycity?searchkey=${searchTerm}`\n    );\n    dispatch({\n      type: GET_CITY_DATA,\n      payload: res.data\n    });\n  } catch (err) {\n    catchHandler(err, 'Error occured when fetching city');\n  }\n};\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { updateUser } from '../../../../actions/auth';\nimport { Modal } from 'antd';\n\nimport { Formik, ErrorMessage } from 'formik';\nimport { SubmitButton, Input, Form, FormItem, FormikDebug } from 'formik-antd';\n\nimport AutoCompleteCitySeach from '../../../common/autocompletecitysearch/AutoCompleteCitySearch';\n\nconst EditAccountModal = ({ auth, updateUser }) => {\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  //const [formData, setFormData] = useState({ user });\n  const validateRequired = value => {\n    return value ? undefined : 'required';\n  };\n  const [componentSize, setComponentSize] = useState('small');\n  const inputOnChange = event => {\n    if (!event.target.value) {\n      return;\n    }\n    //fetchSchools(event.target.value);\n  };\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 }\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 16 }\n    }\n  };\n\n  const yourInfo = (\n    <Formik\n      initialValues={{\n        email: auth.user.email,\n        name: '',\n        city: '',\n        state: '',\n        zipcode: ''\n      }}\n      onSubmit={values => {\n        let myAddress = JSON.parse(values.citySelect);\n\n        updateUser(\n          {\n            email: auth.user.email,\n            name: values.userName,\n            city: myAddress.city,\n            state: myAddress.state,\n            zipcode: myAddress.postalcode\n          },\n          true\n        );\n        setModalVisibility(false);\n      }}\n      validator={() => ({})}\n      //validate={values => {}}\n      render={() => (\n        <div style={{ flex: 1, padding: 10 }}>\n          <Form\n            className='form-wrapper'\n            {...formItemLayout}\n            layout='vertical'\n            initialValues={{\n              size: componentSize\n            }}\n          >\n            {auth !== null && auth.user ? (\n              <FormItem name='userName'>\n                <Input name='userName' placeholder={auth.user.name} />\n              </FormItem>\n            ) : (\n              ''\n            )}\n            <FormItem name='city'>\n              <AutoCompleteCitySeach />\n            </FormItem>\n            <SubmitButton className='ant-btn btn-primary'> Update</SubmitButton>\n          </Form>\n\n          {/*      <pre style={{ flex: 1 }}>\n            <FormikDebug />\n          </pre> */}\n        </div>\n      )}\n    />\n  );\n\n  return (\n    <Fragment>\n      {' '}\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div\n          style={{\n            float: 'right',\n            fontSize: '12px',\n            cursor: 'pointer',\n            marginTop: '12px',\n            marginRight: '10px'\n          }}\n        >\n          <span>Edit</span>\n        </div>\n      </div>\n      <Modal\n        title={'Edit My Account'}\n        centered\n        visible={visible}\n        onOk={hideModal}\n        okText='Post'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n        footer={null}\n      >\n        {yourInfo}\n      </Modal>\n    </Fragment>\n  );\n};\n\nEditAccountModal.propTypes = {\n  //profileData: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  updateUser\n})(withRouter(EditAccountModal));\n","import React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Layout } from 'antd';\n\nimport EditAccountModal from './modal/EditAccountModal';\n\nimport './Account.scss';\nconst Account = ({ auth }) => {\n  const { Content } = Layout;\n\n  const userDetails = (\n    <div className='profile-content-details' key={auth.user._id}>\n      <EditAccountModal />\n\n      <div className='user-info-item'>\n        <div className='user-info-content'>{auth.user.name} </div>\n      </div>\n      {auth.user.phone && (\n        <div className='user-info-item'>\n          <i className='fas fa-mobile'></i>\n          <div className='user-info-content'>{auth.user.phone} </div>\n        </div>\n      )}\n\n      <div className='user-info-item'>\n        <i className='fas fa-at'></i>\n        <div className='user-info-content'>{auth.user.email} </div>\n      </div>\n      {auth.user.city ? (\n        <div className='user-info-item'>\n          <i className='fas fa-map-marker big'></i>\n          <div className='user-info-content'>\n            {auth.user.city}, {auth.user.state} {auth.user.zipcode}\n          </div>\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n\n  return (\n    <Content>\n      <div className='wrapper'>\n        {auth && auth.user && (\n          <div className='profile-component-container'>\n            <div className='profile-component-header'>\n              <h4 className='profile-component-title'>My Account</h4>\n            </div>\n            <div className='profile-component-content'> {userDetails}</div>\n          </div>\n        )}\n      </div>\n    </Content>\n  );\n};\n\nAccount.propTypes = {\n  auth: PropTypes.object.isRequired\n  //deleteAccount: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {})(Account);\n"],"sourceRoot":""}