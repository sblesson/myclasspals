{"version":3,"sources":["components/common/filterpanel/GroupFilterPanel.js","components/groups/DiscoverGroup.js"],"names":["connect","state","group","searchGroup","useState","filterPanel","showFilterPanel","dateFilterSelected","setDateFilterSelected","groupTypeFilterSelected","setGroupTypeFilterSelected","filterObjectSelected","setFilterObjectSelected","groupTypeFilters","handleDateFilterClick","item","event","dateFilter","dateFilterLessThan","moment","utc","format","dateFilterGreaterThan","startOf","getUTCDate","Object","assign","className","onClick","size","header","bordered","dataSource","renderItem","Item","viewBox","stopPropagation","removeDateFilterHandler","fill","d","length","catagoryId","handleGroupTypeFilterClick","removeGroupTypeFilterHandler","searchGroupWithFilters","newRegistration","visible","setModalVisibility","style","marginBottom","AutoCompleteCitySearch","AutoCompleteGroupSearch","CreateGroupModal","searchResult","itemLayout","searchTerm","pagination","onChange","page","console","log","total","pageSize","hideOnSinglePage","key","id","hoverable","GroupCard","currentGroup","type","description","Spinner"],"mappings":"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","file":"static/js/17.1b7c0a44.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { searchGroup } from '../../../actions/group';\nimport moment from 'moment';\n\nimport { List } from 'antd';\nimport './FilterPanel.scss';\n\nconst FilterPanel = ({ group, searchGroup }) => {\n  const [filterPanel, showFilterPanel] = useState(false);\n  const [dateFilterSelected, setDateFilterSelected] = useState(null);\n  const [groupTypeFilterSelected, setGroupTypeFilterSelected] = useState(null);\n\n  const toggleFilterPanel = () => showFilterPanel(!filterPanel);\n\n  let [filterObjectSelected, setFilterObjectSelected] = useState(null);\n\n  const dateFilters = [\n    'Last hour',\n    'Today',\n    'This week',\n    'This month',\n    'This year',\n  ];\n\n  const groupTypeFilters = ['City', 'Zipcode', 'School Name'];\n  const getUTCDate = (item) => {\n    let dateFilterLessThan = moment().utc().format(),\n      dateFilterGreaterThan = null;\n\n    switch (item) {\n      case 'Last hour':\n        dateFilterGreaterThan = moment().utc().startOf('hour').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'Today':\n        dateFilterGreaterThan = moment().utc().startOf('day').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'This week':\n        dateFilterGreaterThan = moment().utc().startOf('week').format();\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'This month':\n        dateFilterGreaterThan = moment().utc().startOf('month').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'This year':\n        dateFilterGreaterThan = moment().utc().startOf('year').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n    }\n  };\n\n  const handleDateFilterClick = (item, event) => {\n    setDateFilterSelected(item);\n\n    let dateFilter = getUTCDate(item);\n\n    if (filterObjectSelected && filterObjectSelected.dateFilterLessThan) {\n      //filter already exist\n      filterObjectSelected.dateFilterLessThan = dateFilter.dateFilterLessThan;\n\n      if (filterObjectSelected && filterObjectSelected.dateFilterGreaterThan) {\n        //filter already exist\n        filterObjectSelected.dateFilterGreaterThan =\n          dateFilter.dateFilterGreaterThan;\n      }\n    } else {\n      //first time filter\n      filterObjectSelected = Object.assign(filterObjectSelected, dateFilter);\n      setFilterObjectSelected(filterObjectSelected);\n    }\n\n    searchGroup(filterObjectSelected);\n  };\n\n  const removeDateFilterHandler = (item, event) => {\n    event.stopPropagation();\n    if (filterObjectSelected.dateFilterGreaterThan)\n      delete filterObjectSelected.dateFilterGreaterThan;\n    if (filterObjectSelected.dateFilterLessThan)\n      delete filterObjectSelected.dateFilterLessThan;\n\n    setDateFilterSelected(null);\n\n    setFilterObjectSelected(filterObjectSelected);\n\n    searchGroup(filterObjectSelected);\n  };\n\n  const handleGroupTypeFilterClick = (item, event) => {\n    setGroupTypeFilterSelected(item);\n\n    if (filterObjectSelected) {\n      //filter already exist\n\n      //check if categoryId exist, then update it else create new\n      if (filterObjectSelected.catagoryId) {\n        filterObjectSelected.catagoryId = item;\n      } else {\n        filterObjectSelected = Object.assign(filterObjectSelected, {\n          catagoryId: item,\n        });\n      }\n    } else {\n      //first time filter add group and categoryId\n      setFilterObjectSelected({});\n    }\n\n    searchGroup(filterObjectSelected);\n  };\n\n  const removeGroupTypeFilterHandler = (item, event) => {\n    event.stopPropagation();\n\n    if (filterObjectSelected.catagoryId) delete filterObjectSelected.catagoryId;\n\n    setGroupTypeFilterSelected(null);\n\n    setFilterObjectSelected(filterObjectSelected);\n\n    searchGroup(filterObjectSelected);\n  };\n\n  return (\n    <div className='post-filters'>\n      <div className='filter-actions' onClick={toggleFilterPanel}>\n        <i className='fas fa-filter filter-icon'></i>\n        <span className='filter-label'> FILTER</span>\n      </div>\n      {filterPanel && (\n        <div className='filter-panel'>\n          <div className='row'>\n            <div className='col-xs-1 col-sm-1 col-md-6 col-lg-6'>\n              <List\n                size='small'\n                header={<div>DATE</div>}\n                bordered\n                dataSource={dateFilters}\n                renderItem={(item) => (\n                  <List.Item\n                    onClick={(event) => handleDateFilterClick(item, event)}\n                    className={dateFilterSelected === item ? ' selected' : ''}\n                  >\n                    {item}\n                    {dateFilterSelected === item && (\n                      <svg\n                        className='svg-icon'\n                        viewBox='0 0 20 20'\n                        onClick={(event) =>\n                          removeDateFilterHandler(item, event)\n                        }\n                      >\n                        <path\n                          fill='none'\n                          d='M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z'\n                        ></path>\n                      </svg>\n                    )}\n                  </List.Item>\n                )}\n              />\n            </div>\n            {groupTypeFilters && groupTypeFilters.length > 0 && (\n              <div className='col-xs-1 col-sm-1 col-md-6 col-lg-6'>\n                <List\n                  size='small'\n                  header={<div>TYPE</div>}\n                  bordered\n                  dataSource={groupTypeFilters}\n                  renderItem={(item) => (\n                    <List.Item\n                      onClick={(event) =>\n                        handleGroupTypeFilterClick(item, event)\n                      }\n                      className={\n                        groupTypeFilterSelected === item ? ' selected' : ''\n                      }\n                    >\n                      {item}\n                      {groupTypeFilterSelected === item && (\n                        <svg\n                          className='svg-icon'\n                          viewBox='0 0 20 20'\n                          onClick={(event) =>\n                            removeGroupTypeFilterHandler(item, event)\n                          }\n                        >\n                          <path\n                            fill='none'\n                            d='M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z'\n                          ></path>\n                        </svg>\n                      )}\n                    </List.Item>\n                  )}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, { searchGroup })(FilterPanel);\n","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Spinner from '../common/spinner/Spinner';\nimport CreateGroupModal from './modal/CreateGroupModal';\nimport { List, Card, Empty } from 'antd';\nimport GroupFilterPanel from '../common/filterpanel/GroupFilterPanel';\nimport AutoCompleteGroupSearch from '../common/autocompletegroupsearch/AutoCompleteGroupSearch';\nimport AutoCompleteCitySearch from '../common/autocompletecitysearch/AutoCompleteCitySearch';\nimport { searchGroup, searchGroupWithFilters } from '../../actions/group';\n\nimport GroupCard from './GroupCard';\n\nimport './DiscoverGroups.scss';\n\nconst DiscoverGroups = ({ group, newRegistration }) => {\n  const [visible, setModalVisibility] = useState(false);\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  return (\n    <Fragment onClick={toggleModal}>\n      {!group ? (\n        <Spinner />\n      ) : (\n        <div className={`${newRegistration ? '' : 'wrapper group-page'}`}>\n          {' '}\n          <Card style={{ marginBottom: 10 }} bordered={false}>\n            <AutoCompleteCitySearch />\n            <AutoCompleteGroupSearch />\n          </Card>\n          <div className='create-btn-wrapper'>\n            <CreateGroupModal />\n          </div>\n          {group !== null &&\n            group.searchResult &&\n            group.searchResult.length > 0 && (\n              <List\n                itemLayout='vertical'\n                size='small'\n                header={\n                  group.searchTerm\n                    ? `Groups based on your search`\n                    : 'Groups near you'\n                }\n                pagination={{\n                  onChange: (page) => {\n                    console.log(page);\n                  },\n                  total: group.searchResult.length,\n                  pageSize: 50,\n                  hideOnSinglePage: true,\n                }}\n                dataSource={group.searchResult}\n                renderItem={(item) => (\n                  <Card\n                    key={`${item.id}-card`}\n                    hoverable={true}\n                    bordered={false}\n                  >\n                    <GroupCard currentGroup={item} type='discover' />\n                  </Card>\n                )}\n              />\n            )}\n          {group.searchTerm && (\n            <Empty\n              description={\n                'No groups found in your city or school. Check the spelling or try again with another keyword.'\n              }\n            />\n          )}\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nDiscoverGroups.propTypes = {\n  searchGroup: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  searchGroup,\n  searchGroupWithFilters,\n})(DiscoverGroups);\n"],"sourceRoot":""}