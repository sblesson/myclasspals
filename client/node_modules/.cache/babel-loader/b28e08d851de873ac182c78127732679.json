{"ast":null,"code":"import _slicedToArray from \"/Users/sapnablesson/myGit/devconnector_2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js\";\nimport React, { useState } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport axios from 'axios';\nimport Autosuggest from 'react-autosuggest';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\n\nconst AddSchoolForm = ({\n  addSchool\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        country = _React$useState2[0],\n        setCountry = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        suggestions = _React$useState4[0],\n        setSuggestions = _React$useState4[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modal = _useState4[0],\n        setModal = _useState4[1];\n\n  const toggle = () => setModal(!modal);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-form\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Add School\")), React.createElement(Modal, {\n    isOpen: modal,\n    fade: false,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \" Add School\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    tag: \"fieldset\",\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Choose category\"), React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Label, {\n    check: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"radio\",\n    name: \"radio2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), \" General\"), React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: async ({\n      value\n    }) => {\n      if (!value) {\n        setSuggestions([]);\n        return;\n      }\n\n      try {\n        const url = \"https://api.schooldigger.com/v1.2/autocomplete/schools?q=\".concat(value, \"&appID=02e5e1fb&appKey=516f6dd0da01a186ffedea905bec1041\");\n        const response = await axios.get(url);\n        setSuggestions(response.schoolMatches.map(row => ({\n          name: row.name,\n          flag: row.flag\n        })));\n      } catch (e) {\n        setSuggestions([]);\n      }\n    },\n    onSuggestionsClearRequested: () => {\n      setSuggestions([]);\n    },\n    getSuggestionValue: suggestion => suggestion.name,\n    renderSuggestion: suggestion => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: suggestion.flag,\n      alt: suggestion.name,\n      style: {\n        width: '25px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), suggestion.name),\n    onSuggestionSelected: (event, {\n      suggestion,\n      method\n    }) => {\n      if (method === 'enter') {\n        event.preventDefault();\n      }\n\n      setCountry(suggestion.name); //setFieldValue('country', suggestion.name);\n    },\n    inputProps: {\n      placeholder: 'Search for your country',\n      autoComplete: 'abcd',\n      value: country,\n      name: 'country',\n      onChange: (_event, {\n        newValue\n      }) => {\n        setCountry(newValue);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })))), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Subject\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"textarea\", {\n    name: \"text\",\n    cols: \"30\",\n    rows: \"5\",\n    placeholder: \"Create a post\",\n    value: text,\n    onChange: e => setText(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Post\"))));\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addSchool\n})(AddSchoolForm);","map":{"version":3,"sources":["/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js"],"names":["React","useState","Col","Button","Form","FormGroup","Label","Input","FormText","Modal","ModalHeader","ModalBody","ModalFooter","axios","Autosuggest","PropTypes","connect","addSchool","AddSchoolForm","text","setText","country","setCountry","suggestions","setSuggestions","modal","setModal","toggle","value","url","response","get","schoolMatches","map","row","name","flag","e","suggestion","width","event","method","preventDefault","placeholder","autoComplete","onChange","_event","newValue","target","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap';\nimport axios from 'axios';\n\nimport Autosuggest from 'react-autosuggest';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\n\nconst AddSchoolForm = ({ addSchool }) => {\n  const [text, setText] = useState('');\n  const [country, setCountry] = React.useState('');\n  const [suggestions, setSuggestions] = React.useState([]);\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    <div>\n      <div className='post-form' onClick={toggle}>\n        <Button color='primary' onClick={toggle}>\n          Add School\n        </Button>\n      </div>\n      <Modal isOpen={modal} fade={false} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Add School</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup tag='fieldset' row>\n              <legend className='col-form-label'>Choose category</legend>\n              <Col sm={10}>\n                <FormGroup check>\n                  <Label check>\n                    <Input type='radio' name='radio2' /> General\n                  </Label>\n                  <Autosuggest\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={async ({ value }) => {\n                      if (!value) {\n                        setSuggestions([]);\n                        return;\n                      }\n\n                      try {\n                        const url = `https://api.schooldigger.com/v1.2/autocomplete/schools?q=${value}&appID=02e5e1fb&appKey=516f6dd0da01a186ffedea905bec1041`;\n                        const response = await axios.get(url);\n\n                        setSuggestions(\n                          response.schoolMatches.map(row => ({\n                            name: row.name,\n                            flag: row.flag\n                          }))\n                        );\n                      } catch (e) {\n                        setSuggestions([]);\n                      }\n                    }}\n                    onSuggestionsClearRequested={() => {\n                      setSuggestions([]);\n                    }}\n                    getSuggestionValue={suggestion => suggestion.name}\n                    renderSuggestion={suggestion => (\n                      <div>\n                        <img\n                          src={suggestion.flag}\n                          alt={suggestion.name}\n                          style={{ width: '25px' }}\n                        />\n                        {suggestion.name}\n                      </div>\n                    )}\n                    onSuggestionSelected={(event, { suggestion, method }) => {\n                      if (method === 'enter') {\n                        event.preventDefault();\n                      }\n                      setCountry(suggestion.name);\n                      //setFieldValue('country', suggestion.name);\n                    }}\n                    inputProps={{\n                      placeholder: 'Search for your country',\n                      autoComplete: 'abcd',\n                      value: country,\n                      name: 'country',\n                      onChange: (_event, { newValue }) => {\n                        setCountry(newValue);\n                      }\n                    }}\n                  />\n                </FormGroup>\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n              <Input type='text' name='text' placeholder='Subject' />\n            </FormGroup>\n            <FormGroup row>\n              <textarea\n                name='text'\n                cols='30'\n                rows='5'\n                placeholder='Create a post'\n                value={text}\n                onChange={e => setText(e.target.value)}\n                required\n              />\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={toggle}>\n            Post\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addSchool })(AddSchoolForm);\n"]},"metadata":{},"sourceType":"module"}