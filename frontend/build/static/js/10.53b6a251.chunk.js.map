{"version":3,"sources":["actions/post.js","../node_modules/@ant-design/icons-svg/es/asn/StarOutlined.js","../node_modules/@ant-design/icons/es/icons/StarOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/FormOutlined.js","../node_modules/@ant-design/icons/es/icons/FormOutlined.js","components/common/autocompleteusersearch/AutoCompleteUserSearch.js","components/messages/modal/PrivateMessageModal.js","../auto-complete/index.jsx","components/messages/MessageDetails.js","components/messages/modal/DeleteMessageModal.js","components/messages/MessageDetailsPage.js","../divider/index.jsx","components/messages/MessageList.js","components/messages/MessagesSider.js","components/messages/Messages.js"],"names":["addPost","formData","callback","dispatch","a","config","headers","axios","post","res","type","ADD_POST","payload","data","setAlert","catchHandler","searchPost","requestObj","cancelToken","CancelToken","c","cancel","SEARCH_POST","isCancel","getPrivateMessages","cancelTokenSrc","source","token","GET_PRIVATE_MESSAGES","sendPrivateMessage","SEND_PRIVATE_MESSAGE","getPost","id","get","GET_POST","addMessageReply","postId","ADD_MESSAGE_REPLY","comments","addComment","ADD_COMMENT","addCommentToSinglePost","ADD_COMMENT_SINGLE_POST","deletePost","delete","DELETE_POST","deleteMessage","deleteComment","commentId","isSinglePost","REMOVE_COMMENT_SINGLE_POST","REMOVE_COMMENT","StarOutlined","props","ref","React","createElement","AntdIcon","Object","assign","icon","StarOutlinedSvg","displayName","forwardRef","FormOutlined","FormOutlinedSvg","connect","state","auth","searchUser","clearAutoCompleteUserSearchResult","onChangeUserSelect","console","log","Option","Select","useEffect","children","searchUserResult","length","map","item","index","key","value","email","style","fontWeigth","width","placeholder","onSelect","selectedSearchTerm","onSearch","searchTerm","_","debounce","debounced","PrivateMessageModal","memo","userId","toAddress","noMessagesFound","history","useState","componentSize","selectedEndUser","setSelectedEndUser","visible","setModalVisibility","headerTitle","showModal","hideModal","formItemLayout","labelCol","xs","span","sm","wrapperCol","MessageForm","initialValues","endUserId","subject","message","isPrivate","onSubmit","values","actions","response","_id","push","validator","render","flex","padding","className","layout","size","name","label","event","required","TextArea","cols","rows","displayInboxCompose","as","onClick","displayMessageButton","fontSize","displayCompose","status","subTitle","extra","title","centered","onOk","onCancel","destroyOnClose","cancelButtonProps","display","footer","prevProps","nextProps","mapDispatchToProps","currentGroup","group","withRouter","InternalSelect","isSelectOptionOrSelectOptGroup","child","RefAutoComplete","customizePrefixCls","dataSource","childNodes","toArray","selectRef","customizeInput","getInputElement","optionChildren","optionValue","Error","warning","prefixCls","getPrefixCls","omit","classNames","mode","currentPost","submitting","chatFormData","setChatForm","Input","Item","avatar","gap","charAt","author","content","comment","datetime","margin","onChange","e","preventDefault","target","htmlType","stopPropagation","float","postType","toggleModal","window","location","pathname","okText","isMobile","loading","userEmail","menu","ghost","onBack","back","tooltip","description","overlay","placement","EllipsisOutlined","__rest","s","t","i","p","orientation","dashed","restProps","orientationPrefix","classString","role","MessageList","messagePanelSelected","messages","messageUrl","pagination","page","pageSize","hideOnSinglePage","itemLayout","renderItem","classList","add","handleMessageItemClick","to","Meta","MessagesSider","Messages","messageId","match","useMediaQuery","maxWidth","isCurrent","useRef","current","user","params","DeskTopView","marginLeft","MessageDetailsPage","EmptyMessage","MobileView","image","imageStyle","height"],"mappings":"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","file":"static/js/10.53b6a251.chunk.js","sourcesContent":["import axios from 'axios';\nimport { setAlert, catchHandler } from './alert';\nimport {\n  GET_POST_CATEGORIES,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  ADD_COMMENT_SINGLE_POST,\n  REMOVE_COMMENT_SINGLE_POST,\n  REMOVE_COMMENT_ERROR,\n  SEND_PRIVATE_MESSAGE,\n  SEARCH_POST,\n  GET_PRIVATE_MESSAGES,\n  GET_POST_CATEGORIES_ERROR,\n  ADD_MESSAGE_REPLY,\n} from './types';\nimport { CancelToken } from '../utils/axios';\n\n// Get posts\nexport const getPostCategories = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_POST_CATEGORIES,\n      payload: { screen: 'dash' },\n    });\n  } catch (err) {\n    catchHandler(err, GET_POST_CATEGORIES_ERROR);\n  }\n};\n\n// Add post\nexport const addPost = (formData, callback) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/post/createpost', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post created', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_POST_ERROR');\n  }\n  callback();\n};\n\n// Add post\nexport const addEvent = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/post/createpost', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post created', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_POST_ERROR');\n  }\n};\n\n// Search post by groupId\nexport const searchPost = (requestObj, callback) => async (dispatch) => {\n  let cancel;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/post/searchpost', requestObj, config, {\n      cancelToken: new axios.CancelToken((c) => (cancel = c)),\n    });\n    dispatch({\n      type: SEARCH_POST,\n      payload: res.data,\n    });\n    callback(res.data.post, cancel);\n  } catch (err) {\n    if (axios.isCancel(err)) return;\n    catchHandler(err, 'SEARCH_POST_ERROR');\n  }\n};\n\n// Search post by groupId\nexport const getPrivateMessages = (formData, callback) => async (dispatch) => {\n  let cancelTokenSrc = axios.CancelToken.source();\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const res = await axios.post('/post/searchpost', formData, config, {\n      cancelToken: cancelTokenSrc.token,\n    });\n    dispatch({\n      type: GET_PRIVATE_MESSAGES,\n      payload: res.data.post,\n    });\n  } catch (err) {\n    catchHandler(err, 'CREATE_PRIVATE_POST_ERROR');\n  }\n  callback(cancelTokenSrc);\n};\n// Add post\nexport const sendPrivateMessage = (formData, callback) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const res = await axios.post('/post/createpost', formData, config);\n\n    dispatch({\n      type: SEND_PRIVATE_MESSAGE,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('New Message Created', 'success'));\n    callback(res.data);\n  } catch (err) {\n    catchHandler(err, 'CREATE_POST_ERROR');\n  }\n};\n\n// Search post by postId\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/post/getpost?id=${id}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data.post,\n    });\n  } catch (err) {\n    catchHandler(err, 'GET_POST_ERROR');\n  }\n};\n\n// Add comment\nexport const addMessageReply = (postId, formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/post/${postId}/addcomment`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_MESSAGE_REPLY,\n      payload: { postId, comments: res.data.post.comments },\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_MESSAGE_REPLY_ERROR');\n  }\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/post/${postId}/addcomment`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: { postId, comments: res.data.post.comments },\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_COMMENT_ERROR');\n  }\n};\n\n// Add comment\nexport const addCommentToSinglePost = (postId, formData) => async (\n  dispatch\n) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/post/${postId}/addcomment`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT_SINGLE_POST,\n      payload: { postId, comments: res.data.post.comments },\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    catchHandler(err, 'ADD_COMMENT_SINGLE_POST_ERROR');\n  }\n};\n// Delete post\nexport const deletePost = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`/post/deletepost/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId,\n    });\n  } catch (err) {\n    catchHandler(err, 'DELETE_POST_ERROR');\n  }\n};\n\n// Delete post\nexport const deleteMessage = (postId, callback) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`/post/deletepost/${postId}`);\n    dispatch({\n      type: 'DELETE_MESSAGE',\n      payload: postId,\n    });\n  } catch (err) {\n    catchHandler(err, 'DELETE_POST_ERROR');\n  }\n  callback();\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId, isSinglePost) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.delete(`/post/deletepost/${commentId}`);\n    if (isSinglePost) {\n      dispatch({\n        type: REMOVE_COMMENT_SINGLE_POST,\n        payload: { postId, commentId, comments: res.data },\n      });\n    } else {\n      dispatch({\n        type: REMOVE_COMMENT,\n        payload: { postId, commentId, comments: res.data },\n      });\n    }\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    catchHandler(err, 'DELETE_POST_ERROR');\n  }\n};\n","// This icon file is generated automatically.\n// tslint:disable\nvar StarOutlined = { \"name\": \"star\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3zM664.8 561.6l36.1 210.3L512 672.7 323.1 772l36.1-210.3-152.8-149L417.6 382 512 190.7 606.4 382l211.2 30.7-152.8 148.9z\" } }] } };\nexport default StarOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport React from 'react';\nimport StarOutlinedSvg from \"@ant-design/icons-svg/es/asn/StarOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar StarOutlined = function StarOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: StarOutlinedSvg\n  }));\n};\n\nStarOutlined.displayName = 'StarOutlined';\nexport default React.forwardRef(StarOutlined);","// This icon file is generated automatically.\n// tslint:disable\nvar FormOutlined = { \"name\": \"form\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M904 512h-56c-4.4 0-8 3.6-8 8v320H184V184h320c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V520c0-4.4-3.6-8-8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M355.9 534.9L354 653.8c-.1 8.9 7.1 16.2 16 16.2h.4l118-2.9c2-.1 4-.9 5.4-2.3l415.9-415c3.1-3.1 3.1-8.2 0-11.3L785.4 114.3c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1.8-5.7 2.3l-415.8 415a8.3 8.3 0 00-2.3 5.6zm63.5 23.6L779.7 199l45.2 45.1-360.5 359.7-45.7 1.1.7-46.4z\" } }] } };\nexport default FormOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport React from 'react';\nimport FormOutlinedSvg from \"@ant-design/icons-svg/es/asn/FormOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar FormOutlined = function FormOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: FormOutlinedSvg\n  }));\n};\n\nFormOutlined.displayName = 'FormOutlined';\nexport default React.forwardRef(FormOutlined);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { AutoComplete, Select } from 'antd';\nimport _ from 'lodash';\n\nimport {\n  searchUser,\n  clearAutoCompleteUserSearchResult,\n} from '../../../actions/auth';\n\nconst AutoCompleteUserSearch = ({\n  searchUser,\n  clearAutoCompleteUserSearchResult,\n  auth,\n  onChangeUserSelect,\n}) => {\n  console.log('inside Message AutoCompleteUserSearch');\n\n  const { Option } = Select;\n\n  useEffect(() => {\n    //clearAutoCompleteUserSearchResult();\n  }, []);\n  const handleUserSearch = (searchTerm) => {\n    if (searchTerm) {\n      var debounced = _.debounce(() => {\n        searchUser(searchTerm);\n      }, 1000);\n      debounced();\n    }\n  };\n\n  const onUserSelect = (selectedSearchTerm) => {\n    if (selectedSearchTerm) {\n      console.log(selectedSearchTerm);\n\n      onChangeUserSelect(selectedSearchTerm);\n    }\n  };\n\n  const children =\n    auth &&\n    auth.searchUserResult &&\n    auth.searchUserResult.length > 0 &&\n    auth.searchUserResult.map((item, index) => {\n      return (\n        <Option key={index} value={item.email}>\n          <span style={{ fontWeigth: 'bolder' }}> {item.email}</span>\n        </Option>\n      );\n    });\n\n  return (\n    <AutoComplete\n      //dropdownMatchSelectWidth={252}\n      style={{\n        width: '100%',\n      }}\n      placeholder={'Type Name'}\n      onSelect={onUserSelect}\n      onSearch={handleUserSearch}\n    >\n      {children}\n    </AutoComplete>\n  );\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, {\n  searchUser,\n  clearAutoCompleteUserSearchResult,\n})(AutoCompleteUserSearch);\n","import React, { useState } from 'react';\nimport { Upload, Button, Modal, Result } from 'antd';\nimport { UploadOutlined, StarOutlined, FormOutlined } from '@ant-design/icons';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, ErrorMessage } from 'formik';\n\nimport { SubmitButton, Input, Form, FormItem, FormikDebug } from 'formik-antd';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { sendPrivateMessage } from '../../../actions/post';\n//import AutoCompleteUserSeach from '../../common/autocompleteusersearch/AutoCompleteUserSeach';\nimport AutoCompleteUserSeach from '../../common/autocompleteusersearch/AutoCompleteUserSearch';\n\nimport './PrivateMessageModal.scss';\n\nconst PrivateMessageModal = React.memo(\n  ({ userId, sendPrivateMessage, toAddress, noMessagesFound, history }) => {\n    const [componentSize, setComponentSize] = useState('small');\n    const [selectedEndUser, setSelectedEndUser] = useState(\n      toAddress ? toAddress : ''\n    );\n\n    const [visible, setModalVisibility] = useState(false);\n    const [headerTitle, setHeaderTitle] = useState('Send Private Message');\n    const showModal = () => {\n      setModalVisibility(true);\n    };\n    const hideModal = () => {\n      setModalVisibility(false);\n    };\n    const toggleModal = () => {\n      setModalVisibility(!visible);\n    };\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const validateRequired = (value) => {\n      return value ? undefined : 'required';\n    };\n\n    const uploadProps = {\n      action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n      onChange({ file, fileList }) {\n        if (file.status !== 'uploading') {\n        }\n      },\n      defaultFileList: [\n        {\n          uid: '1',\n          name: 'xxx.png',\n          status: 'done',\n          response: 'Server Error 500', // custom error message to show\n          url: 'http://www.baidu.com/xxx.png',\n        },\n        {\n          uid: '2',\n          name: 'yyy.png',\n          status: 'done',\n          url: 'http://www.baidu.com/yyy.png',\n        },\n        {\n          uid: '3',\n          name: 'zzz.png',\n          status: 'error',\n          response: 'Server Error 500', // custom error message to show\n          url: 'http://www.baidu.com/zzz.png',\n        },\n      ],\n      showUploadList: {\n        showDownloadIcon: true,\n        downloadIcon: 'download ',\n        showRemoveIcon: true,\n        removeIcon: (\n          <StarOutlined\n            onClick={(e) => console.log(e, 'custom removeIcon event')}\n          />\n        ),\n      },\n    };\n\n    const handleSelectedUsers = (selectedUsers) => {\n      setSelectedEndUser(selectedUsers);\n    };\n\n    const MessageForm = (\n      <Formik\n        initialValues={{\n          userId: userId,\n          endUserId: selectedEndUser,\n          subject: '',\n          message: '',\n          isPrivate: true,\n        }}\n        onSubmit={(values, actions) => {\n          values.endUserId = selectedEndUser;\n          sendPrivateMessage(values, (response) => {\n            if (response && response.post && response.post._id) {\n              history.push(`/messages/${response.post._id}`);\n            }\n          });\n          setModalVisibility(false);\n        }}\n        validator={() => ({})}\n        //validate={values => {}}\n        render={() => (\n          <div style={{ flex: 1, padding: 10 }}>\n            <Form\n              className='form-wrapper'\n              {...formItemLayout}\n              layout='vertical'\n              initialValues={{\n                size: componentSize,\n              }}\n            >\n              {toAddress ? (\n                ''\n              ) : (\n                <FormItem\n                  name='endUserId'\n                  label='Select your friends'\n                  /*  required={true}\n                  validate={validateRequired} */\n                >\n                  <AutoCompleteUserSeach\n                    onChangeUserSelect={(event, value) =>\n                      handleSelectedUsers(event, value)\n                    }\n                  />\n                </FormItem>\n              )}\n              <FormItem\n                name='subject'\n                label='Subject'\n                /*      required={true}\n                validate={validateRequired} */\n              >\n                <Input name='subject' placeholder='Subject' />\n              </FormItem>\n              <FormItem name='message' label='Your Message' required={false}>\n                <Input.TextArea\n                  className='post-form-text-input post-form-textarea'\n                  name='message'\n                  cols='30'\n                  rows='5'\n                  placeholder='Enter your message ...'\n                  required={false}\n                />\n              </FormItem>\n              {/*       <Upload {...uploadProps}>\n              <Button>\n                <UploadOutlined /> Upload\n              </Button>\n            </Upload>             <pre style={{ flex: 1 }}>\n              <FormikDebug />\n            </pre>*/}\n              <SubmitButton className='ant-btn btn-primary'> Send</SubmitButton>\n            </Form>\n          </div>\n        )}\n      />\n    );\n    const displayInboxCompose = (\n      <div className='private-message-modal'>\n        <div as='h4' className='message-head-title'>\n          Inbox\n        </div>\n        <div\n          as='h4'\n          className='message-head-title message-head-link'\n          onClick={showModal}\n        >\n          <FormOutlined className='message-head-icon' />\n          Compose\n        </div>\n      </div>\n    );\n\n    const displayMessageButton = (\n      <div className='private-message-modal' onClick={showModal}>\n        <Button\n          type='primary'\n          className='btn-primary'\n          style={{ padding: '4px 10px', fontSize: '12px' }}\n        >\n          Message\n        </Button>\n      </div>\n    );\n\n    const displayCompose = (\n      <div className='private-message-modal'>\n        <Result\n          status='warning'\n          subTitle='No messages found!'\n          extra={\n            <div\n              as='h4'\n              className='message-head-title message-head-link'\n              onClick={showModal}\n            >\n              <FormOutlined className='message-head-icon' />\n              Compose\n            </div>\n          }\n        />\n      </div>\n    );\n\n    return (\n      <div className='message-body__private-message-modal'>\n        {noMessagesFound && displayCompose}\n        {!noMessagesFound && !toAddress && displayInboxCompose}\n        {toAddress && displayMessageButton}\n        <Modal\n          title={headerTitle}\n          centered\n          visible={visible}\n          onOk={hideModal}\n          onCancel={hideModal} //pass close logic here\n          destroyOnClose={true}\n          cancelButtonProps={{ style: { display: 'none' } }}\n          footer={null}\n        >\n          {MessageForm}\n        </Modal>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.userId && prevProps.userId !== nextProps.userId) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n);\n\nPrivateMessageModal.propTypes = {\n  sendPrivateMessage: PropTypes.func.isRequired,\n};\nconst mapDispatchToProps = (state) => ({\n  hideModal: state.hideModal,\n  currentGroup: state.group.currentGroup,\n});\n\nexport default connect(mapDispatchToProps, {\n  sendPrivateMessage,\n  mapDispatchToProps,\n})(withRouter(PrivateMessageModal));\n","/**\n * TODO: 4.0\n * - remove `dataSource`\n * - `size` not work with customizeInput\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nconst { Option } = Select;\nconst InternalSelect = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n    const { prefixCls: customizePrefixCls, className, children, dataSource } = props;\n    const childNodes = toArray(children);\n    const selectRef = React.useRef();\n    React.useImperativeHandle(ref, () => selectRef.current);\n    // ============================= Input =============================\n    let customizeInput;\n    if (childNodes.length === 1 &&\n        React.isValidElement(childNodes[0]) &&\n        !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        customizeInput = childNodes[0];\n    }\n    const getInputElement = () => customizeInput;\n    // ============================ Options ============================\n    let optionChildren;\n    // [Legacy] convert `children` or `dataSource` into option children\n    if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        optionChildren = children;\n    }\n    else {\n        optionChildren = dataSource\n            ? dataSource.map(item => {\n                if (React.isValidElement(item)) {\n                    return item;\n                }\n                switch (typeof item) {\n                    case 'string':\n                        return (<Option key={item} value={item}>\n                  {item}\n                </Option>);\n                    case 'object': {\n                        const { value: optionValue } = item;\n                        return (<Option key={optionValue} value={optionValue}>\n                  {item.text}\n                </Option>);\n                    }\n                    default:\n                        throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                }\n            })\n            : [];\n    }\n    // ============================ Warning ============================\n    React.useEffect(() => {\n        warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n        warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n    }, []);\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const prefixCls = getPrefixCls('select', customizePrefixCls);\n        return (<InternalSelect ref={selectRef} {...omit(props, ['dataSource'])} prefixCls={prefixCls} className={classNames(className, `${prefixCls}-auto-complete`)} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} getInputElement={getInputElement}>\n            {optionChildren}\n          </InternalSelect>);\n    }}\n    </ConfigConsumer>);\n};\nconst RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;\n","import React, { Fragment, useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Menu, Layout, Divider, Empty, Spin } from 'antd';\nimport {\n  getPrivateMessages,\n  getPost,\n  addMessageReply,\n} from '../../actions/post';\nimport PrivateMessageModal from './modal/PrivateMessageModal';\nimport {\n  Comment,\n  Form,\n  Button,\n  List,\n  Input,\n  Card,\n  Dropdown,\n  Avatar,\n} from 'antd';\nimport Ellipsis from 'ant-design-pro/lib/Ellipsis';\n\nimport './Messages.scss';\nconst MessageDetails = ({ post: { currentPost }, addMessageReply }) => {\n  const [chatFormData, setChatForm] = useState({\n    submitting: false,\n    value: '',\n  });\n\n  const { TextArea } = Input;\n\n  const onChatSubmit = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const formData = {\n      message: chatFormData.value,\n      endUserId: currentPost.endUserId,\n      subject: currentPost.subject,\n    };\n\n    setChatForm({ ...chatFormData, ['submitting']: true });\n    setChatForm({ ...chatFormData, ['value']: '' });\n    addMessageReply(currentPost._id, formData);\n  };\n\n  const onChangeChatMessage = (event) => {\n    event.preventDefault();\n    setChatForm({ ...chatFormData, ['value']: event.target.value });\n  };\n\n  return (\n    <>\n      {currentPost ? (\n        <Card style={{ width: '100%' }}>\n          <List>\n            <List.Item>\n              <Comment\n                avatar={\n                  <Avatar size='small' className='avatar-icon' gap={4}>\n                    {currentPost.userId.charAt(0)}\n                  </Avatar>\n                }\n                key={currentPost._id}\n                author={currentPost.endUserId}\n                content={currentPost.message}\n              ></Comment>\n            </List.Item>\n            {currentPost.comments &&\n              currentPost.comments.length > 0 &&\n              currentPost.comments.map((comment, index) => (\n                <List.Item key={index}>\n                  <Comment\n                    key={comment._id}\n                    author={comment.userId}\n                    avatar={\n                      <Avatar className='avatar-icon' size='small' gap={4}>\n                        {comment.userId.charAt(0)}\n                      </Avatar>\n                    }\n                    content={comment.message}\n                    datetime={comment.datetime}\n                  />\n                </List.Item>\n              ))}\n          </List>\n          <Divider style={{ margin: 0 }} />\n\n          <Comment\n            style={{ width: '100%' }}\n            content={\n              <div>\n                <Form.Item>\n                  <TextArea\n                    name='reply'\n                    className='input-block-level form-control'\n                    onChange={(e) => onChangeChatMessage(e)}\n                    placeholder='Type a message'\n                    value={chatFormData.value}\n                  />\n                </Form.Item>\n                <Form.Item>\n                  <Button\n                    htmlType='button'\n                    onClick={onChatSubmit}\n                    type='primary'\n                    style={{ float: 'right' }}\n                    className='btn-primary'\n                  >\n                    Send\n                  </Button>\n                </Form.Item>\n              </div>\n            }\n          />\n        </Card>\n      ) : (\n        <PrivateMessageModal noMessagesFound={true} />\n      )}\n    </>\n  );\n};\n\nMessageDetails.propTypes = {\n  getPrivateMessages: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {\n  getPrivateMessages,\n  getPost,\n  addMessageReply,\n})(MessageDetails);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteMessage } from '../../../actions/post';\nimport { Modal } from 'antd';\n\nimport _ from 'lodash';\n\nconst DeleteMessageModal = ({ deleteMessage, postType, post }) => {\n  const [headerTitle, setHeaderTitle] = useState(\"Please don't delete me!\");\n\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  const handleDelete = () => {\n    if (post && post.currentPost && post.currentPost._id) {\n      deleteMessage(post.currentPost._id, () => {\n        window.location.pathname = '/messages';\n      });\n    }\n    hideModal();\n  };\n  return (\n    <div>\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div className='account-info-delete-button-right'>\n          <span>Delete</span>\n        </div>\n      </div>\n      <Modal\n        title={headerTitle}\n        centered\n        visible={visible}\n        onOk={handleDelete}\n        okText='Delete'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n      >\n        <div>\n          Deleting this {postType} will removes it forever. Are you sure you\n          want to delete?\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {\n  deleteMessage,\n})(DeleteMessageModal);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { PageHeader, Descriptions, Dropdown, Menu, Spin, Empty } from 'antd';\nimport { EllipsisOutlined } from '@ant-design/icons';\nimport Ellipsis from 'ant-design-pro/lib/Ellipsis';\n\nimport _ from 'lodash';\nimport MessageDetails from './MessageDetails';\nimport DeleteMessageModal from './modal/DeleteMessageModal';\n\nimport './MessageDetailsPage.scss';\n\nconst MessageDetailsPage = ({\n  post: { currentPost },\n  isMobile,\n  loading,\n  userEmail,\n}) => {\n  console.log(' MessageDetailsPage');\n  console.log(currentPost);\n\n  const menu = (\n    <Menu>\n      <Menu.Item>\n        {' '}\n        <DeleteMessageModal postType='message' />\n      </Menu.Item>\n    </Menu>\n  );\n\n  if (loading) {\n    return <Spin />;\n  } else if (currentPost !== null) {\n    return (\n      <div className='wrapper'>\n        <PageHeader\n          ghost={false}\n          onBack={isMobile ? () => window.history.back() : false}\n          title={\n            <Ellipsis length={80} tooltip>\n              {currentPost.subject}\n            </Ellipsis>\n          }\n          subTitle={currentPost.description}\n          extra={\n            <Dropdown\n              overlay={menu}\n              placement='bottomCenter'\n              className='ant-dropdown-link'\n            >\n              <EllipsisOutlined />\n            </Dropdown>\n          }\n        >\n          <MessageDetails userEmail={userEmail} />\n        </PageHeader>\n      </div>\n    );\n  } else {\n    return <Empty description={'Message not exist'} />;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {})(MessageDetailsPage);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nconst Divider = props => (<ConfigConsumer>\n    {({ getPrefixCls }) => {\n    const { prefixCls: customizePrefixCls, type = 'horizontal', orientation = 'center', className, children, dashed } = props, restProps = __rest(props, [\"prefixCls\", \"type\", \"orientation\", \"className\", \"children\", \"dashed\"]);\n    const prefixCls = getPrefixCls('divider', customizePrefixCls);\n    const orientationPrefix = orientation.length > 0 ? `-${orientation}` : orientation;\n    const classString = classNames(className, prefixCls, `${prefixCls}-${type}`, {\n        [`${prefixCls}-with-text${orientationPrefix}`]: children,\n        [`${prefixCls}-dashed`]: !!dashed,\n    });\n    return (<div className={classString} {...restProps} role=\"separator\">\n          {children && <span className={`${prefixCls}-inner-text`}>{children}</span>}\n        </div>);\n}}\n  </ConfigConsumer>);\nexport default Divider;\n","import React, { useState } from 'react';\nimport { List, Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport Ellipsis from 'ant-design-pro/lib/Ellipsis';\nimport './MessageList.scss';\nconst MessageList = React.memo(({ messages, messageUrl, userEmail }) => {\n  console.log('MessageList' + messages);\n  let messagePanelSelected;\n  /*  const [messagePanelSelected, setMessagePanelItemSelected] = useState(\n    messages ? messages[0]._id : null\n  ); */\n\n  const handleMessageItemClick = (item, event) => {\n    //var element = document.getElementsByClassName('message-list');\n    //element.classList.remove('selected');\n    console.log(event.target.classList);\n    console.log(event);\n\n    event.target.classList.add('selected');\n\n    messagePanelSelected = item._id;\n    //setMessagePanelItemSelected(item._id);\n\n    console.log(messagePanelSelected);\n    console.log(item._id);\n  };\n  return (\n    <List\n      className='message-list'\n      pagination={{\n        onChange: (page) => {\n          console.log(page);\n        },\n        pageSize: 50,\n        hideOnSinglePage: true,\n      }}\n      itemLayout='vertical'\n      size='small'\n      dataSource={messages}\n      renderItem={(message) => (\n        <List.Item\n          key={message._id}\n          onClick={(event) => handleMessageItemClick(message, event)}\n          className={\n            messagePanelSelected === message._id ? 'selected' : 'spider'\n          }\n        >\n          <Link to={`${messageUrl}${message._id}`}>\n            {' '}\n            <List.Item.Meta\n              avatar={\n                <Avatar size='large' gap={4} className='avatar-icon'>\n                  {userEmail === message.endUserId\n                    ? message.userId.charAt(0)\n                    : message.endUserId\n                    ? message.endUserId.charAt(0)\n                    : ''}\n                </Avatar>\n              }\n              title={message.subject}\n              description={\n                <Ellipsis length={40} tooltip>\n                  {userEmail === message.endUserId\n                    ? message.userId\n                    : message.endUserId}\n                </Ellipsis>\n              }\n            />\n          </Link>\n        </List.Item>\n      )}\n    />\n  );\n});\n\nexport default MessageList;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport MessageList from './MessageList';\n\nconst MessagesSider = React.memo(\n  ({ post, messageUrl, userEmail }) => {\n    console.log(post.currentPost);\n    return (\n      <div className='sider'>\n        {post && post.messages && post.messages.length > 0 && (\n          <MessageList\n            messages={post.messages}\n            messageUrl={messageUrl}\n            userEmail={userEmail}\n          />\n        )}\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.messageUrl !== nextProps.messageUrl) {\n      return false;\n    } else if (\n      prevProps.post &&\n      prevProps.post.currentPost &&\n      nextProps.post.currentPost &&\n      prevProps.post.currentPost._id !== nextProps.post.currentPost._id\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n);\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {})(MessagesSider);\n","import React, { Fragment, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\n\nimport { Empty, Spin } from 'antd';\nimport { getPrivateMessages, getPost, clearMessages } from '../../actions/post';\nimport PrivateMessageModal from './modal/PrivateMessageModal';\n\nimport MessagesSider from './MessagesSider';\nimport MessageDetailsPage from './MessageDetailsPage';\n\nimport './Messages.scss';\nconst Messages = React.memo(\n  ({\n    getPrivateMessages,\n    getPost,\n    post: { messages, loading },\n    auth,\n    match,\n  }) => {\n    const isMobile = useMediaQuery({ maxWidth: 767 });\n    const isCurrent = useRef(true);\n    let messageId;\n\n    useEffect(() => {\n      if (isCurrent.current) {\n        getPrivateMessages(\n          { userId: auth.user.email, isPrivate: true },\n          (cancelTokenSrc) => {\n            cancelTokenSrc.cancel();\n          }\n        );\n      }\n      return () => {\n        //called when component is going to unmount\n        isCurrent.current = false;\n      };\n    }, [isCurrent]);\n\n    useEffect(() => {\n      if (match && match.params && match.params.id) {\n        messageId = match.params.id;\n        //user clicked on another group from dashboard leftnav groups menu,\n        //get groupId from params\n        getPost(messageId, (cancelTokenSrc) => {\n          //loading = false;\n          cancelTokenSrc.cancel();\n        });\n      }\n\n      return () => {};\n    }, [getPost, match]);\n\n    const DeskTopView = () => {\n      if (loading) {\n        return <Spin />;\n      } else if (messages && messages.length > 0) {\n        return (\n          <div style='message-body' style={{ marginLeft: '2rem' }}>\n            <PrivateMessageModal />\n\n            <div style={{ display: 'flex' }}>\n              <MessagesSider\n                messageUrl={'/messages/'}\n                userEmail={auth.user.email}\n              />\n\n              <MessageDetailsPage\n                loading={loading}\n                isMobile={isMobile}\n                userEmail={auth.user.email}\n              ></MessageDetailsPage>\n            </div>\n          </div>\n        );\n      } else {\n        return <EmptyMessage />;\n      }\n    };\n\n    const MobileView = () => {\n      if (messages && messages.length > 0) {\n        return (\n          <>\n            <PrivateMessageModal />\n\n            <MessagesSider\n              messageUrl={'/message/'}\n              userEmail={auth.user.email}\n            />\n          </>\n        );\n      } else {\n        return <EmptyMessage />;\n      }\n    };\n\n    const EmptyMessage = () => (\n      <Empty\n        image='https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg'\n        imageStyle={{\n          height: 60,\n        }}\n        className='centered-content'\n        description={\n          <span>\n            You have no messages in your inbox. Create new by clicking compose\n            button.\n          </span>\n        }\n      >\n        <PrivateMessageModal userId={auth.user._id} />\n      </Empty>\n    );\n    return <>{isMobile ? <MobileView /> : <DeskTopView />}</>;\n  },\n  (prevProps, nextProps) => {\n    /*     if (\n      prevProps.post &&\n      prevProps.post.currentPost &&\n      nextProps.post.currentPost &&\n      prevProps.post.currentPost._id !== nextProps.post.currentPost._id\n    ) {\n      return false;\n    } else */ if (\n      prevProps.match.params &&\n      prevProps.match.params.id !== nextProps.match.params.id\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n);\n\nMessages.propTypes = {\n  getPrivateMessages: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  getPrivateMessages,\n  getPost,\n})(Messages);\n"],"sourceRoot":""}