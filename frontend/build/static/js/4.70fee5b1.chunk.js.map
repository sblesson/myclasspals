{"version":3,"sources":["components/groups/GroupCard.js","components/groups/modal/DeleteGroupModal.js","actions/school.js","components/common/autocompleteschoolsearch/AutoCompleteSchoolSearch.js","const/Grades.js","components/common/gradeselect/GradeSelect.js","components/groups/modal/CreateGroupForm.js","components/groups/modal/CreateGroupModal.js","components/common/autocompletegroupsearch/AutoCompleteGroupSearch.js","components/common/autocompletecitysearch/AutoCompleteCitySearch.js","actions/address.js","../auto-complete/index.jsx","../node_modules/@ant-design/icons-svg/es/asn/UsergroupAddOutlined.js","../node_modules/@ant-design/icons/es/icons/UsergroupAddOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js","../node_modules/@ant-design/icons/es/icons/SearchOutlined.js"],"names":["connect","state","ownProps","auth","group","acceptUserGroupInvitation","requestToJoinUserGroup","currentGroup","index","type","newRegistration","deleteGroup","history","useHistory","Meta","Card","useState","requestToJoinUserGroupClickHandler","record","groupId","id","role","requestorUserId","user","email","push","menu","onClick","key","console","log","Item","acceptPendingInviteActionClick","invitedUserId","className","hoverable","to","avatar","style","textTransform","background","shape","icon","groupName","charAt","title","privacy","groupPrivacy","toLowerCase","_","startCase","getGroupPrivacy","userGroupMembers","length","getUserGroupMemberCount","color","getUserGroupRole","overlay","e","preventDefault","groupActionMenu","headerTitle","visible","setModalVisibility","toggleModal","centered","onOk","okText","onCancel","destroyOnClose","cancelButtonProps","display","clearAutoCompleteSchoolSearchResult","dispatch","a","CLEAR_AUTOCOMPLETE_SCHOOL_SEARCH","school","fetchSchool","searchTerm","axios","get","res","FETCH_SCHOOL","payload","data","catchHandler","FETCH_SCHOOL_ERROR","Option","Select","useEffect","children","results","map","item","selectedSchool","schoolName","city","zip","value","fontWeigth","name","showSearch","placeholder","onSearch","debounce","debounced","allowClear","GRADES","GradeSelect","width","addGroup","withRouter","setModal","isLoadingCreateBtn","setIsLoadingCreateBtn","validateRequired","undefined","componentSize","formItemLayout","labelCol","xs","span","sm","wrapperCol","groupForm","initialValues","grade","onSubmit","values","actions","_id","schoolSelect","schoolData","split","schoolCity","schoolState","schoolZipCode","JSON","stringify","response","userGroup","resetForm","submitProfileForm","validator","render","flex","padding","layout","size","label","required","validate","defaultValue","marginBottom","TextArea","cols","rows","loading","CreateGroupModal","React","memo","event","marginLeft","UsergroupAddOutlined","closable","isNewGroup","searchGroupWithFilters","getGroupAutoComplete","clearAutoCompleteGroupSearchResult","OptGroup","clearGroupSearchResult","autoCompleteSearchResult","options","dataOption","twoToneColor","fontSize","paddingTop","onSelect","selectedSearchTerm","selectedSearch","groupKeyword","Search","address","getCityData","GET_CITY_DATA","selectedAddress","statecode","postalcode","setTimeout","Math","random","option","parse","zipcode","InternalSelect","isSelectOptionOrSelectOptGroup","child","RefAutoComplete","props","ref","customizePrefixCls","dataSource","childNodes","toArray","selectRef","customizeInput","getInputElement","optionChildren","optionValue","Error","warning","prefixCls","getPrefixCls","omit","classNames","mode","createElement","AntdIcon","Object","assign","UsergroupAddOutlinedSvg","displayName","forwardRef","SearchOutlined","SearchOutlinedSvg"],"mappings":"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","file":"static/js/4.70fee5b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Menu, Tag, Button, Dropdown, Avatar } from 'antd';\nimport _ from 'lodash';\nimport DeleteGroupModal from './modal/DeleteGroupModal';\n\nimport './GroupCard.scss';\n\nimport {\n  EditOutlined,\n  EllipsisOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\n\nimport {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup,\n} from '../../actions/group';\n\nimport './GroupCard.scss';\n\nconst GroupCard = ({\n  currentGroup,\n  index,\n  type,\n  auth,\n  group,\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup,\n  newRegistration,\n}) => {\n  let history = useHistory();\n\n  const { Meta } = Card;\n  const [isRequestUpdated, setRequestUpdate] = useState(false);\n\n  const requestToJoinUserGroupClickHandler = (record) => {\n    requestToJoinUserGroup(\n      {\n        groupId: record.id,\n        role: 'member',\n        requestorUserId: auth.user.email,\n      },\n      record,\n      () => {\n        if (newRegistration) {\n          history.push(`/dashboard/${record.id}`);\n        }\n        //searchGroupWithFilters({ groupKeyword: group.searchTerm });\n      }\n    );\n  };\n\n  const onClick = (key) => {\n    if (key === 'deletegroup') {\n      console.log('deletegroup');\n    } else if (key === 'editpost') {\n    }\n  };\n\n  const menu = (\n    <Menu onClick={onClick}>\n      <Menu.Item key='deletegroup'>\n        {' '}\n        <DeleteGroupModal groupId={currentGroup.id} />\n      </Menu.Item>\n    </Menu>\n  );\n  const acceptPendingInviteActionClick = (record) => {\n    acceptUserGroupInvitation(\n      {\n        groupId: record.id,\n        role: 'member',\n        invitedUserId: auth.user.email,\n      },\n      () => {\n        if (newRegistration) {\n          history.push(`/dashboard/${record.id}`);\n        }\n      }\n    );\n  };\n\n  const adminMemberActionMenu = (\n    <Dropdown overlay={menu} placement='bottomCenter'>\n      <a className='ant-dropdown-link' onClick={(e) => e.preventDefault()}>\n        <EllipsisOutlined />\n      </a>\n    </Dropdown>\n  );\n\n  const groupActionMenu = (currentGroup, type) => {\n    if (currentGroup) {\n      switch (type) {\n        case 'mygroup':\n        case 'discover':\n          if (currentGroup.role === null) {\n            //non members\n            if (currentGroup.privacy === 'PUBLIC') {\n              //display join button for public group\n              return (\n                <Button\n                  key={`${currentGroup.id}_join_btn`}\n                  className='btn-primary'\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Join'}\n                </Button>\n              );\n            } else {\n              //display request button for private group\n              return (\n                <Button\n                  className='btn-primary'\n                  key={`${currentGroup.id}_request_btn`}\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Request'}\n                </Button>\n              );\n            }\n          } else if (currentGroup.role === 'admin') {\n            return (\n              <Dropdown overlay={menu} className='group-card-action-dropdown'>\n                <a\n                  className='ant-dropdown-link'\n                  onClick={(e) => e.preventDefault()}\n                >\n                  <EllipsisOutlined />\n                </a>\n              </Dropdown>\n            );\n          } else if (currentGroup.role === 'member') {\n            return null;\n          } else if (\n            currentGroup.role === 'Pending Invitation' ||\n            currentGroup.role === 'Pending Requests'\n          ) {\n            return <Tag color='green'>{currentGroup.role}</Tag>;\n          }\n        case 'pendingInvitedUserGroups': {\n          if (type === 'discover' && currentGroup.privacy === 'PRIVATE') {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Request'}\n              </Button>\n            );\n          } else {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Join'}\n              </Button>\n            );\n          }\n        }\n        default:\n          return null;\n      }\n    }\n  };\n\n  const getUserGroupRole = (currentGroup) => {\n    if (currentGroup.role === 'admin') {\n      return <Tag color={'blue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'member') {\n      return <Tag color={'geekblue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'pending invitation') {\n      return <Tag color={'green'}>{currentGroup.role}</Tag>;\n    }\n  };\n\n  const getUserGroupMemberCount = (currentGroup) => {\n    if (currentGroup && currentGroup.userGroupMembers) {\n      if (currentGroup.userGroupMembers.length <= 1) {\n        return `${currentGroup.userGroupMembers.length} member`;\n      } else if (currentGroup.userGroupMembers.length > 1) {\n        return `${currentGroup.userGroupMembers.length} members`;\n      }\n    }\n  };\n\n  const getGroupPrivacy = (privacy) => {\n    if (privacy) {\n      let groupPrivacy = privacy.toLowerCase();\n      groupPrivacy = _.startCase(groupPrivacy);\n\n      if (privacy === 'PRIVATE') {\n        return (\n          <span>\n            <i className='fa fa-lock' title='private group'></i>&nbsp;\n            {groupPrivacy}\n          </span>\n        );\n      } else {\n        return (\n          <span>\n            <i className='fa fa-globe' title='public group'></i>\n            &nbsp;{groupPrivacy}\n          </span>\n        );\n      }\n    }\n  };\n\n  return (\n    <Card key={index} className='discover-group-card' hoverable={true}>\n      <Link to={`/group/${currentGroup.id}`}>\n        <Meta\n          avatar={\n            <Avatar\n              style={{\n                textTransform: 'uppercase',\n                background: 'rgb(0, 196, 204)',\n              }}\n              shape='square'\n              icon={currentGroup.groupName.charAt(0)}\n            />\n          }\n          title={currentGroup.groupName}\n          /*           description={\n            currentGroup.schoolName && (\n              <Meta\n                //className='group-card-meta-desc no-padding'\n                description={\n                  currentGroup.schoolName\n                    ? `School: ${currentGroup.schoolName}`\n                    : ''\n                }\n              />\n            )\n          } */\n        ></Meta>\n      </Link>\n\n      <div className='group-card-details'>\n        {currentGroup.privacy && (\n          <span className='group-card-details__privacy'>\n            {getGroupPrivacy(currentGroup.privacy)}\n          </span>\n        )}\n\n        {currentGroup.userGroupMembers &&\n          currentGroup.userGroupMembers.length > 0 && (\n            <>\n              <span className='group-card-details__members'>\n                {getUserGroupMemberCount(currentGroup)}\n              </span>\n              <span className='group-card-details__role'>\n                {getUserGroupRole(currentGroup)}\n              </span>\n            </>\n          )}\n        <div className='group-card-details__action'>\n          {groupActionMenu(currentGroup, type)}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nGroupCard.propTypes = {\n  currentGroup: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  auth: state.auth,\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n})(GroupCard);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteGroup } from '../../../actions/group';\nimport { Modal } from 'antd';\n\nimport _ from 'lodash';\n\nconst DeleteGroupModal = ({ deleteGroup, groupId, newRegistration }) => {\n  console.log('inside DeleteGroupModal');\n\n  const [headerTitle, setHeaderTitle] = useState(\"Please don't delete me!\");\n\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  const handleDelete = () => {\n    deleteGroup(groupId);\n    hideModal();\n  };\n  return (\n    <div>\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div className='account-info-delete-button-right'>\n          <span>Delete</span>\n        </div>\n      </div>\n      <Modal\n        title={headerTitle}\n        centered\n        visible={visible}\n        onOk={handleDelete}\n        okText='Delete'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n      >\n        <div>\n          Deleting this grouop will removes it forever. Are you sure you want to\n          delete?\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  deleteGroup,\n})(DeleteGroupModal);\n","import axios from 'axios';\nimport { catchHandler } from './alert';\n\nimport {\n  FETCH_SCHOOL,\n  FETCH_SCHOOL_ERROR,\n  CLEAR_AUTOCOMPLETE_SCHOOL_SEARCH\n} from './types';\n\nexport const fetchSchool = (searchTerm = '') => async dispatch => {\n  try {\n    const res = await axios.get(`/school/schoollist?searchkey=${searchTerm}`);\n    dispatch({\n      type: FETCH_SCHOOL,\n      payload: res.data\n    });\n  } catch (err) {\n    catchHandler(err, FETCH_SCHOOL_ERROR);\n  }\n};\nexport const clearAutoCompleteSchoolSearchResult = () => async dispatch => {\n  dispatch({ type: CLEAR_AUTOCOMPLETE_SCHOOL_SEARCH });\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'formik-antd';\nimport _ from 'lodash';\n\nimport {\n  fetchSchool,\n  clearAutoCompleteSchoolSearchResult\n} from '../../../actions/school';\n\nconst AutoCompleteSchoolSearch = ({ fetchSchool, school }) => {\n  const Option = Select.Option;\n\n  useEffect(() => {\n    clearAutoCompleteSchoolSearchResult();\n  }, []);\n  const handleSchoolSearch = searchTerm => {\n    if (searchTerm) {\n      var debounced = _.debounce(() => {\n        fetchSchool(searchTerm);\n      }, 1000);\n      debounced();\n    }\n  };\n\n  const children =\n    school &&\n    school.results &&\n    school.results.length > 0 &&\n    school.results.map((item, index) => {\n      let selectedSchool =\n        item.schoolName +\n        ', ' +\n        item.city +\n        ', ' +\n        item.state +\n        ', ' +\n        item.zip;\n      return (\n        <Option key={selectedSchool} value={selectedSchool}>\n          <span style={{ fontWeigth: 'bolder' }}> {selectedSchool}</span>\n        </Option>\n      );\n    });\n\n  return (\n    <Select\n      name='schoolSelect'\n      showSearch={true}\n      placeholder='Type School Name'\n      onSearch={handleSchoolSearch}\n      allowClear={true}\n    >\n      {children}\n    </Select>\n  );\n};\nconst mapStateToProps = state => ({\n  school: state.school\n});\nexport default connect(mapStateToProps, {\n  fetchSchool,\n  clearAutoCompleteSchoolSearchResult\n})(AutoCompleteSchoolSearch);\n","const GRADES = [\n  {\n    id: 'PK',\n    title: 'PK'\n  },\n  {\n    id: 'TK',\n    title: 'TK'\n  },\n  {\n    id: 'KG',\n    title: 'KG'\n  },\n  {\n    id: '01',\n    title: 'Grade 1'\n  },\n  {\n    id: '02',\n    title: 'Grade 2'\n  },\n  {\n    id: '03',\n    title: 'Grade 3'\n  },\n  {\n    id: '04',\n    title: 'Grade 4'\n  },\n  {\n    id: '05',\n    title: 'Grade 5'\n  },\n  {\n    id: '06',\n    title: 'Grade 6'\n  },\n  {\n    id: '07',\n    title: 'Grade 7'\n  },\n  {\n    id: '08',\n    title: 'Grade 8'\n  },\n  {\n    id: '09',\n    title: 'Grade 9'\n  },\n  {\n    id: '10',\n    title: 'Grade 10'\n  },\n  {\n    id: '11',\n    title: 'Grade 11'\n  },\n  {\n    id: '12',\n    title: 'Grade 12'\n  }\n];\n\nexport default GRADES;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'formik-antd';\nimport GRADES from '../../../const/Grades';\n\nconst GradeSelect = () => {\n  const Option = Select.Option;\n\n  const children =\n    GRADES &&\n    GRADES.length > 0 &&\n    GRADES.map((item) => {\n      return (\n        <Select.Option key={item.id} value={item.id}>\n          {item.title}\n        </Select.Option>\n      );\n    });\n\n  return (\n    <Select name='grade' style={{ width: '100%' }} placeholder='Select Grade'>\n      {children}\n    </Select>\n  );\n};\n\nexport default GradeSelect;\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { Tooltip } from 'antd';\n\nimport { Formik, ErrorMessage } from 'formik';\nimport {\n  SubmitButton,\n  Input,\n  Form,\n  Radio,\n  FormItem,\n  FormikDebug,\n  Select,\n} from 'formik-antd';\n\nimport { addGroup } from '../../../actions/group';\n\nimport AutoCompleteSchoolSearch from '../../common/autocompleteschoolsearch/AutoCompleteSchoolSearch';\n\nimport GradeSelect from '../../common/gradeselect/GradeSelect';\nconst CreateGroupForm = ({ auth, group, addGroup, setModal, history }) => {\n  const [isLoadingCreateBtn, setIsLoadingCreateBtn] = useState(false);\n\n  //const [formData, setFormData] = useState({ user });\n  const validateRequired = (value) => {\n    return value ? undefined : 'required';\n  };\n  const [componentSize, setComponentSize] = useState('small');\n  const inputOnChange = (event) => {\n    if (!event.target.value) {\n      return;\n    }\n    //fetchSchools(event.target.value);\n  };\n\n  const [isSchoolVisible, setIsSchoolVisible] = useState(true);\n  const { Option } = Select;\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 16 },\n    },\n  };\n\n  const showHideSchoolSelect = (event) => {\n    if (event.target.value === 'yes') {\n      setIsSchoolVisible(true);\n    } else {\n      setIsSchoolVisible(false);\n    }\n  };\n  const submitProfileForm = (values, actions) => {\n    setIsLoadingCreateBtn(true);\n\n    values.userGroupMembers = [\n      {\n        _id: auth.user._id,\n        name: auth.user.name,\n        role: 'admin',\n      },\n    ];\n    if (values.schoolSelect) {\n      let schoolData = values.schoolSelect.split(',');\n\n      values.schoolName = schoolData[0];\n      values.schoolCity = schoolData[1];\n      values.schoolState = schoolData[2];\n      values.schoolZipCode = schoolData[3];\n      delete values.schoolSelect;\n    }\n\n    addGroup(JSON.stringify(values), (response) => {\n      setModal(false);\n      console.log(response);\n      if (response && response.userGroup && response.userGroup.id) {\n        history.push('/dashboard/' + response.userGroup.id);\n      }\n    });\n    //actions.setSubmitting(false);\n    actions.resetForm();\n    setIsLoadingCreateBtn(false);\n  };\n\n  const groupForm = (\n    <Formik\n      initialValues={{\n        groupName: '',\n        privacy: 'PRIVATE',\n        grade: '',\n        role: 'admin',\n      }}\n      onSubmit={(values, actions) => {\n        submitProfileForm(values, actions);\n      }}\n      validator={() => ({})}\n      //validate={values => {}}\n      render={() => (\n        <div style={{ flex: 1, padding: 10 }}>\n          <Form\n            className='form-wrapper'\n            {...formItemLayout}\n            layout='vertical'\n            initialValues={{\n              size: componentSize,\n            }}\n          >\n            <FormItem\n              name='groupName'\n              label='Group Name'\n              required={true}\n              validate={validateRequired}\n            >\n              <Input name='groupName' placeholder='Group Name or Room Name' />\n            </FormItem>\n            <FormItem\n              name='schoolData'\n              required={false}\n              label='Select School'\n              //validate={validateRequired}\n            >\n              <AutoCompleteSchoolSearch />\n            </FormItem>\n            <FormItem\n              name='gradeLabel'\n              label='Select Grade'\n              //required={true}\n              //validate={validateRequired}\n            >\n              <GradeSelect />\n            </FormItem>\n\n            <FormItem\n              name='groupDiscovery'\n              label='Group Privacy'\n              //required={true}\n              //validate={validateRequired}\n            >\n              <Select name='privacy' defaultValue='PRIVATE'>\n                <Select.Option\n                  value='PRIVATE'\n                  title='Private – Needs approval for membership, only members can\n                  view post.'\n                >\n                  Private – Needs approval for membership, post only members can\n                  view.\n                </Select.Option>\n                <Select.Option\n                  value='PUBLIC'\n                  title='Public – Anyone can join, see posts etc.'\n                >\n                  Public – Anyone can join, see posts etc.\n                </Select.Option>\n              </Select>\n            </FormItem>\n            <FormItem\n              name='aboutGroup'\n              label='About Group'\n              style={{ marginBottom: 16 }}\n              required={false}\n            >\n              <Input.TextArea\n                className='post-form-text-input post-form-textarea'\n                name='aboutGroup'\n                cols='50'\n                rows='3'\n                placeholder='Describe your group&#39;s purpose'\n              />\n            </FormItem>\n            <FormItem name='groupRules' label='Group Rules' required={false}>\n              <Input.TextArea\n                className='post-form-text-input post-form-textarea'\n                name='groupRules'\n                cols='50'\n                rows='3'\n                placeholder='Start with the right tone by sharing your purpose and rules for your group. You can come back and edit this later, too. Note: all groups operate under myclasspals&#39;s global guidelines in addition to the guidelines you choose.'\n              />{' '}\n            </FormItem>\n            <SubmitButton\n              className='ant-btn btn-primary'\n              loading={isLoadingCreateBtn}\n            >\n              {' '}\n              Create\n            </SubmitButton>\n          </Form>\n          {/*       <pre style={{ flex: 1 }}>\n            <FormikDebug />\n          </pre> */}\n        </div>\n      )}\n    />\n  );\n\n  return <Fragment>{groupForm}</Fragment>;\n};\n\nCreateGroupForm.propTypes = {\n  //profileData: PropTypes.object.isRequired\n};\nconst mapStateToProps = (state) => ({\n  group: state.group,\n  auth: state.auth,\n  school: state.school.results,\n});\n\nexport default connect(mapStateToProps, {\n  addGroup,\n})(withRouter(CreateGroupForm));\n","import React, { Fragment, useState } from 'react';\nimport { UsergroupAddOutlined } from '@ant-design/icons';\nimport { withRouter } from 'react-router-dom';\nimport { Modal, Button } from 'antd';\nimport CreateGroupForm from './CreateGroupForm';\nimport PropTypes from 'prop-types';\nimport './CreateGroupModal.scss';\n\nconst CreateGroupModal = React.memo(({ newRegistration }) => {\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = (event) => {\n    event.preventDefault();\n\n    setModalVisibility(!visible);\n  };\n\n  const [componentSize, setComponentSize] = useState('small');\n  const onFormLayoutChange = ({ size }) => {\n    setComponentSize(size);\n  };\n\n  return (\n    <Fragment>\n      {newRegistration ? (\n        <div\n          onClick={(event) => toggleModal(event)}\n          className='onboarding-action-container create-action'\n        >\n          <i className='fas fa-plus-circle'></i>\n          <div className='onboarding-action-buttons'>\n            Create new school/class group\n          </div>\n        </div>\n      ) : (\n        <div\n          style={{ marginLeft: '1.3rem' }}\n          onClick={(event) => toggleModal(event)}\n        >\n          <Button\n            className='btn-primary add-group'\n            icon={<UsergroupAddOutlined />}\n          >\n            Create Group\n          </Button>\n        </div>\n      )}\n\n      <Modal\n        className='create-group-modal'\n        title={'Create new group'}\n        centered\n        closable={true}\n        visible={visible}\n        onOk={hideModal}\n        okText='Create'\n        onCancel={toggleModal}\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n        footer={null}\n      >\n        <CreateGroupForm isNewGroup={true} setModal={setModalVisibility} />\n      </Modal>\n    </Fragment>\n  );\n});\n\nexport default withRouter(CreateGroupModal);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Spin, Select, AutoComplete, Input } from 'antd';\nimport _ from 'lodash';\nimport Spinner from '../spinner/Spinner';\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport {\n  getGroupAutoComplete,\n  searchGroupWithFilters,\n  clearAutoCompleteGroupSearchResult,\n  clearGroupSearchResult,\n} from '../../../actions/group';\nimport './AutoCompleteGroupSearch.scss';\n\nconst AutoCompleteGroupSearch = ({\n  getGroupAutoComplete,\n  clearAutoCompleteGroupSearchResult,\n  searchGroupWithFilters,\n  group,\n}) => {\n  const { Option, OptGroup } = Select;\n\n  useEffect(() => {\n    return () => {\n      clearAutoCompleteGroupSearchResult();\n      clearGroupSearchResult();\n    };\n  }, []);\n\n  const children =\n    group &&\n    group.autoCompleteSearchResult &&\n    group.autoCompleteSearchResult.length > 0 &&\n    group.autoCompleteSearchResult.map((item) => {\n      return (\n        <OptGroup label={item.label} key={item.label}>\n          {item.options &&\n            item.options.length > 0 &&\n            item.options.map((dataOption) => {\n              if (dataOption) {\n                return (\n                  <Option key={dataOption} value={dataOption}>\n                    <div>\n                      {' '}\n                      <SearchOutlined\n                        twoToneColor='#52c41a'\n                        style={{ fontSize: '.8rem' }}\n                      />\n                      <span\n                        style={{\n                          marginLeft: '.5rem',\n                          paddingTop: '.3rem',\n                          fontSize: '.8rem',\n                          display: 'inline-block',\n                        }}\n                      >\n                        {dataOption}\n                      </span>\n                    </div>\n                  </Option>\n                );\n              }\n            })}\n        </OptGroup>\n      );\n    });\n\n  const handleSearch = (searchTerm) => {\n    if (searchTerm) {\n      var debounced = _.debounce(() => {\n        getGroupAutoComplete(searchTerm);\n      }, 5000);\n      debounced();\n    }\n  };\n\n  const onGroupSelect = (selectedSearchTerm) => {\n    if (selectedSearchTerm) {\n      let selectedSearch = selectedSearchTerm.split(',')[0];\n      searchGroupWithFilters({\n        groupKeyword: selectedSearch,\n        schoolName: selectedSearch,\n      });\n    }\n  };\n\n  return (\n    <AutoComplete\n      //dropdownMatchSelectWidth={252}\n      style={{\n        width: '100%',\n      }}\n      onSelect={onGroupSelect}\n      onSearch={handleSearch}\n      allowClear={true}\n    >\n      {children ? (\n        children\n      ) : (\n        <Input.Search\n          size='large'\n          placeholder='Type school name or group name'\n        />\n      )}\n    </AutoComplete>\n  );\n};\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\nexport default connect(mapStateToProps, {\n  searchGroupWithFilters,\n  getGroupAutoComplete,\n  clearAutoCompleteGroupSearchResult,\n})(AutoCompleteGroupSearch);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'antd';\n\nimport { getCityData } from '../../../actions/address';\nimport { searchGroupWithFilters } from '../../../actions/group';\nconst AutoCompleteCitySeach = ({\n  getCityData,\n  address,\n  searchGroupWithFilters,\n}) => {\n  const Option = Select.Option;\n\n  const handleCitySearch = (searchTerm) => {\n    setTimeout(() => {\n      getCityData(searchTerm);\n    }, Math.random() * 1000);\n  };\n\n  const onCitySelect = (value, option) => {\n    if (address && address.results && address.results.length > 0 && value) {\n      //update selected address in the reducer\n      address.selectedAddress = JSON.parse(value);\n      searchGroupWithFilters({\n        zipcode: address.selectedAddress.postalcode,\n        city: address.selectedAddress.city,\n      });\n    }\n  };\n\n  const children =\n    address &&\n    address.results &&\n    address.results.length > 0 &&\n    address.results.map((item, index) => {\n      let selectedAddress = JSON.stringify(item);\n\n      return (\n        <Option key={index} value={selectedAddress}>\n          {item.city}, {item.statecode} <br />\n          {item.postalcode}\n        </Option>\n      );\n    });\n\n  return (\n    <Select\n      style={{ width: '100%' }}\n      showSearch={true}\n      allowClear={true}\n      placeholder='Search by city or zipcode'\n      onSearch={handleCitySearch}\n      onSelect={onCitySelect}\n    >\n      {children}\n    </Select>\n  );\n};\nconst mapStateToProps = (state) => ({\n  address: state.address,\n});\nexport default connect(mapStateToProps, {\n  getCityData,\n  searchGroupWithFilters,\n})(AutoCompleteCitySeach);\n","import axios from 'axios';\nimport { catchHandler } from './alert';\n\nimport { GET_CITY_DATA, GET_CITY_DATA_ERROR } from './types';\n\n// Get Github repos\nexport const getCityData = (searchTerm = '') => async dispatch => {\n  try {\n    const res = await axios.get(\n      `/postaladdress/searchbycity?searchkey=${searchTerm}`\n    );\n    dispatch({\n      type: GET_CITY_DATA,\n      payload: res.data\n    });\n  } catch (err) {\n    catchHandler(err, 'Error occured when fetching city');\n  }\n};\n","/**\n * TODO: 4.0\n * - remove `dataSource`\n * - `size` not work with customizeInput\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nconst { Option } = Select;\nconst InternalSelect = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n    const { prefixCls: customizePrefixCls, className, children, dataSource } = props;\n    const childNodes = toArray(children);\n    const selectRef = React.useRef();\n    React.useImperativeHandle(ref, () => selectRef.current);\n    // ============================= Input =============================\n    let customizeInput;\n    if (childNodes.length === 1 &&\n        React.isValidElement(childNodes[0]) &&\n        !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        customizeInput = childNodes[0];\n    }\n    const getInputElement = () => customizeInput;\n    // ============================ Options ============================\n    let optionChildren;\n    // [Legacy] convert `children` or `dataSource` into option children\n    if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        optionChildren = children;\n    }\n    else {\n        optionChildren = dataSource\n            ? dataSource.map(item => {\n                if (React.isValidElement(item)) {\n                    return item;\n                }\n                switch (typeof item) {\n                    case 'string':\n                        return (<Option key={item} value={item}>\n                  {item}\n                </Option>);\n                    case 'object': {\n                        const { value: optionValue } = item;\n                        return (<Option key={optionValue} value={optionValue}>\n                  {item.text}\n                </Option>);\n                    }\n                    default:\n                        throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                }\n            })\n            : [];\n    }\n    // ============================ Warning ============================\n    React.useEffect(() => {\n        warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n        warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n    }, []);\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const prefixCls = getPrefixCls('select', customizePrefixCls);\n        return (<InternalSelect ref={selectRef} {...omit(props, ['dataSource'])} prefixCls={prefixCls} className={classNames(className, `${prefixCls}-auto-complete`)} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} getInputElement={getInputElement}>\n            {optionChildren}\n          </InternalSelect>);\n    }}\n    </ConfigConsumer>);\n};\nconst RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;\n","// This icon file is generated automatically.\n// tslint:disable\nvar UsergroupAddOutlined = { \"name\": \"usergroup-add\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M892 772h-80v-80c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v80h-80c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h80v80c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-80h80c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM373.5 498.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 01-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.8-1.7-203.2 89.2-203.2 200 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 008 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.8-1.1 6.4-4.8 5.9-8.8zM824 472c0-109.4-87.9-198.3-196.9-200C516.3 270.3 424 361.2 424 472c0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 00-86.4 60.4C357 742.6 326 814.8 324 891.8a8 8 0 008 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5C505.8 695.7 563 672 624 672c110.4 0 200-89.5 200-200zm-109.5 90.5C690.3 586.7 658.2 600 624 600s-66.3-13.3-90.5-37.5a127.26 127.26 0 01-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4-.1 34.2-13.4 66.3-37.6 90.5z\" } }] } };\nexport default UsergroupAddOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport React from 'react';\nimport UsergroupAddOutlinedSvg from \"@ant-design/icons-svg/es/asn/UsergroupAddOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UsergroupAddOutlined = function UsergroupAddOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: UsergroupAddOutlinedSvg\n  }));\n};\n\nUsergroupAddOutlined.displayName = 'UsergroupAddOutlined';\nexport default React.forwardRef(UsergroupAddOutlined);","// This icon file is generated automatically.\n// tslint:disable\nvar SearchOutlined = { \"name\": \"search\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z\" } }] } };\nexport default SearchOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport React from 'react';\nimport SearchOutlinedSvg from \"@ant-design/icons-svg/es/asn/SearchOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SearchOutlined = function SearchOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SearchOutlinedSvg\n  }));\n};\n\nSearchOutlined.displayName = 'SearchOutlined';\nexport default React.forwardRef(SearchOutlined);"],"sourceRoot":""}