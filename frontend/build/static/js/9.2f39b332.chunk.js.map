{"version":3,"sources":["components/groups/modal/DeleteGroupModal.js","components/groups/GroupCard.js","components/common/filterpanel/GroupFilterPanel.js","../auto-complete/index.jsx","../node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js","../node_modules/@ant-design/icons/es/icons/SearchOutlined.js","components/common/autocompletegroupsearch/AutoCompleteGroupSearch.js","components/groups/DiscoverGroup.js","../tag/CheckableTag.jsx","../_util/colors.js","../tag/index.jsx"],"names":["connect","state","group","deleteGroup","groupId","useState","headerTitle","visible","setModalVisibility","toggleModal","className","onClick","title","centered","onOk","okText","onCancel","destroyOnClose","cancelButtonProps","style","display","ownProps","auth","acceptUserGroupInvitation","requestToJoinUserGroup","currentGroup","index","type","Meta","Card","requestToJoinUserGroupClickHandler","record","id","role","requestorUserId","user","email","userGroup","console","log","menu","key","Item","acceptPendingInviteActionClick","invitedUserId","getGroupPrivacyLabel","EllipsisOutlined","privacy","groupPrivacy","toLowerCase","_","startCase","to","avatar","isSchoolGroup","paddingRight","groupName","description","userGroupMembers","length","getGroupPrivacy","getUserGroupMemberCount","color","getUserGroupRole","overlay","placement","float","e","preventDefault","groupActionMenu","schoolName","isGroupStatusUpdated","searchGroup","filterPanel","showFilterPanel","dateFilterSelected","setDateFilterSelected","groupTypeFilterSelected","setGroupTypeFilterSelected","filterObjectSelected","setFilterObjectSelected","groupTypeFilters","handleDateFilterClick","item","event","dateFilter","dateFilterLessThan","moment","utc","format","dateFilterGreaterThan","startOf","getUTCDate","Object","assign","size","header","bordered","dataSource","renderItem","viewBox","stopPropagation","removeDateFilterHandler","fill","d","catagoryId","handleGroupTypeFilterClick","removeGroupTypeFilterHandler","Option","Select","InternalSelect","isSelectOptionOrSelectOptGroup","child","RefAutoComplete","React","props","ref","customizePrefixCls","children","childNodes","toArray","selectRef","customizeInput","getInputElement","optionChildren","value","optionValue","Error","warning","prefixCls","getPrefixCls","omit","classNames","mode","SearchOutlined","createElement","AntdIcon","icon","SearchOutlinedSvg","displayName","forwardRef","searchGroupWithFilters","getGroupAutoComplete","clearAutoCompleteGroupSearchResult","OptGroup","useEffect","clearGroupSearchResult","autoCompleteSearchResult","map","label","options","dataOption","twoToneColor","fontSize","marginLeft","paddingTop","width","placeholder","onSelect","selectedSearchTerm","selectedSearch","split","groupKeyword","onSearch","searchTerm","newRegistration","CreateGroupModal","marginBottom","searchResult","itemLayout","pagination","onChange","page","total","pageSize","hideOnSinglePage","hoverable","GroupCard","Spinner","__rest","s","t","i","p","CheckableTag","checked","_a","restProps","cls","handleClick","this","PresetStatusColorTypes","tuple","PresetColorTypes","PresetColorRegex","RegExp","PresetStatusColorRegex","Tag","otherProps","isNeedWave","tagProps","nextProps","isPresetColor","backgroundColor","undefined","direction","onClose","handleIconClick","closable"],"mappings":"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","file":"static/js/9.2f39b332.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteGroup } from '../../../actions/group';\nimport { Modal } from 'antd';\n\nimport _ from 'lodash';\n\nconst DeleteGroupModal = ({ deleteGroup, groupId }) => {\n  const [headerTitle, setHeaderTitle] = useState(\"Please don't delete me!\");\n\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  const handleDelete = () => {\n    deleteGroup(groupId);\n    hideModal();\n  };\n  return (\n    <div>\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div className='account-info-delete-button-right'>\n          <span>Delete</span>\n        </div>\n      </div>\n      <Modal\n        title={headerTitle}\n        centered\n        visible={visible}\n        onOk={handleDelete}\n        okText='Delete'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n      >\n        <div>\n          Deleting this grouop will removes it forever. Are you sure you want to\n          delete?\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  deleteGroup,\n})(DeleteGroupModal);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Menu, Tag, Button, Dropdown } from 'antd';\nimport _ from 'lodash';\nimport DeleteGroupModal from './modal/DeleteGroupModal';\n\nimport {\n  EditOutlined,\n  EllipsisOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\n\nimport {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup,\n} from '../../actions/group';\n\nimport './GroupCard.scss';\n\nconst GroupCard = ({\n  currentGroup,\n  index,\n  type,\n  auth,\n  group,\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup,\n}) => {\n  const { Meta } = Card;\n  const [isRequestUpdated, setRequestUpdate] = useState(false);\n\n  const requestToJoinUserGroupClickHandler = (record) => {\n    requestToJoinUserGroup(\n      {\n        groupId: record.id,\n        role: 'member',\n        requestorUserId: auth.user.email,\n      },\n      record,\n      (userGroup) => {\n        console.log(userGroup);\n        //searchGroupWithFilters({ groupKeyword: group.searchTerm });\n      }\n    );\n  };\n\n  const onClick = (key) => {\n    if (key === 'deletegroup') {\n      console.log('deletegroup');\n    } else if (key === 'editpost') {\n    }\n  };\n\n  const menu = (\n    <Menu onClick={onClick}>\n      <Menu.Item key='deletegroup'>\n        {' '}\n        <DeleteGroupModal groupId={currentGroup.id} />\n      </Menu.Item>\n    </Menu>\n  );\n  const acceptPendingInviteActionClick = (record) => {\n    acceptUserGroupInvitation({\n      groupId: record.id,\n      role: 'member',\n      invitedUserId: auth.user.email,\n    });\n  };\n\n  const adminMemberActionMenu = (\n    <Dropdown overlay={menu} placement='bottomCenter'>\n      <a className='ant-dropdown-link' onClick={(e) => e.preventDefault()}>\n        <EllipsisOutlined />\n      </a>\n    </Dropdown>\n  );\n\n  const groupActionMenu = (currentGroup, type) => {\n    if (currentGroup) {\n      switch (type) {\n        case 'mygroup':\n        case 'discover':\n          if (currentGroup.role === null) {\n            //non members\n            if (currentGroup.privacy === 'PUBLIC') {\n              //display join button for public group\n              return (\n                <Button\n                  key={`${currentGroup.id}_join_btn`}\n                  className='btn-primary'\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Join'}\n                </Button>\n              );\n            } else {\n              //display request button for private group\n              return (\n                <Button\n                  className='btn-primary'\n                  key={`${currentGroup.id}_request_btn`}\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Request'}\n                </Button>\n              );\n            }\n          } else if (currentGroup.role === 'admin') {\n            return (\n              <Dropdown\n                overlay={menu}\n                placement='bottomCenter'\n                style={{ float: 'right' }}\n              >\n                <a\n                  className='ant-dropdown-link'\n                  onClick={(e) => e.preventDefault()}\n                >\n                  <EllipsisOutlined />\n                </a>\n              </Dropdown>\n            );\n          } else if (currentGroup.role === 'member') {\n            return null;\n          } else if (\n            currentGroup.role === 'Pending Invitation' ||\n            currentGroup.role === 'Pending Requests'\n          ) {\n            return <Tag color='green'>{currentGroup.role}</Tag>;\n          }\n        case 'pendingInvitedUserGroups': {\n          if (type === 'discover' && currentGroup.privacy === 'PRIVATE') {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Request'}\n              </Button>\n            );\n          } else {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Join'}\n              </Button>\n            );\n          }\n        }\n        default:\n          return null;\n      }\n    }\n  };\n\n  const getUserGroupRole = (currentGroup) => {\n    if (currentGroup.role === 'admin') {\n      return <Tag color={'blue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'member') {\n      return <Tag color={'geekblue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'y      hb youhkujhjmhjhkhvitation') {\n      return <Tag color={'green'}>{currentGroup.role}</Tag>;\n    }\n  };\n\n  const getUserGroupMemberCount = (currentGroup) => {\n    if (currentGroup && currentGroup.userGroupMembers) {\n      if (currentGroup.userGroupMembers.length <= 1) {\n        return `${currentGroup.userGroupMembers.length} member`;\n      } else if (currentGroup.userGroupMembers.length > 1) {\n        return `${currentGroup.userGroupMembers.length} members`;\n      }\n    }\n  };\n\n  const getGroupPrivacyLabel = (privacy) => {\n    if (privacy) {\n      let groupPrivacy = privacy.toLowerCase();\n      groupPrivacy = _.startCase(groupPrivacy);\n\n      if (privacy === 'PRIVATE') {\n        return (\n          <span>\n            <i className='fa fa-lock' title='private group'></i>&nbsp;\n            {groupPrivacy}\n          </span>\n        );\n      } else {\n        return (\n          <span>\n            <i className='fa fa-globe' title='public group'></i>\n            &nbsp;{groupPrivacy}\n          </span>\n        );\n      }\n    }\n  };\n\n  const getGroupPrivacy = (currentGroup) => {\n    if (\n      currentGroup &&\n      currentGroup.userGroupMembers &&\n      currentGroup.userGroupMembers.length > 0\n    ) {\n      if (currentGroup.userGroupMembers.length === 1) {\n        return <div>{getGroupPrivacyLabel(currentGroup.privacy)}</div>;\n      } else {\n        return <div>{getGroupPrivacyLabel()}</div>;\n      }\n    }\n  };\n\n  return (\n    <Card key={index} className='discover-group-card'>\n      <Link to={`/group/${currentGroup.id}`}>\n        <Meta\n          avatar={\n            currentGroup.isSchoolGroup === 'no' ? (\n              <i\n                className='fas fa-users icon-group no-padding'\n                style={{ paddingRight: 0 }}\n              ></i>\n            ) : (\n              <i\n                className='fas fa-school icon-group no-padding'\n                title='school group'\n              ></i>\n            )\n          }\n          title={currentGroup.groupName}\n        ></Meta>\n      </Link>\n      <Meta\n        className='group-card-meta-privacy no-padding'\n        description={getGroupPrivacy(currentGroup)}\n      ></Meta>\n\n      <Meta\n        className='group-card-meta-count no-padding'\n        description={getUserGroupMemberCount(currentGroup)}\n      ></Meta>\n\n      <Meta\n        className='group-card-meta-role no-padding'\n        description={getUserGroupRole(currentGroup)}\n      ></Meta>\n      <Meta\n        className='group-card-meta-action group-action no-padding'\n        description={groupActionMenu(currentGroup, type)}\n      ></Meta>\n      {currentGroup.schoolName ? (\n        <Meta\n          className='group-card-meta-desc no-padding'\n          description={\n            currentGroup.schoolName\n              ? `School Name: ${currentGroup.schoolName}`\n              : ''\n          }\n        />\n      ) : (\n        ''\n      )}\n\n      {currentGroup.isGroupStatusUpdated ? (\n        <Meta\n          className='group-card-update-status-link no-padding'\n          description={\n            <Link to={`/group/${currentGroup.id}`}>Peek inside</Link>\n          }\n        />\n      ) : (\n        ''\n      )}\n    </Card>\n  );\n};\n\nGroupCard.propTypes = {\n  currentGroup: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  auth: state.auth,\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n})(GroupCard);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { searchGroup } from '../../../actions/group';\nimport moment from 'moment';\n\nimport { List } from 'antd';\nimport './FilterPanel.scss';\n\nconst FilterPanel = ({ group, searchGroup }) => {\n  const [filterPanel, showFilterPanel] = useState(false);\n  const [dateFilterSelected, setDateFilterSelected] = useState(null);\n  const [groupTypeFilterSelected, setGroupTypeFilterSelected] = useState(null);\n\n  const toggleFilterPanel = () => showFilterPanel(!filterPanel);\n\n  let [filterObjectSelected, setFilterObjectSelected] = useState(null);\n\n  const dateFilters = [\n    'Last hour',\n    'Today',\n    'This week',\n    'This month',\n    'This year',\n  ];\n\n  const groupTypeFilters = ['City', 'Zipcode', 'School Name'];\n  const getUTCDate = (item) => {\n    let dateFilterLessThan = moment().utc().format(),\n      dateFilterGreaterThan = null;\n\n    switch (item) {\n      case 'Last hour':\n        dateFilterGreaterThan = moment().utc().startOf('hour').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'Today':\n        dateFilterGreaterThan = moment().utc().startOf('day').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'This week':\n        dateFilterGreaterThan = moment().utc().startOf('week').format();\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'This month':\n        dateFilterGreaterThan = moment().utc().startOf('month').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n      case 'This year':\n        dateFilterGreaterThan = moment().utc().startOf('year').format();\n\n        return {\n          dateFilterGreaterThan: dateFilterGreaterThan,\n          dateFilterLessThan: dateFilterLessThan,\n        };\n    }\n  };\n\n  const handleDateFilterClick = (item, event) => {\n    setDateFilterSelected(item);\n\n    let dateFilter = getUTCDate(item);\n\n    if (filterObjectSelected && filterObjectSelected.dateFilterLessThan) {\n      //filter already exist\n      filterObjectSelected.dateFilterLessThan = dateFilter.dateFilterLessThan;\n\n      if (filterObjectSelected && filterObjectSelected.dateFilterGreaterThan) {\n        //filter already exist\n        filterObjectSelected.dateFilterGreaterThan =\n          dateFilter.dateFilterGreaterThan;\n      }\n    } else {\n      //first time filter\n      filterObjectSelected = Object.assign(filterObjectSelected, dateFilter);\n      setFilterObjectSelected(filterObjectSelected);\n    }\n\n    searchGroup(filterObjectSelected);\n  };\n\n  const removeDateFilterHandler = (item, event) => {\n    event.stopPropagation();\n    if (filterObjectSelected.dateFilterGreaterThan)\n      delete filterObjectSelected.dateFilterGreaterThan;\n    if (filterObjectSelected.dateFilterLessThan)\n      delete filterObjectSelected.dateFilterLessThan;\n\n    setDateFilterSelected(null);\n\n    setFilterObjectSelected(filterObjectSelected);\n\n    searchGroup(filterObjectSelected);\n  };\n\n  const handleGroupTypeFilterClick = (item, event) => {\n    setGroupTypeFilterSelected(item);\n\n    if (filterObjectSelected) {\n      //filter already exist\n\n      //check if categoryId exist, then update it else create new\n      if (filterObjectSelected.catagoryId) {\n        filterObjectSelected.catagoryId = item;\n      } else {\n        filterObjectSelected = Object.assign(filterObjectSelected, {\n          catagoryId: item,\n        });\n      }\n    } else {\n      //first time filter add group and categoryId\n      setFilterObjectSelected({});\n    }\n\n    searchGroup(filterObjectSelected);\n  };\n\n  const removeGroupTypeFilterHandler = (item, event) => {\n    event.stopPropagation();\n\n    if (filterObjectSelected.catagoryId) delete filterObjectSelected.catagoryId;\n\n    setGroupTypeFilterSelected(null);\n\n    setFilterObjectSelected(filterObjectSelected);\n\n    searchGroup(filterObjectSelected);\n  };\n\n  return (\n    <div className='post-filters'>\n      <div className='filter-actions' onClick={toggleFilterPanel}>\n        <i className='fas fa-filter filter-icon'></i>\n        <span className='filter-label'> FILTER</span>\n      </div>\n      {filterPanel && (\n        <div className='filter-panel'>\n          <div className='row'>\n            <div className='col-xs-1 col-sm-1 col-md-6 col-lg-6'>\n              <List\n                size='small'\n                header={<div>DATE</div>}\n                bordered\n                dataSource={dateFilters}\n                renderItem={(item) => (\n                  <List.Item\n                    onClick={(event) => handleDateFilterClick(item, event)}\n                    className={dateFilterSelected === item ? ' selected' : ''}\n                  >\n                    {item}\n                    {dateFilterSelected === item && (\n                      <svg\n                        className='svg-icon'\n                        viewBox='0 0 20 20'\n                        onClick={(event) =>\n                          removeDateFilterHandler(item, event)\n                        }\n                      >\n                        <path\n                          fill='none'\n                          d='M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z'\n                        ></path>\n                      </svg>\n                    )}\n                  </List.Item>\n                )}\n              />\n            </div>\n            {groupTypeFilters && groupTypeFilters.length > 0 && (\n              <div className='col-xs-1 col-sm-1 col-md-6 col-lg-6'>\n                <List\n                  size='small'\n                  header={<div>TYPE</div>}\n                  bordered\n                  dataSource={groupTypeFilters}\n                  renderItem={(item) => (\n                    <List.Item\n                      onClick={(event) =>\n                        handleGroupTypeFilterClick(item, event)\n                      }\n                      className={\n                        groupTypeFilterSelected === item ? ' selected' : ''\n                      }\n                    >\n                      {item}\n                      {groupTypeFilterSelected === item && (\n                        <svg\n                          className='svg-icon'\n                          viewBox='0 0 20 20'\n                          onClick={(event) =>\n                            removeGroupTypeFilterHandler(item, event)\n                          }\n                        >\n                          <path\n                            fill='none'\n                            d='M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z'\n                          ></path>\n                        </svg>\n                      )}\n                    </List.Item>\n                  )}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, { searchGroup })(FilterPanel);\n","/**\n * TODO: 4.0\n * - remove `dataSource`\n * - `size` not work with customizeInput\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nconst { Option } = Select;\nconst InternalSelect = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n    const { prefixCls: customizePrefixCls, className, children, dataSource } = props;\n    const childNodes = toArray(children);\n    const selectRef = React.useRef();\n    React.useImperativeHandle(ref, () => selectRef.current);\n    // ============================= Input =============================\n    let customizeInput;\n    if (childNodes.length === 1 &&\n        React.isValidElement(childNodes[0]) &&\n        !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        customizeInput = childNodes[0];\n    }\n    const getInputElement = () => customizeInput;\n    // ============================ Options ============================\n    let optionChildren;\n    // [Legacy] convert `children` or `dataSource` into option children\n    if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        optionChildren = children;\n    }\n    else {\n        optionChildren = dataSource\n            ? dataSource.map(item => {\n                if (React.isValidElement(item)) {\n                    return item;\n                }\n                switch (typeof item) {\n                    case 'string':\n                        return (<Option key={item} value={item}>\n                  {item}\n                </Option>);\n                    case 'object': {\n                        const { value: optionValue } = item;\n                        return (<Option key={optionValue} value={optionValue}>\n                  {item.text}\n                </Option>);\n                    }\n                    default:\n                        throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                }\n            })\n            : [];\n    }\n    // ============================ Warning ============================\n    React.useEffect(() => {\n        warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n        warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n    }, []);\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const prefixCls = getPrefixCls('select', customizePrefixCls);\n        return (<InternalSelect ref={selectRef} {...omit(props, ['dataSource'])} prefixCls={prefixCls} className={classNames(className, `${prefixCls}-auto-complete`)} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} getInputElement={getInputElement}>\n            {optionChildren}\n          </InternalSelect>);\n    }}\n    </ConfigConsumer>);\n};\nconst RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;\n","// This icon file is generated automatically.\n// tslint:disable\nvar SearchOutlined = { \"name\": \"search\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z\" } }] } };\nexport default SearchOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport React from 'react';\nimport SearchOutlinedSvg from \"@ant-design/icons-svg/es/asn/SearchOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SearchOutlined = function SearchOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SearchOutlinedSvg\n  }));\n};\n\nSearchOutlined.displayName = 'SearchOutlined';\nexport default React.forwardRef(SearchOutlined);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Spin, Select, AutoComplete, Input } from 'antd';\nimport _ from 'lodash';\nimport Spinner from '../spinner/Spinner';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Form, FormItem } from 'formik-antd';\n\nimport {\n  getGroupAutoComplete,\n  searchGroupWithFilters,\n  clearAutoCompleteGroupSearchResult,\n  clearGroupSearchResult,\n} from '../../../actions/group';\nimport './AutoCompleteGroupSearch.scss';\n\nconst AutoCompleteGroupSearch = ({\n  getGroupAutoComplete,\n  clearAutoCompleteGroupSearchResult,\n  searchGroupWithFilters,\n  group,\n}) => {\n  const { Option, OptGroup } = Select;\n\n  useEffect(() => {\n    clearAutoCompleteGroupSearchResult();\n    clearGroupSearchResult();\n  }, []);\n\n  const children =\n    group &&\n    group.autoCompleteSearchResult &&\n    group.autoCompleteSearchResult.length > 0 &&\n    group.autoCompleteSearchResult.map((item) => {\n      return (\n        <OptGroup label={item.label} key={item.label}>\n          {item.options &&\n            item.options.length > 0 &&\n            item.options.map((dataOption) => {\n              if (dataOption) {\n                return (\n                  <Option key={dataOption} value={dataOption}>\n                    <div>\n                      {' '}\n                      <SearchOutlined\n                        twoToneColor='#52c41a'\n                        style={{ fontSize: '.8rem' }}\n                      />\n                      <span\n                        style={{\n                          marginLeft: '.5rem',\n                          paddingTop: '.3rem',\n                          fontSize: '.8rem',\n                          display: 'inline-block',\n                        }}\n                      >\n                        {dataOption}\n                      </span>\n                    </div>\n                  </Option>\n                );\n              }\n            })}\n        </OptGroup>\n      );\n    });\n\n  const handleSearch = (searchTerm) => {\n    if (searchTerm) {\n      getGroupAutoComplete(searchTerm);\n    }\n  };\n\n  const onGroupSelect = (selectedSearchTerm) => {\n    if (selectedSearchTerm) {\n      let selectedSearch = selectedSearchTerm.split(',')[0];\n      searchGroupWithFilters({\n        groupKeyword: selectedSearch,\n        schoolName: selectedSearch,\n      });\n    }\n  };\n\n  return (\n    <AutoComplete\n      //dropdownMatchSelectWidth={252}\n      style={{\n        width: '100%',\n      }}\n      placeholder={'Type school name or group name'}\n      onSelect={onGroupSelect}\n      onSearch={handleSearch}\n    >\n      {children}\n    </AutoComplete>\n  );\n};\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\nexport default connect(mapStateToProps, {\n  searchGroupWithFilters,\n  getGroupAutoComplete,\n  clearAutoCompleteGroupSearchResult,\n})(AutoCompleteGroupSearch);\n","import React, { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Spinner from '../common/spinner/Spinner';\nimport CreateGroupModal from './modal/CreateGroupModal';\nimport { List, Card, Empty } from 'antd';\nimport GroupFilterPanel from '../common/filterpanel/GroupFilterPanel';\nimport AutoCompleteGroupSearch from '../common/autocompletegroupsearch/AutoCompleteGroupSearch';\nimport { searchGroup, searchGroupWithFilters } from '../../actions/group';\n\nimport GroupCard from './GroupCard';\n\nimport './DiscoverGroups.scss';\n\nconst DiscoverGroups = ({ group, newRegistration }) => {\n  return (\n    <Fragment>\n      {!group ? (\n        <Spinner />\n      ) : (\n        <div className={`${newRegistration ? '' : 'wrapper group-page'}`}>\n          {' '}\n          <div className='create-btn-wrapper'>\n            <CreateGroupModal />\n          </div>\n          <Card style={{ marginBottom: 10 }} bordered={false}>\n            <AutoCompleteGroupSearch />\n          </Card>\n          {group !== null &&\n          group.searchResult &&\n          group.searchResult.length > 0 ? (\n            <List\n              itemLayout='vertical'\n              size='small'\n              header={\n                group.searchTerm\n                  ? `Groups based on your search`\n                  : 'Groups near you'\n              }\n              pagination={{\n                onChange: (page) => {\n                  console.log(page);\n                },\n                total: group.searchResult.length,\n                pageSize: 50,\n                hideOnSinglePage: true,\n              }}\n              dataSource={group.searchResult}\n              renderItem={(item) => (\n                <Card key={`${item.id}-card`} hoverable={true} bordered={false}>\n                  <GroupCard currentGroup={item} type='discover' />\n                </Card>\n              )}\n            />\n          ) : (\n            <Empty\n              description={\n                group.searchTerm\n                  ? 'No results found. Check the spelling or try again with another keyword.'\n                  : 'No groups found in your city or school'\n              }\n            />\n          )}\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nDiscoverGroups.propTypes = {\n  searchGroup: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  searchGroup,\n  searchGroupWithFilters,\n})(DiscoverGroups);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nexport default class CheckableTag extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { checked, onChange } = this.props;\n            if (onChange) {\n                onChange(!checked);\n            }\n        };\n        this.renderCheckableTag = ({ getPrefixCls }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, className, checked } = _a, restProps = __rest(_a, [\"prefixCls\", \"className\", \"checked\"]);\n            const prefixCls = getPrefixCls('tag', customizePrefixCls);\n            const cls = classNames(prefixCls, {\n                [`${prefixCls}-checkable`]: true,\n                [`${prefixCls}-checkable-checked`]: checked,\n            }, className);\n            delete restProps.onChange; // TypeScript cannot check delete now.\n            return <span {...restProps} className={cls} onClick={this.handleClick}/>;\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderCheckableTag}</ConfigConsumer>;\n    }\n}\n","import { tuple } from './type';\nexport const PresetStatusColorTypes = tuple('success', 'processing', 'error', 'default', 'warning');\n// eslint-disable-next-line import/prefer-default-export\nexport const PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport CloseOutlined from '@ant-design/icons/CloseOutlined';\nimport CheckableTag from './CheckableTag';\nimport { ConfigConsumer } from '../config-provider';\nimport { PresetColorTypes, PresetStatusColorTypes } from '../_util/colors';\nimport Wave from '../_util/wave';\nconst PresetColorRegex = new RegExp(`^(${PresetColorTypes.join('|')})(-inverse)?$`);\nconst PresetStatusColorRegex = new RegExp(`^(${PresetStatusColorTypes.join('|')})$`);\nclass Tag extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            visible: true,\n        };\n        this.handleIconClick = (e) => {\n            e.stopPropagation();\n            this.setVisible(false, e);\n        };\n        this.renderTag = (configProps) => {\n            const _a = this.props, { children } = _a, otherProps = __rest(_a, [\"children\"]);\n            const isNeedWave = 'onClick' in otherProps || (children && children.type === 'a');\n            const tagProps = omit(otherProps, ['onClose', 'color', 'visible', 'closable', 'prefixCls']);\n            return isNeedWave ? (<Wave>\n        <span {...tagProps} className={this.getTagClassName(configProps)} style={this.getTagStyle()}>\n          {children}\n          {this.renderCloseIcon()}\n        </span>\n      </Wave>) : (<span {...tagProps} className={this.getTagClassName(configProps)} style={this.getTagStyle()}>\n        {children}\n        {this.renderCloseIcon()}\n      </span>);\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        if ('visible' in nextProps) {\n            return {\n                visible: nextProps.visible,\n            };\n        }\n        return null;\n    }\n    getTagStyle() {\n        const { color, style } = this.props;\n        const isPresetColor = this.isPresetColor();\n        return Object.assign({ backgroundColor: color && !isPresetColor ? color : undefined }, style);\n    }\n    getTagClassName({ getPrefixCls, direction }) {\n        const { prefixCls: customizePrefixCls, className, color } = this.props;\n        const { visible } = this.state;\n        const isPresetColor = this.isPresetColor();\n        const prefixCls = getPrefixCls('tag', customizePrefixCls);\n        return classNames(prefixCls, {\n            [`${prefixCls}-${color}`]: isPresetColor,\n            [`${prefixCls}-has-color`]: color && !isPresetColor,\n            [`${prefixCls}-hidden`]: !visible,\n            [`${prefixCls}-rtl`]: direction === 'rtl',\n        }, className);\n    }\n    setVisible(visible, e) {\n        const { onClose } = this.props;\n        if (onClose) {\n            onClose(e);\n        }\n        if (e.defaultPrevented) {\n            return;\n        }\n        if (!('visible' in this.props)) {\n            this.setState({ visible });\n        }\n    }\n    isPresetColor() {\n        const { color } = this.props;\n        if (!color) {\n            return false;\n        }\n        return PresetColorRegex.test(color) || PresetStatusColorRegex.test(color);\n    }\n    renderCloseIcon() {\n        const { closable } = this.props;\n        return closable ? <CloseOutlined onClick={this.handleIconClick}/> : null;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTag}</ConfigConsumer>;\n    }\n}\nTag.CheckableTag = CheckableTag;\nTag.defaultProps = {\n    closable: false,\n};\nexport default Tag;\n"],"sourceRoot":""}