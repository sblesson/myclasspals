{"version":3,"sources":["components/groups/modal/GroupSearchResult.js","components/groups/modal/DiscoverGroupModal.js","components/onboarding/OnboardingUser.js"],"names":["GroupSearchResult","React","memo","group","newRegistration","console","log","searchResult","length","itemLayout","size","header","searchTerm","pagination","onChange","page","total","pageSize","hideOnSinglePage","dataSource","renderItem","item","GroupCard","currentGroup","type","DiscoverGroupModal","useState","isModalVisible","setModalVisibility","toggleModal","event","preventDefault","onClick","className","SearchOutlined","title","centered","visible","onOk","onCancel","destroyOnClose","cancelButtonProps","style","display","marginBottom","bordered","AutoCompleteCitySearch","margin","textAlign","AutoCompleteGroupSearch","description","connect","state","searchGroup","searchGroupWithFilters","profile","withRouter","auth","history","useEffect","user","userGroup","requestedUserGroup","push","to"],"mappings":"uPAyCeA,EAlCWC,IAAMC,MAAK,YAAiC,IAA9BC,EAA6B,EAA7BA,MAA6B,EAAtBC,gBAG7C,OAFAC,QAAQC,IAAI,qBAGV,oCACa,OAAVH,GAAkBA,EAAMI,cAAgBJ,EAAMI,aAAaC,OAAS,GACnE,kBAAC,IAAD,CACEC,WAAW,WACXC,KAAK,QACLC,OACER,EAAMS,WAAN,8BAAmD,kBAErDC,WAAY,CACVC,SAAU,SAACC,GACTV,QAAQC,IAAIS,IAEdC,MAAOb,EAAMI,aAAaC,OAC1BS,SAAU,GACVC,kBAAkB,GAEpBC,WAAYhB,EAAMI,aAClBa,WAAY,SAACC,GAAD,OACV,kBAACC,EAAA,EAAD,CAAWC,aAAcF,EAAMG,KAAK,WAAWpB,iBAAe,WChBpEqB,G,OAAqBxB,IAAMC,MAAK,YAAiC,IAAD,EAA7BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAC9CC,QAAQC,IAAI,6BADwD,MAEvBoB,oBAAS,GAFc,mBAE7DC,EAF6D,KAE7CC,EAF6C,KAO9DC,EAAc,SAACC,GACnBzB,QAAQC,IAAIwB,GACZA,EAAMC,iBACNH,GAAoBD,IAEtB,OACE,oCACGvB,EACC,yBACE4B,QAAS,SAACF,GAAD,OAAWD,EAAYC,IAChCG,UAAU,2CAEV,uBAAGA,UAAU,yBACb,yBAAKA,UAAU,6BAAf,0BAC0B,MAI5B,yBAAKD,QAAS,SAACF,GAAD,OAAWD,EAAYC,KACnC,yBAAKG,UAAU,cACb,kBAACC,EAAA,EAAD,CAAgBD,UAAU,qBAC1B,0BAAMA,UAAU,qBAAhB,oBAKN,kBAAC,KAAD,GACEA,UAAU,uBACVE,MAAO,iBACPC,UAAQ,EACRC,QAASV,EACTW,KAlCY,WAChBV,GAAmB,IAkCfW,SAAUV,EACVW,gBAAgB,EAChBC,kBAAmB,CAAEC,MAAO,CAAEC,QAAS,UARzC,gCASkB,GATlB,uBAUU,MAVV,GAYE,kBAAC,IAAD,CAAMD,MAAO,CAAEE,aAAc,IAAMC,UAAU,GAC3C,kBAACC,EAAA,EAAD,MACA,yBAAKJ,MAAO,CAAEK,OAAQ,OAAQC,UAAW,WAAzC,MACA,kBAACC,EAAA,EAAD,OAES,OAAV9C,GACCA,EAAMI,cACNJ,EAAMI,aAAaC,OAAS,GAC1B,kBAAC,EAAD,CAAmBL,MAAOA,EAAOC,iBAAe,IAEnDD,EAAMS,YACL,kBAAC,IAAD,CACEsC,YACE,wGAiBCC,iBAJS,SAACC,GAAD,MAAY,CAClCjD,MAAOiD,EAAMjD,SAGyB,CACtCkD,gBACAC,4BAFaH,CAGZ1B,I,uDC3FH,6EA2Ce0B,uBAHS,SAACC,GAAD,MAAY,CAClCG,QAASH,EAAMG,WAEuB,GAAzBJ,CAA6BK,aAjCrB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAe9B,OAdAC,qBAAU,WACR,GAAIF,GAAQA,EAAKG,KAAM,CACrB,IAAIA,EAAOH,EAAKG,MACZA,EAAKC,WAAaD,EAAKC,UAAUrD,OAAS,GAG5CoD,EAAKE,oBACLF,EAAKE,mBAAmBtD,OAAS,IAHjCkD,EAAQK,KAAK,iBAQhB,CAACN,IAEGA,GAAQA,EAAKG,KAAKC,WAAaJ,EAAKG,KAAKC,UAAUrD,OAAS,EACjE,kBAAC,IAAD,CAAUwD,GAAG,eAEb,kBAAC,WAAD,KACE,yBAAK/B,UAAU,sBACb,kBAAC,IAAD,CAAW7B,iBAAiB,IAC5B,kBAAC,IAAD,CAAkBA,iBAAiB","file":"static/js/16.d45386a8.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { List, Card, Empty } from 'antd';\n\nimport GroupCard from '../GroupCard';\n\nconst GroupSearchResult = React.memo(({ group, newRegistration }) => {\n  console.log('GroupSearchResult');\n\n  return (\n    <>\n      {group !== null && group.searchResult && group.searchResult.length > 0 && (\n        <List\n          itemLayout='vertical'\n          size='small'\n          header={\n            group.searchTerm ? `Groups based on your search` : 'Groups near you'\n          }\n          pagination={{\n            onChange: (page) => {\n              console.log(page);\n            },\n            total: group.searchResult.length,\n            pageSize: 50,\n            hideOnSinglePage: true,\n          }}\n          dataSource={group.searchResult}\n          renderItem={(item) => (\n            <GroupCard currentGroup={item} type='discover' newRegistration />\n          )}\n        />\n      )}\n    </>\n  );\n});\n\nGroupSearchResult.propTypes = {\n  group: PropTypes.object.isRequired,\n};\n\nexport default GroupSearchResult;\n","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { List, Card, Empty, Modal, Button } from 'antd';\nimport AutoCompleteGroupSearch from '../../common/autocompletegroupsearch/AutoCompleteGroupSearch';\nimport AutoCompleteCitySearch from '../../common/autocompletecitysearch/AutoCompleteCitySearch';\nimport { searchGroup, searchGroupWithFilters } from '../../../actions/group';\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport GroupSearchResult from './GroupSearchResult';\n\nimport './DiscoverGroupModal.scss';\n\nconst DiscoverGroupModal = React.memo(({ group, newRegistration }) => {\n  console.log('inside DiscoverGroupModal');\n  const [isModalVisible, setModalVisibility] = useState(false);\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = (event) => {\n    console.log(event);\n    event.preventDefault();\n    setModalVisibility(!isModalVisible);\n  };\n  return (\n    <>\n      {newRegistration ? (\n        <div\n          onClick={(event) => toggleModal(event)}\n          className='onboarding-action-container join-action'\n        >\n          <i className='fas fa-hands-helping'></i>\n          <div className='onboarding-action-buttons'>\n            Join school/class group{' '}\n          </div>\n        </div>\n      ) : (\n        <div onClick={(event) => toggleModal(event)}>\n          <div className='search-box'>\n            <SearchOutlined className='search-box__icon' />\n            <span className='search-box__input'> Search Groups</span>\n          </div>\n        </div>\n      )}\n\n      <Modal\n        className='discover-group-modal'\n        title={'Discover Group'}\n        centered\n        visible={isModalVisible}\n        onOk={hideModal}\n        onCancel={toggleModal}\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n        footer={null}\n      >\n        <Card style={{ marginBottom: 10 }} bordered={false}>\n          <AutoCompleteCitySearch />\n          <div style={{ margin: '10px', textAlign: 'center' }}>OR</div>\n          <AutoCompleteGroupSearch />\n        </Card>\n        {group !== null &&\n          group.searchResult &&\n          group.searchResult.length > 0 && (\n            <GroupSearchResult group={group} newRegistration />\n          )}\n        {group.searchTerm && (\n          <Empty\n            description={\n              'No groups found in your city or school. Check the spelling or try again with another keyword.'\n            }\n          />\n        )}\n      </Modal>\n    </>\n  );\n});\n\nDiscoverGroupModal.propTypes = {\n  searchGroup: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  searchGroup,\n  searchGroupWithFilters,\n})(DiscoverGroupModal);\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport CreateClassGroup from '../groups/modal/CreateGroupModal';\nimport JoinGroup from '../groups/modal/DiscoverGroupModal';\n\nimport './OnboardingUser.scss';\n\nconst OnboardingUser = ({ auth, history }) => {\n  useEffect(() => {\n    if (auth && auth.user) {\n      let user = auth.user;\n      if (user.userGroup && user.userGroup.length > 0) {\n        history.push('/dashboard');\n      } else if (\n        user.requestedUserGroup &&\n        user.requestedUserGroup.length > 0\n      ) {\n        history.push('/dashboard');\n      }\n    }\n  }, [auth]);\n\n  return auth && auth.user.userGroup && auth.user.userGroup.length > 0 ? (\n    <Redirect to='/dashboard' />\n  ) : (\n    <Fragment>\n      <div className='onboarding-wrapper'>\n        <JoinGroup newRegistration={true} />\n        <CreateClassGroup newRegistration={true} />\n      </div>\n    </Fragment>\n  );\n};\n\nOnboardingUser.propTypes = {\n  profile: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n});\nexport default connect(mapStateToProps, {})(withRouter(OnboardingUser));\n"],"sourceRoot":""}