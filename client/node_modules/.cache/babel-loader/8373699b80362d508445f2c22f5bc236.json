{"ast":null,"code":"import _slicedToArray from \"/Users/sapnablesson/myGit/devconnector_2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js\";\nimport React, { useState } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport axios from 'axios';\nimport Autosuggest from 'react-autosuggest';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\n\nconst AddSchoolForm = ({\n  addSchool\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        modal = _useState2[0],\n        setModal = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        school = _useState4[0],\n        setSchool = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        suggestions = _useState6[0],\n        setSuggestions = _useState6[1];\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        country = _React$useState2[0],\n        setCountry = _React$useState2[1];\n\n  const toggle = () => setModal(!modal);\n\n  const inputProps = {\n    placeholder: 'Search school name',\n    autoComplete: 'abcd',\n    value: school,\n    name: 'school',\n    onChange: (_event, {\n      newValue\n    }) => {\n      setSchool(newValue);\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-form\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Add School\")), React.createElement(Modal, {\n    isOpen: modal,\n    fade: false,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \" Add School\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Child Name (optional)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))), React.createElement(FormGroup, {\n    tag: \"fieldset\",\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Choose category\"), React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: async ({\n      value\n    }) => {\n      if (!value) {\n        setSuggestions([]);\n        return;\n      }\n\n      try {\n        const response = await axios.get(\"https://restcountries.eu/rest/v2/name/\".concat(value));\n        setSuggestions(response.data.map(row => ({\n          name: row.name,\n          flag: row.flag\n        })));\n      } catch (e) {\n        setSuggestions([]);\n      }\n    },\n    onSuggestionsClearRequested: () => {\n      setSuggestions([]);\n    },\n    getSuggestionValue: suggestion => suggestion.name,\n    renderSuggestion: suggestion => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: suggestion.flag,\n      alt: suggestion.name,\n      style: {\n        width: '25px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), suggestion.name),\n    onSuggestionSelected: (event, {\n      suggestion,\n      method\n    }) => {\n      if (method === 'enter') {\n        event.preventDefault();\n      }\n\n      setCountry(suggestion.name);\n      setFieldValue('country', suggestion.name);\n    },\n    inputProps: {\n      placeholder: 'Search for your country',\n      autoComplete: 'abcd',\n      value: country,\n      name: 'country',\n      onChange: (_event, {\n        newValue\n      }) => {\n        setCountry(newValue);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })))))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Add\"))));\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addSchool\n})(AddSchoolForm);","map":{"version":3,"sources":["/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js"],"names":["React","useState","Col","Button","Form","FormGroup","Label","Input","FormText","Modal","ModalHeader","ModalBody","ModalFooter","axios","Autosuggest","PropTypes","connect","addSchool","AddSchoolForm","modal","setModal","school","setSchool","suggestions","setSuggestions","country","setCountry","toggle","inputProps","placeholder","autoComplete","value","name","onChange","_event","newValue","response","get","data","map","row","flag","e","suggestion","width","event","method","preventDefault","setFieldValue","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap';\nimport axios from 'axios';\n\nimport Autosuggest from 'react-autosuggest';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\n\nconst AddSchoolForm = ({ addSchool }) => {\n  const [modal, setModal] = useState(false);\n  const [school, setSchool] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const [country, setCountry] = React.useState('');\n\n  const toggle = () => setModal(!modal);\n\n  const inputProps = {\n    placeholder: 'Search school name',\n    autoComplete: 'abcd',\n    value: school,\n    name: 'school',\n    onChange: (_event, { newValue }) => {\n      setSchool(newValue);\n    }\n  };\n\n  return (\n    <div>\n      <div className='post-form' onClick={toggle}>\n        <Button color='primary' onClick={toggle}>\n          Add School\n        </Button>\n      </div>\n      <Modal isOpen={modal} fade={false} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Add School</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup row>\n              <Col sm={10}>\n                <Input\n                  type='text'\n                  name='text'\n                  placeholder='Child Name (optional)'\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup tag='fieldset' row>\n              <legend className='col-form-label'>Choose category</legend>\n              <Col sm={10}>\n                <FormGroup check>\n                  <Autosuggest\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={async ({ value }) => {\n                      if (!value) {\n                        setSuggestions([]);\n                        return;\n                      }\n\n                      try {\n                        const response = await axios.get(\n                          `https://restcountries.eu/rest/v2/name/${value}`\n                        );\n\n                        setSuggestions(\n                          response.data.map(row => ({\n                            name: row.name,\n                            flag: row.flag\n                          }))\n                        );\n                      } catch (e) {\n                        setSuggestions([]);\n                      }\n                    }}\n                    onSuggestionsClearRequested={() => {\n                      setSuggestions([]);\n                    }}\n                    getSuggestionValue={suggestion => suggestion.name}\n                    renderSuggestion={suggestion => (\n                      <div>\n                        <img\n                          src={suggestion.flag}\n                          alt={suggestion.name}\n                          style={{ width: '25px' }}\n                        />\n                        {suggestion.name}\n                      </div>\n                    )}\n                    onSuggestionSelected={(event, { suggestion, method }) => {\n                      if (method === 'enter') {\n                        event.preventDefault();\n                      }\n                      setCountry(suggestion.name);\n                      setFieldValue('country', suggestion.name);\n                    }}\n                    inputProps={{\n                      placeholder: 'Search for your country',\n                      autoComplete: 'abcd',\n                      value: country,\n                      name: 'country',\n                      onChange: (_event, { newValue }) => {\n                        setCountry(newValue);\n                      }\n                    }}\n                  />\n                </FormGroup>\n              </Col>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={toggle}>\n            Add\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addSchool })(AddSchoolForm);\n"]},"metadata":{},"sourceType":"module"}