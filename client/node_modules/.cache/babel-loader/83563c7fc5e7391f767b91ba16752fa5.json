{"ast":null,"code":"import React, { useState, Component, useRef, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport ReactDOM from 'react-dom';\nimport { MDBIframe, MDBBox, MDBPopoverHeader, MDBPopoverBody, MDBBtn, MDBTooltip, Fa as Fa$1 } from 'mdbreact';\nimport { Manager, Popper, Reference } from 'react-popper';\nimport NumericInput from 'react-numeric-input';\nimport { Link as Link$1, NavLink as NavLink$1 } from 'react-router-dom';\nimport FocusTrap from 'focus-trap-react';\nimport Popper$1 from 'popper.js';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar Alert = function Alert(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var closeAlert = function closeAlert() {\n    setIsOpen(false);\n  };\n\n  var handleOnExit = function handleOnExit(node) {\n    node.classList.add('fade');\n    return props.onClose && props.onClose();\n  };\n\n  var handleOnExited = function handleOnExited() {\n    return props.onClosed && props.onClosed();\n  };\n\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      children = props.children,\n      dismiss = props.dismiss;\n  var alertClasses = classNames('alert', color && \"alert-\".concat(color), className);\n  var alertComponent;\n\n  if (dismiss) {\n    alertComponent = React.createElement(Transition, {\n      \"in\": isOpen,\n      timeout: 150,\n      unmountOnExit: true,\n      onExit: function onExit(node) {\n        return handleOnExit(node);\n      },\n      onExited: function onExited(node) {\n        return handleOnExited();\n      }\n    }, React.createElement(Tag, {\n      \"data-test\": \"alert\",\n      className: alertClasses,\n      role: \"alert\"\n    }, children, React.createElement(\"button\", {\n      onClick: closeAlert,\n      type: \"button\",\n      className: \"close\",\n      \"data-dismiss\": \"alert\",\n      \"aria-label\": \"Close\"\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"\\xD7\"))));\n  } else {\n    alertComponent = React.createElement(Tag, {\n      \"data-test\": \"alert\",\n      className: alertClasses,\n      role: \"alert\"\n    }, children);\n  }\n\n  return alertComponent;\n};\n\nAlert.defaultProps = {\n  color: 'primary',\n  tag: 'div'\n};\nAlert.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark']),\n  onClose: PropTypes.func,\n  onClosed: PropTypes.func,\n  tag: PropTypes.string\n};\n\nvar Animation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Animation, _Component);\n\n  function Animation() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Animation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Animation)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      // eslint-disable-next-line react/destructuring-assignment\n      isVisible: !_this.props.reveal,\n      // eslint-disable-next-line react/destructuring-assignment\n      revealed: !_this.props.reveal,\n      countIterations: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"elemRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePredicate\", function () {\n      var windowHeight = window.innerHeight;\n      var scroll = window.scrollY;\n      var docHeight = document.documentElement.offsetHeight;\n      var revealed = _this.state.revealed;\n      var currentRef = _this.elemRef.current;\n\n      if (windowHeight + scroll - 100 > _this.getOffset(currentRef) && scroll < _this.getOffset(currentRef) || windowHeight + scroll - 100 > _this.getOffset(currentRef) + currentRef.clientHeight && scroll < _this.getOffset(currentRef) + currentRef.clientHeight || windowHeight + scroll === docHeight && _this.getOffset(currentRef) + 100 > docHeight) {\n        _this.setState({\n          isVisible: true,\n          revealed: true\n        });\n      } else if (!revealed) {\n        _this.setState({\n          isVisible: false,\n          revealed: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      var onAnimationStart = _this.props.onAnimationStart;\n      var countIterations = _this.state.countIterations;\n\n      _this.setState({\n        countIterations: countIterations + 1\n      });\n\n      if (onAnimationStart) {\n        onAnimationStart();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIteration\", function () {\n      var onAnimationIteration = _this.props.onAnimationIteration;\n      var countIterations = _this.state.countIterations;\n\n      if (onAnimationIteration) {\n        _this.setState({\n          countIterations: countIterations + 1\n        });\n\n        onAnimationIteration();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnd\", function () {\n      var _this$props = _this.props,\n          onAnimationEnd = _this$props.onAnimationEnd,\n          count = _this$props.count;\n      var countIterations = _this.state.countIterations;\n\n      _this.setState({\n        countIterations: countIterations + 1\n      });\n\n      if (onAnimationEnd && count === countIterations) {\n        onAnimationEnd();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOffset\", function (elem) {\n      var box = elem.getBoundingClientRect();\n      var _document = document,\n          body = _document.body;\n      var docEl = document.documentElement;\n      var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n      var clientTop = docEl.clientTop || body.clientTop || 0;\n      var top = box.top + scrollTop - clientTop;\n      return Math.round(top);\n    });\n\n    return _this;\n  }\n\n  _createClass(Animation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var reveal = this.props.reveal;\n\n      if (reveal) {\n        window.addEventListener('scroll', this.updatePredicate);\n        this.updatePredicate();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var reveal = this.props.reveal;\n\n      if (reveal) {\n        window.removeEventListener('scroll', this.updatePredicate);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          count = _this$props2.count,\n          delay = _this$props2.delay,\n          duration = _this$props2.duration,\n          infinite = _this$props2.infinite,\n          reveal = _this$props2.reveal,\n          style = _this$props2.style,\n          Tag = _this$props2.tag,\n          type = _this$props2.type,\n          attributes = _objectWithoutProperties(_this$props2, [\"children\", \"className\", \"count\", \"delay\", \"duration\", \"infinite\", \"reveal\", \"style\", \"tag\", \"type\"]);\n\n      var _this$state = this.state,\n          isVisible = _this$state.isVisible,\n          revealed = _this$state.revealed;\n      var styleObject = {\n        animationDuration: duration,\n        animationDelay: delay,\n        animationIterationCount: infinite ? false : count,\n        visibility: isVisible ? 'visible' : 'hidden',\n        animationName: type\n      };\n      var hiddenStyles = {\n        animationName: 'none',\n        visibility: 'hidden'\n      };\n      var getAllStyles = Object.assign(styleObject, style);\n      var classes = classNames(isVisible && 'animated', type && type, infinite && 'infinite', className);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"animation\",\n        className: classes,\n        onAnimationEnd: this.handleEnd,\n        onAnimationIteration: this.handleIteration,\n        onAnimationStart: this.handleStart,\n        ref: this.elemRef,\n        style: isVisible && revealed ? getAllStyles : hiddenStyles // eslint-disable-next-line react/jsx-props-no-spreading\n\n      }, attributes), children);\n    }\n  }]);\n\n  return Animation;\n}(Component);\n\nAnimation.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  className: PropTypes.string,\n  count: PropTypes.number,\n  delay: PropTypes.string,\n  duration: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  infinite: PropTypes.bool,\n  onAnimationEnd: PropTypes.func,\n  onAnimationIteration: PropTypes.func,\n  onAnimationStart: PropTypes.func,\n  reveal: PropTypes.bool,\n  style: PropTypes.node,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  type: PropTypes.string\n};\nAnimation.defaultProps = {\n  tag: 'div',\n  reveal: false,\n  duration: 1,\n  count: 1\n};\n\nvar Badge = function Badge(props) {\n  var Tag = props.tag,\n      className = props.className,\n      children = props.children,\n      color = props.color,\n      pill = props.pill,\n      attributes = _objectWithoutProperties(props, [\"tag\", \"className\", \"children\", \"color\", \"pill\"]);\n\n  var classes = classNames('badge', color, \"badge-\".concat(color), pill ? 'badge-pill' : false, className);\n  return (// eslint-disable-next-line react/jsx-props-no-spreading\n    React.createElement(Tag, _extends({\n      \"data-test\": \"badge\"\n    }, attributes, {\n      className: classes\n    }), children)\n  );\n};\n\nBadge.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  tag: PropTypes.string\n};\nBadge.defaultProps = {\n  tag: 'span',\n  color: 'default',\n  pill: false\n};\n\nvar Box = function Box(props) {\n  var Tag = props.tag,\n      className = props.className,\n      children = props.children,\n      display = props.display,\n      justifyContent = props.justifyContent,\n      flex = props.flex,\n      alignItems = props.alignItems,\n      alignContent = props.alignContent,\n      alignSelf = props.alignSelf,\n      color = props.color,\n      bgColor = props.bgColor,\n      m = props.m,\n      mt = props.mt,\n      mr = props.mr,\n      mb = props.mb,\n      ml = props.ml,\n      mx = props.mx,\n      my = props.my,\n      p = props.p,\n      pt = props.pt,\n      pr = props.pr,\n      pb = props.pb,\n      pl = props.pl,\n      px = props.px,\n      py = props.py,\n      attributes = _objectWithoutProperties(props, [\"tag\", \"className\", \"children\", \"display\", \"justifyContent\", \"flex\", \"alignItems\", \"alignContent\", \"alignSelf\", \"color\", \"bgColor\", \"m\", \"mt\", \"mr\", \"mb\", \"ml\", \"mx\", \"my\", \"p\", \"pt\", \"pr\", \"pb\", \"pl\", \"px\", \"py\"]);\n\n  var marginOrPadding = function marginOrPadding(props, suffix) {\n    if (props !== undefined) {\n      return \"\".concat(suffix, \"-\").concat(props);\n    }\n  };\n\n  var classes = classNames(display && \"d-\".concat(display), justifyContent && \"justify-content-\".concat(justifyContent), flex && \"flex-\".concat(flex), alignItems && \"align-items-\".concat(alignItems), alignContent && \"align-content-\".concat(alignContent), alignSelf && \"align-self-\".concat(alignSelf), color && \"\".concat(color, \"-text\"), bgColor && \"bg-\".concat(bgColor), marginOrPadding(m, 'm'), marginOrPadding(mt, 'mt'), marginOrPadding(mr, 'mr'), marginOrPadding(mb, 'mb'), marginOrPadding(ml, 'ml'), marginOrPadding(mx, 'mx'), marginOrPadding(my, 'my'), marginOrPadding(p, 'p'), marginOrPadding(pt, 'pt'), marginOrPadding(pr, 'pr'), marginOrPadding(pb, 'pb'), marginOrPadding(pl, 'pl'), marginOrPadding(px, 'px'), marginOrPadding(py, 'py'), className);\n  var isEmptyClass = classes !== '' ? classes : null;\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: isEmptyClass\n  }), children);\n};\n\nBox.propTypes = {\n  alignContent: PropTypes.string,\n  alignItems: PropTypes.string,\n  alignSelf: PropTypes.string,\n  bgColor: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  display: PropTypes.string,\n  flex: PropTypes.string,\n  justifyContent: PropTypes.string,\n  m: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  mb: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  ml: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  mr: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  mt: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  mx: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  my: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  p: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  pb: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  pl: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  pr: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  pt: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  px: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  py: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  tag: PropTypes.string\n};\nBox.defaultProps = {\n  tag: 'div'\n};\n\nfunction omit(obj, omitKeys) {\n  var result = {};\n  Object.keys(obj).forEach(function (key) {\n    if (omitKeys.indexOf(key) === -1) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n}\n\nvar keyCodes = {\n  esc: 27,\n  space: 32,\n  tab: 9,\n  up: 38,\n  down: 40\n};\n\nvar returnAttributes = function returnAttributes(attributes) {\n  var newAttributesObject = Object.keys(attributes).reduce(function (previousValue, currentElement) {\n    if (attributes[currentElement]) {\n      previousValue[currentElement] = attributes[currentElement];\n    }\n\n    return previousValue;\n  }, {});\n  return newAttributesObject;\n};\n\nvar getColorClass = function getColorClass(color) {\n  var colorArray = color.split(' ');\n  var specialColors = ['danger', 'warning', 'success', 'info', 'default', 'primary', 'secondary', 'elegant', 'stylish', 'unique', 'special'];\n  var colorClasses = '';\n  colorArray.forEach(function (color) {\n    if (specialColors.includes(color)) {\n      if (color.includes('dark')) {\n        color.replace('-', '-color-');\n        colorClasses += \"\".concat(color, \" \");\n      } else {\n        colorClasses += \"\".concat(color, \"-color\");\n      }\n    } else {\n      colorClasses += \"\".concat(color, \" \");\n    }\n  });\n  return colorClasses;\n};\n\nfunction debounce(fn) {\n  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;\n  var timeout;\n\n  function debounced() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var that = this;\n\n    var later = function later() {\n      fn.apply(that, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, time);\n  }\n\n  debounced.clear = function () {\n    clearTimeout(timeout);\n  };\n\n  return debounced;\n}\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      color = props.color,\n      light = props.light,\n      uppercase = props.uppercase,\n      bold = props.bold,\n      attributes = _objectWithoutProperties(props, [\"className\", \"color\", \"light\", \"uppercase\", \"bold\"]);\n\n  var classes = classNames('breadcrumb', uppercase && 'text-uppercase', bold && 'font-up-bold', light && 'white-text', color && getColorClass(color), className);\n  var children;\n\n  if (bold) {\n    children = React.Children.map(props.children, function (child) {\n      return React.cloneElement(child, {\n        bold: true\n      });\n    });\n  } else {\n    children = props.children;\n  }\n\n  return React.createElement(\"nav\", {\n    \"data-test\": \"breadcrumb\"\n  }, React.createElement(\"ol\", _extends({}, attributes, {\n    className: classes\n  }), children));\n};\n\nBreadcrumb.propTypes = {\n  bold: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  light: PropTypes.bool,\n  uppercase: PropTypes.bool\n};\n\nvar Fa = function Fa(props) {\n  var border = props.border,\n      brand = props.brand,\n      className = props.className,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      fixed = props.fixed,\n      flip = props.flip,\n      icon = props.icon,\n      inverse = props.inverse,\n      light = props.light,\n      list = props.list,\n      pull = props.pull,\n      pulse = props.pulse,\n      regular = props.regular,\n      rotate = props.rotate,\n      size = props.size,\n      spin = props.spin,\n      stack = props.stack,\n      attributes = _objectWithoutProperties(props, [\"border\", \"brand\", \"className\", \"fab\", \"fal\", \"far\", \"fixed\", \"flip\", \"icon\", \"inverse\", \"light\", \"list\", \"pull\", \"pulse\", \"regular\", \"rotate\", \"size\", \"spin\", \"stack\"]);\n\n  var iconPrefix = brand || fab ? 'fab' : light || fal ? 'fal' : regular || far ? 'far' : 'fa';\n  var classes = classNames(iconPrefix, list ? 'fa-li' : false, icon ? \"fa-\".concat(icon) : false, size ? \"fa-\".concat(size) : false, fixed ? 'fa-fw' : false, pull ? \"fa-pull-\".concat(pull) : false, border ? 'fa-border' : false, spin ? 'fa-spin' : false, pulse ? 'fa-pulse' : false, rotate ? \"fa-rotate-\".concat(rotate) : false, flip ? \"fa-flip-\".concat(flip) : false, inverse ? 'fa-inverse' : false, stack ? \"fa-\".concat(stack) : false, className);\n  return React.createElement(\"i\", _extends({\n    \"data-test\": \"fa\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nFa.propTypes = {\n  icon: PropTypes.string.isRequired,\n  border: PropTypes.bool,\n  brand: PropTypes.bool,\n  className: PropTypes.string,\n  fab: PropTypes.bool,\n  fal: PropTypes.bool,\n  far: PropTypes.bool,\n  fixed: PropTypes.bool,\n  flip: PropTypes.string,\n  inverse: PropTypes.bool,\n  light: PropTypes.bool,\n  list: PropTypes.bool,\n  pull: PropTypes.string,\n  pulse: PropTypes.bool,\n  regular: PropTypes.bool,\n  rotate: PropTypes.string,\n  size: PropTypes.string,\n  spin: PropTypes.bool,\n  stack: PropTypes.string\n};\nFa.defaultProps = {\n  border: false,\n  brand: false,\n  className: '',\n  fab: false,\n  fal: false,\n  far: false,\n  fixed: false,\n  flip: '',\n  inverse: false,\n  light: false,\n  list: false,\n  pull: '',\n  pulse: false,\n  regular: false,\n  rotate: '',\n  size: '',\n  spin: false,\n  stack: ''\n};\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".bc-icons.breadcrumb-item::before,\\r\\n.bc-icons.breadcrumb-item::after {\\r\\n  content: none;\\r\\n}\\r\\n\\r\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::before,\\r\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::after{\\r\\n  content: none;\\r\\n}\\r\\n\\r\\n.bc-icons.breadcrumb-item.active {\\r\\n  color: #eeeeee;\\r\\n}\\r\\n\";\nstyleInject(css);\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var active = props.active,\n      appendIcon = props.appendIcon,\n      children = props.children,\n      className = props.className,\n      bold = props.bold,\n      icon = props.icon,\n      iconBrand = props.iconBrand,\n      iconClassName = props.iconClassName,\n      iconLight = props.iconLight,\n      iconRegular = props.iconRegular,\n      iconSize = props.iconSize,\n      attributes = _objectWithoutProperties(props, [\"active\", \"appendIcon\", \"children\", \"className\", \"bold\", \"icon\", \"iconBrand\", \"iconClassName\", \"iconLight\", \"iconRegular\", \"iconSize\"]);\n\n  var classes = classNames(active ? 'active' : false, icon && 'bc-icons', 'breadcrumb-item', className);\n  var iconClasses = classNames(appendIcon ? 'mx-2' : 'mr-2', iconClassName);\n\n  var WithBold = function WithBold(_ref) {\n    var children = _ref.children;\n    return bold ? React.createElement(\"strong\", null, children) : children;\n  };\n\n  var WithIcon = function WithIcon() {\n    if (icon) {\n      return React.createElement(React.Fragment, null, appendIcon && children, React.createElement(Fa, {\n        brand: iconBrand,\n        className: iconClasses,\n        icon: icon,\n        light: iconLight,\n        regular: iconRegular,\n        size: iconSize\n      }), !appendIcon && children);\n    }\n\n    return children;\n  };\n\n  return React.createElement(\"li\", _extends({\n    \"data-test\": \"breadcrumb-item\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(WithBold, null, React.createElement(WithIcon, null)));\n};\n\nBreadcrumbItem.propTypes = {\n  active: PropTypes.bool,\n  appendIcon: PropTypes.bool,\n  bold: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  icon: PropTypes.string,\n  iconBrand: PropTypes.bool,\n  iconClassName: PropTypes.string,\n  iconLight: PropTypes.bool,\n  iconRegular: PropTypes.bool,\n  iconSize: PropTypes.string\n};\nBreadcrumbItem.defaultProps = {\n  active: false,\n  appendIcon: false,\n  className: '',\n  bold: false,\n  icon: '',\n  iconBrand: false,\n  iconClassName: '',\n  iconLight: false,\n  iconRegular: false,\n  iconSize: ''\n};\nvar css$1 = \".btn-group-vertical>.btn,\\r\\n.btn-group-vertical>.btn+.btn-group,\\r\\n.btn-group-vertical>.btn-group+.btn,\\r\\n.btn-group-vertical>.btn-group+.btn-group {\\r\\n  margin-left: 0px;\\r\\n}\\r\\n\\r\\n.btn-group-lg>.btn {\\r\\n  font-size: 0.9rem;\\r\\n  padding: 1rem 2.4rem;\\r\\n}\\r\\n\\r\\n.btn-group-sm>.btn {\\r\\n  font-size: 0.6rem;\\r\\n  padding: 0.5rem 1.6rem;\\r\\n}\\r\\n\\r\\n.btn-floating.btn.btn-sm,\\r\\n.btn-floating.btn.btn-lg {\\r\\n  padding: 0;\\r\\n}\\r\\n\";\nstyleInject(css$1);\n\nvar ButtonGroup = function ButtonGroup(_ref) {\n  var className = _ref.className,\n      size = _ref.size,\n      vertical = _ref.vertical,\n      children = _ref.children,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"size\", \"vertical\", \"children\"]);\n\n  var classes = classNames(className, size ? \"btn-group-\".concat(size) : false, vertical ? 'btn-group-vertical' : 'btn-group');\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"button-group\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nButtonGroup.propTypes = {\n  'aria-label': PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  role: PropTypes.string,\n  size: PropTypes.string,\n  vertical: PropTypes.bool\n};\nButtonGroup.defaultProps = {\n  role: 'group'\n};\n\nvar ButtonToolbar = function ButtonToolbar(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"children\"]);\n\n  var classes = classNames(className, 'btn-toolbar');\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"button-toolbar\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nButtonToolbar.propTypes = {\n  'aria-label': PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  role: PropTypes.string\n};\nButtonToolbar.defaultProps = {\n  role: 'toolbar'\n};\n\nvar Card = function Card(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      cascade = props.cascade,\n      wide = props.wide,\n      narrow = props.narrow,\n      reverse = props.reverse,\n      testimonial = props.testimonial,\n      ecommerce = props.ecommerce,\n      collection = props.collection,\n      pricing = props.pricing,\n      personal = props.personal,\n      news = props.news,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"cascade\", \"wide\", \"narrow\", \"reverse\", \"testimonial\", \"ecommerce\", \"collection\", \"pricing\", \"personal\", \"news\", \"color\", \"text\", \"border\"]);\n\n  var classes = classNames((_classNames = {\n    'card-cascade': cascade,\n    'card-cascade wider': wide,\n    'card-cascade narrower': narrow,\n    'card-cascade wider reverse': reverse,\n    'testimonial-card': testimonial,\n    'card-ecommerce': ecommerce,\n    'collection-card': collection,\n    'pricing-card': pricing,\n    'card-personal': personal,\n    'news-card': news\n  }, _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _defineProperty(_classNames, \"border-\".concat(border), border), _classNames), 'card', color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCard.propTypes = {\n  border: PropTypes.string,\n  cascade: PropTypes.bool,\n  className: PropTypes.string,\n  collection: PropTypes.bool,\n  color: PropTypes.string,\n  ecommerce: PropTypes.bool,\n  narrow: PropTypes.bool,\n  news: PropTypes.bool,\n  personal: PropTypes.bool,\n  pricing: PropTypes.bool,\n  reverse: PropTypes.bool,\n  tag: PropTypes.string,\n  testimonial: PropTypes.bool,\n  text: PropTypes.string,\n  wide: PropTypes.bool\n};\nCard.defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      Tag = props.tag,\n      cascade = props.cascade,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"cascade\"]);\n\n  var classes = classNames('card-body', cascade && 'card-body-cascade', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-body\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardBody.propTypes = {\n  cascade: PropTypes.bool,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCardBody.defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      children = props.children,\n      text = props.text,\n      border = props.border,\n      transparent = props.transparent,\n      small = props.small,\n      muted = props.muted,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"color\", \"children\", \"text\", \"border\", \"transparent\", \"small\", \"muted\"]);\n\n  var classes = classNames((_classNames = {\n    'white-text': color && !text\n  }, _defineProperty(_classNames, \"border-\".concat(border), border), _defineProperty(_classNames, 'bg-transparent', transparent), _defineProperty(_classNames, 'text-muted', muted), _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _classNames), 'card-footer', color, className);\n  var component = React.createElement(Tag, _extends({\n    \"data-test\": \"card-footer\"\n  }, attributes, {\n    className: classes\n  }));\n\n  if (small) {\n    component = React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    }), React.createElement(\"small\", null, \" \", children, \" \"));\n  }\n\n  return component;\n};\n\nCardFooter.propTypes = {\n  border: PropTypes.string,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  muted: PropTypes.bool,\n  small: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  text: PropTypes.string,\n  transparent: PropTypes.bool\n};\nCardFooter.defaultProps = {\n  tag: 'div'\n};\n\nvar CardGroup = function CardGroup(props) {\n  var className = props.className,\n      Tag = props.tag,\n      deck = props.deck,\n      column = props.column,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"deck\", \"column\"]);\n\n  var classes = classNames(deck ? 'card-deck' : column ? 'card-columns' : 'card-group', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-group\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardGroup.propTypes = {\n  className: PropTypes.string,\n  column: PropTypes.bool,\n  deck: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCardGroup.defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var _classNames;\n\n  var border = props.border,\n      className = props.className,\n      color = props.color,\n      Tag = props.tag,\n      text = props.text,\n      transparent = props.transparent,\n      attributes = _objectWithoutProperties(props, [\"border\", \"className\", \"color\", \"tag\", \"text\", \"transparent\"]);\n\n  var classes = classNames((_classNames = {\n    'white-text': color && !text\n  }, _defineProperty(_classNames, \"border-\".concat(border), border), _defineProperty(_classNames, 'bg-transparent', transparent), _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _classNames), 'card-header', className, color);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-header\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = {\n  border: PropTypes.string,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  text: PropTypes.string,\n  transparent: PropTypes.bool\n};\nCardHeader.defaultProps = {\n  tag: 'div'\n};\nvar css$2 = \".Ripple {\\r\\n  position: absolute;\\r\\n  background: rgba(255, 255, 255, 0.3);\\r\\n  border-radius: 50%;\\r\\n  opacity: 1;\\r\\n  transform: scale(0);\\r\\n}\\r\\n\\r\\n.Ripple-outline {\\r\\n  background: rgba(0, 0, 0, 0.2);\\r\\n}\\r\\n\\r\\n.Ripple.is-reppling {\\r\\n  animation: ripple 0.5s linear;\\r\\n}\\r\\n\\r\\n.Ripple-parent {\\r\\n  position: relative;\\r\\n  overflow: hidden;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n@keyframes ripple {\\r\\n  100% {\\r\\n    opacity: 0;\\r\\n    transform: scale(3);\\r\\n  }\\r\\n}\\r\\n\";\nstyleInject(css$2);\n\nvar Waves =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Waves, _React$Component);\n\n  function Waves() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Waves);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Waves)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      animate: false,\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0,\n      cursorPos: _this.props.cursorPos\n    });\n\n    return _this;\n  }\n\n  _createClass(Waves, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var cursorPos = this.props.cursorPos;\n\n      if (prevState.cursorPos.time !== cursorPos.time) {\n        if (prevState.animate) {\n          this.setState({\n            animate: false,\n            cursorPos: cursorPos\n          }, function () {\n            _this2.replying();\n          });\n        } else {\n          this.replying();\n        }\n      }\n    }\n  }, {\n    key: \"replying\",\n    value: function replying() {\n      var $ripple = ReactDOM.findDOMNode(this);\n      var $button = $ripple.parentNode;\n      var buttonPos = $button.getBoundingClientRect();\n      var buttonWidth = $button.offsetWidth;\n      var buttonHeight = $button.offsetHeight;\n      var rippleWidthShouldBe = Math.max(buttonHeight, buttonWidth);\n      var centralized = rippleWidthShouldBe / 2;\n      var cursorPos = this.state.cursorPos;\n      this.setState({\n        animate: true,\n        width: rippleWidthShouldBe,\n        height: rippleWidthShouldBe,\n        top: cursorPos.top - buttonPos.top - centralized,\n        left: cursorPos.left - buttonPos.left - centralized\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          outline = _this$props.outline,\n          flat = _this$props.flat,\n          dark = _this$props.dark;\n      var _this$state = this.state,\n          animate = _this$state.animate,\n          top = _this$state.top,\n          left = _this$state.left,\n          width = _this$state.width,\n          height = _this$state.height;\n      return React.createElement(\"div\", {\n        \"data-test\": \"waves\",\n        className: \"Ripple \".concat(outline || flat || dark ? 'Ripple-outline ' : '').concat(animate ? 'is-reppling' : ''),\n        style: {\n          top: \"\".concat(top, \"px\"),\n          left: \"\".concat(left, \"px\"),\n          width: \"\".concat(width, \"px\"),\n          height: \"\".concat(height, \"px\")\n        }\n      });\n    }\n  }]);\n\n  return Waves;\n}(React.Component);\n\nWaves.propTypes = {\n  animate: PropTypes.bool,\n  children: PropTypes.node,\n  cursorPos: PropTypes.object,\n  flat: PropTypes.bool,\n  outline: PropTypes.bool\n};\n\nvar Mask = function Mask(props) {\n  var children = props.children,\n      className = props.className,\n      overlay = props.overlay,\n      pattern = props.pattern,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"overlay\", \"pattern\", \"tag\"]);\n\n  var classes = classNames('mask', pattern && \"pattern-\".concat(pattern), overlay && \"rgba-\".concat(overlay), className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"mask\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nMask.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  overlay: PropTypes.string,\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  tag: PropTypes.string\n};\nMask.defaultProps = {\n  className: '',\n  overlay: '',\n  pattern: '',\n  tag: 'div'\n};\n\nvar View = function View(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var cascade = props.cascade,\n      children = props.children,\n      className = props.className,\n      fixed = props.fixed,\n      hover = props.hover,\n      rounded = props.rounded,\n      src = props.src,\n      Tag = props.tag,\n      waves = props.waves,\n      zoom = props.zoom,\n      attributes = _objectWithoutProperties(props, [\"cascade\", \"children\", \"className\", \"fixed\", \"hover\", \"rounded\", \"src\", \"tag\", \"waves\", \"zoom\"]);\n\n  var classes = classNames('view', cascade && 'view-cascade', className, hover && 'overlay', rounded && 'rounded', waves ? 'Ripple-parent' : false, zoom && 'zoom');\n  var viewStyle = src ? {\n    backgroundAttachment: fixed ? 'fixed' : null,\n    backgroundImage: \"url(\\\"\".concat(src, \"\\\")\"),\n    backgroundPosition: 'center center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    height: '100vh'\n  } : {};\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"data-test\": \"view\",\n    onMouseDown: handleClick,\n    onTouchStart: handleClick,\n    style: viewStyle\n  }), children, waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nView.defaultProps = {\n  cascade: false,\n  className: '',\n  hover: false,\n  rounded: false,\n  src: '',\n  tag: 'div',\n  waves: false,\n  zoom: false\n};\nView.propTypes = {\n  cascade: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  hover: PropTypes.bool,\n  rounded: PropTypes.bool,\n  src: PropTypes.string,\n  tag: PropTypes.string,\n  waves: PropTypes.bool,\n  zoom: PropTypes.bool\n};\n\nvar CardImage = function CardImage(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var cascade = props.cascade,\n      className = props.className,\n      hover = props.hover,\n      overlay = props.overlay,\n      src = props.src,\n      tag = props.tag,\n      top = props.top,\n      waves = props.waves,\n      zoom = props.zoom,\n      attributes = _objectWithoutProperties(props, [\"cascade\", \"className\", \"hover\", \"overlay\", \"src\", \"tag\", \"top\", \"waves\", \"zoom\"]);\n\n  var classes = classNames(top && 'card-img-top', className);\n  var Tag = tag;\n  var innerContent = React.createElement(Tag, _extends({\n    \"data-test\": \"card-image\",\n    src: src\n  }, attributes, {\n    className: classes\n  }));\n\n  if (src) {\n    return React.createElement(View, {\n      zoom: zoom,\n      hover: hover,\n      cascade: cascade\n    }, React.createElement(\"div\", {\n      className: \"Ripple-parent\",\n      onMouseDown: handleClick,\n      style: {\n        touchAction: 'unset'\n      }\n    }, innerContent, React.createElement(Mask, {\n      overlay: overlay\n    }), waves && React.createElement(Waves, {\n      cursorPos: cursorPos\n    })));\n  }\n\n  return React.createElement(\"div\", null, innerContent);\n};\n\nCardImage.propTypes = {\n  cascade: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  hover: PropTypes.bool,\n  overlay: PropTypes.string,\n  src: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  top: PropTypes.bool,\n  waves: PropTypes.bool,\n  zoom: PropTypes.bool\n};\nCardImage.defaultProps = {\n  tag: 'img',\n  overlay: 'white-slight',\n  waves: true,\n  hover: false,\n  cascade: false,\n  zoom: false\n};\n\nvar CardText = function CardText(props) {\n  var textNode = props.children,\n      className = props.className,\n      muted = props.muted,\n      small = props.small,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"muted\", \"small\", \"tag\"]);\n\n  var classes = classNames('card-text', muted && 'text-muted', className);\n  var children = small ? React.createElement(\"small\", null, textNode) : textNode;\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-text\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCardText.propTypes = {\n  className: PropTypes.string,\n  muted: PropTypes.bool,\n  small: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCardText.defaultProps = {\n  tag: 'p'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      sub = props.sub,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"sub\", \"tag\"]);\n\n  var classes = classNames(sub ? 'card-subtitle' : 'card-title', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-title\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = {\n  className: PropTypes.string,\n  sub: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCardTitle.defaultProps = {\n  tag: 'h4',\n  sub: false\n};\n\nvar CardVideo = function CardVideo(props) {\n  var children = props.children,\n      className = props.className,\n      src = props.src,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"src\"]);\n\n  var classes = classNames(className);\n  return React.createElement(MDBIframe, _extends({\n    \"data-test\": \"card-video\"\n  }, attributes, {\n    src: src,\n    className: classes\n  }), children);\n};\n\nCardVideo.propTypes = {\n  src: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nvar Control = function Control(props) {\n  var className = props.className,\n      direction = props.direction,\n      iconLeft = props.iconLeft,\n      iconRight = props.iconRight,\n      multiItem = props.multiItem,\n      onClick = props.onClick,\n      Tag = props.tag,\n      testimonial = props.testimonial;\n  var text;\n\n  if (direction === 'prev') {\n    text = 'Previous';\n  } else if (direction === 'next') {\n    text = 'Next';\n  }\n\n  var classes = classNames(\"carousel-control-\".concat(direction), className);\n  var caretClasses = classNames(\"carousel-control-\".concat(direction, \"-icon\"));\n\n  if (testimonial) {\n    var arrow = direction === 'prev' ? 'left' : 'right';\n    classes = classNames(\"carousel-control-\".concat(direction), arrow, 'carousel-control', className);\n    caretClasses = classNames(\"icon-\".concat(direction));\n  }\n\n  if (multiItem) {\n    classes = classNames('btn-floating');\n  }\n\n  return React.createElement(Tag, {\n    \"data-test\": \"carousel-control\",\n    className: classes,\n    \"data-slide\": direction,\n    onClick: onClick\n  }, iconLeft ? React.createElement(Fa, {\n    icon: \"chevron-left\"\n  }) : iconRight ? React.createElement(Fa, {\n    icon: \"chevron-right\"\n  }) : React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: caretClasses,\n    \"aria-hidden\": \"true\"\n  }), React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, text)));\n};\n\nControl.propTypes = {\n  className: PropTypes.string,\n  direction: PropTypes.string,\n  iconLeft: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  multiItem: PropTypes.bool,\n  onClick: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  testimonial: PropTypes.bool\n};\nControl.defaultProps = {\n  tag: 'a'\n};\n\nvar CarouselIndicator = function CarouselIndicator(props) {\n  var active = props.active,\n      alt = props.alt,\n      children = props.children,\n      className = props.className,\n      img = props.img,\n      attributes = _objectWithoutProperties(props, [\"active\", \"alt\", \"children\", \"className\", \"img\"]);\n\n  var classes = classNames(active && 'active', className);\n  return React.createElement(\"li\", _extends({\n    \"data-test\": \"carousel-indicator\"\n  }, attributes, {\n    className: classes\n  }), img && React.createElement(\"img\", {\n    src: img,\n    alt: alt,\n    className: \"img-fluid\"\n  }), children);\n};\n\nCarouselIndicator.propTypes = {\n  active: PropTypes.bool.isRequired,\n  alt: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  img: PropTypes.string\n};\nCarouselIndicator.defaultProps = {\n  alt: 'Carousel thumbnail',\n  className: '',\n  img: ''\n};\n\nvar CarouselIndicators = function CarouselIndicators(props) {\n  var children = props.children,\n      className = props.className,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames('carousel-indicators', className);\n  return React.createElement(\"ol\", _extends({\n    \"data-test\": \"carousel-indicators\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselIndicators.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCarouselIndicators.defaultProps = {\n  className: ''\n};\nvar css$3 = \".carousel-inner {\\r\\n  position: relative;\\r\\n  overflow: hidden;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n.carousel-fade .carousel-item {\\r\\n  position: absolute;\\r\\n  left: 0;\\r\\n  top: 0;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  display: block !important;\\r\\n  opacity: 0;\\r\\n  z-index: 0;\\r\\n  transition: transform 0ms ease-in-out, opacity 0.8s ease-out;\\r\\n}\\r\\n\\r\\n.carousel-fade .carousel-item.active {\\r\\n  position: relative;\\r\\n  z-index: 1;\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n.carousel-multi-item .carousel-item {\\r\\n  display: inline-block !important;\\r\\n}\\r\\n\\r\\n.carousel .carousel-slide-item {\\r\\n  transition: left 0.5s;\\r\\n}\\r\\n\\r\\n.carousel-control-prev, .carousel-control-next, .carousel-item-prev, .carousel-item-next {\\r\\n  z-index: 2;\\r\\n}\\r\\n\";\nstyleInject(css$3);\n\nvar Carousel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Carousel, _Component);\n\n  function Carousel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Carousel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeItem: _this.props.activeItem,\n      initialLength: _this.props.length,\n      srcArray: [],\n      swipeAvailable: true,\n      initialX: null,\n      initialY: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"carouselRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"clearCycleIntervalHandler\", function () {\n      return clearInterval(_this.cycleInterval);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeAvailableHandler\", function () {\n      return _this.setState({\n        swipeAvailable: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restartInterval\", function () {\n      var interval = _this.props.interval;\n\n      if (interval !== false) {\n        _this.clearCycleIntervalHandler();\n\n        _this.cycleInterval = setInterval(_this.next, interval);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"next\", function () {\n      var _this$state = _this.state,\n          activeItem = _this$state.activeItem,\n          initialLength = _this$state.initialLength;\n      var nextIndex = activeItem + 1;\n      var nextItem = nextIndex > initialLength ? 1 : nextIndex;\n\n      _this.goToIndex(nextItem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"prev\", function () {\n      var _this$state2 = _this.state,\n          activeItem = _this$state2.activeItem,\n          initialLength = _this$state2.initialLength;\n      var prevIndex = activeItem - 1;\n      var prevItem = prevIndex < 1 ? initialLength : prevIndex;\n\n      _this.goToIndex(prevItem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goToIndex\", function (item) {\n      _this.setState(_objectSpread2({}, _this.state, {\n        activeItem: item\n      }));\n\n      _this.restartInterval();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTouch\", function (e) {\n      var mobileGesture = _this.props.mobileGesture;\n\n      if (mobileGesture !== false) {\n        _this.setState({\n          initialX: e.touches[0].clientX,\n          initialY: e.touches[0].clientY\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveTouch\", function (e) {\n      _this.setState({\n        swipeAvailable: false\n      });\n\n      var _this$state3 = _this.state,\n          initialX = _this$state3.initialX,\n          initialY = _this$state3.initialY;\n\n      if (initialX === null || initialY === null) {\n        return;\n      }\n\n      var currentX = e.touches[0].clientX;\n      var currentY = e.touches[0].clientY;\n      var diffX = initialX - currentX;\n      var diffY = initialY - currentY;\n\n      if (Math.abs(diffX) > Math.abs(diffY)) {\n        // sliding horizontally\n        if (diffX > 0) {\n          _this.next();\n        } else {\n          _this.prev();\n        }\n      }\n\n      _this.setState({\n        initialX: null,\n        initialY: null\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          interval = _this$props.interval,\n          thumbnails = _this$props.thumbnails;\n\n      if (interval === false) {\n        return;\n      }\n\n      this.cycleInterval = setInterval(this.next, interval); // get images src atr\n\n      if (thumbnails) {\n        var CarouselItemsArray = this.carouselRef.current.querySelectorAll('.carousel-item img');\n        var srcArray = Array.prototype.map.call(CarouselItemsArray, function (item) {\n          return item.src;\n        });\n        this.setState(_objectSpread2({}, this.state, {\n          srcArray: srcArray\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var length = this.props.length;\n      var InitialLength = this.state.InitialLength;\n\n      if (InitialLength !== length) {\n        this.setState({\n          InitialLength: length\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var interval = this.props.interval;\n\n      if (interval === false) {\n        return;\n      }\n\n      this.clearCycleIntervalHandler();\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var _this$state4 = this.state,\n          activeItem = _this$state4.activeItem,\n          initialLength = _this$state4.initialLength;\n      var slide = this.props.slide;\n      return {\n        activeItem: activeItem,\n        length: initialLength,\n        slide: slide\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          activeItem = _this$props2.activeItem,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          interval = _this$props2.interval,\n          mobileGesture = _this$props2.mobileGesture,\n          multiItem = _this$props2.multiItem,\n          onHoverStop = _this$props2.onHoverStop,\n          showControls = _this$props2.showControls,\n          showIndicators = _this$props2.showIndicators,\n          slide = _this$props2.slide,\n          Tag = _this$props2.tag,\n          testimonial = _this$props2.testimonial,\n          thumbnails = _this$props2.thumbnails,\n          attributes = _objectWithoutProperties(_this$props2, [\"activeItem\", \"children\", \"className\", \"interval\", \"mobileGesture\", \"multiItem\", \"onHoverStop\", \"showControls\", \"showIndicators\", \"slide\", \"tag\", \"testimonial\", \"thumbnails\"]);\n\n      var _this$state5 = this.state,\n          initialLength = _this$state5.initialLength,\n          srcArray = _this$state5.srcArray,\n          swipeAvailable = _this$state5.swipeAvailable;\n      var ariaLabel = 'carousel';\n      var classes = classNames('carousel', multiItem ? 'carousel-multi-item' : 'carousel-fade', thumbnails ? 'carousel-thumbnails' : '', testimonial ? 'testimonial-carousel' : '', className);\n      var CarouselIndicatorsArray = [];\n\n      var _loop = function _loop(i) {\n        var activeItem = _this2.state.activeItem;\n        CarouselIndicatorsArray.push(React.createElement(CarouselIndicator, {\n          img: thumbnails ? srcArray[i - 1] : null,\n          key: i,\n          active: activeItem === i,\n          onClick: function onClick() {\n            return _this2.goToIndex(i);\n          }\n        }));\n      };\n\n      for (var i = 1; i <= initialLength; i++) {\n        _loop(i);\n      }\n\n      var isMultiItem = !!multiItem;\n      var isTestimonial = !!testimonial;\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"carousel\",\n        ref: this.carouselRef\n      }, attributes, {\n        className: classes,\n        \"aria-label\": ariaLabel,\n        onTouchStart: this.startTouch,\n        onTouchMove: swipeAvailable ? this.moveTouch : null,\n        onTouchEnd: this.swipeAvailableHandler,\n        onMouseEnter: onHoverStop ? this.clearCycleIntervalHandler : null,\n        onMouseLeave: onHoverStop ? this.restartInterval : null\n      }), showControls && multiItem && React.createElement(\"div\", {\n        className: \"controls-top\"\n      }, React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        iconLeft: true,\n        className: \"btn-floating\",\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        iconRight: true,\n        className: \"btn-floating\",\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), children, showControls && !multiItem && React.createElement(React.Fragment, null, React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), showIndicators && React.createElement(CarouselIndicators, null, CarouselIndicatorsArray));\n    }\n  }]);\n\n  return Carousel;\n}(Component);\n\nCarousel.propTypes = {\n  activeItem: PropTypes.number,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n  length: PropTypes.number,\n  mobileGesture: PropTypes.bool,\n  multiItem: PropTypes.bool,\n  onHoverStop: PropTypes.bool,\n  showControls: PropTypes.bool,\n  showIndicators: PropTypes.bool,\n  slide: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  testimonial: PropTypes.bool,\n  thumbnails: PropTypes.bool\n};\nCarousel.defaultProps = {\n  interval: 6000,\n  mobileGesture: true,\n  onHoverStop: true,\n  showControls: true,\n  showIndicators: true,\n  tag: 'div'\n};\nCarousel.childContextTypes = {\n  activeItem: PropTypes.any,\n  length: PropTypes.any,\n  slide: PropTypes.any\n};\n\nvar CarouselCaption = function CarouselCaption(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('carousel-caption', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"carousel-caption\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselCaption.propTypes = {\n  active: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCarouselCaption.defaultProps = {\n  tag: 'div'\n};\n\nvar CarouselInner = function CarouselInner(props) {\n  var active = props.active,\n      children = props.children,\n      childrenCount = props.childrenCount,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"childrenCount\", \"className\", \"tag\"]);\n\n  var classes = classNames('carousel-inner', active ? 'active' : '', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"carousel-inner\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselInner.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCarouselInner.defaultProps = {\n  tag: 'div'\n};\n\nvar CarouselItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselItem, _Component);\n\n  function CarouselItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CarouselItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CarouselItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"moveForward\", function () {\n      _this.style = {\n        position: 'absolute',\n        left: '100%'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveBackwards\", function () {\n      _this.style = {\n        position: 'absolute',\n        left: '-100%'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeVisible\", function () {\n      _this.style = {\n        left: '0'\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(CarouselItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          itemId = _this$props.itemId,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"className\", \"itemId\", \"tag\"]);\n\n      var _this$context = this.context,\n          slide = _this$context.slide,\n          activeItem = _this$context.activeItem;\n      itemId = parseInt(itemId, 10);\n      var classes = classNames('carousel-item', {\n        'active carousel-slide-item': slide,\n        active: !slide && itemId === activeItem\n      }, className);\n      var slideIndex = activeItem - itemId;\n\n      if (slide) {\n        if (slideIndex < 0) {\n          this.moveForward();\n        } else if (slideIndex > 0) {\n          this.moveBackwards();\n        } else {\n          this.makeVisible();\n        }\n      } else {\n        this.makeVisible();\n      }\n\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"carousel-item\"\n      }, attributes, {\n        className: classes,\n        style: this.style\n      }), children);\n    }\n  }]);\n\n  return CarouselItem;\n}(Component);\n\nCarouselItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemId: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCarouselItem.defaultProps = {\n  tag: 'div'\n};\nCarouselItem.contextTypes = {\n  activeItem: PropTypes.any,\n  length: PropTypes.any,\n  slide: PropTypes.any\n};\n\nvar MDBCloseIcon = function MDBCloseIcon(_ref) {\n  var onClick = _ref.onClick,\n      className = _ref.className,\n      ariaLabel = _ref.ariaLabel,\n      props = _objectWithoutProperties(_ref, [\"onClick\", \"className\", \"ariaLabel\"]);\n\n  var onClickHandler = function onClickHandler(e) {\n    onClick && onClick(e);\n  };\n\n  var btnClasses = className ? ['close'].concat(_toConsumableArray(className.split(' '))) : ['close'];\n  return React.createElement(\"button\", _extends({\n    \"data-test\": \"close-button\",\n    type: \"button\"\n  }, props, {\n    className: btnClasses.join(' '),\n    onClick: onClickHandler,\n    \"aria-label\": ariaLabel\n  }), React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"));\n};\n\nMDBCloseIcon.defaultProps = {\n  ariaLabel: 'Close'\n};\nMDBCloseIcon.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  onClick: PropTypes.func\n};\n\nvar Col = function Col(props) {\n  var xs = props.xs,\n      sm = props.sm,\n      md = props.md,\n      lg = props.lg,\n      xl = props.xl,\n      top = props.top,\n      bottom = props.bottom,\n      middle = props.middle,\n      size = props.size,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"top\", \"bottom\", \"middle\", \"size\", \"className\", \"tag\"]);\n\n  var classes = classNames(size && \"col-\".concat(size), xs && \"col-xs-\".concat(xs), sm && \"col-sm-\".concat(sm), md && \"col-md-\".concat(md), lg && \"col-lg-\".concat(lg), xl && \"col-xl-\".concat(xl), !size && !xs && !sm && !md && !lg && !xl ? 'col' : '', top && 'align-self-start', middle && 'align-self-center', bottom && 'align-self-end', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"col\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = {\n  bottom: PropTypes.bool,\n  className: PropTypes.string,\n  lg: PropTypes.string,\n  md: PropTypes.string,\n  middle: PropTypes.bool,\n  size: PropTypes.string,\n  sm: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  top: PropTypes.bool,\n  xl: PropTypes.string,\n  xs: PropTypes.string\n};\nCol.defaultProps = {\n  tag: 'div',\n  xs: null,\n  sm: null,\n  md: null,\n  lg: null,\n  xl: null\n};\nvar SHOW = 'SHOW';\nvar SHOWN = 'SHOWN';\nvar HIDE = 'HIDE';\nvar HIDDEN = 'HIDDEN';\nvar DEFAULT_DELAYS = {\n  show: 350,\n  hide: 350\n};\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Collapse, _Component);\n\n  function Collapse() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Collapse)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      id: _this.props.id,\n      collapse: HIDDEN,\n      height: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"element\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"setTransitionTag\", function (collapse, callback, delayType) {\n      _this.transitionTag = setTimeout(function () {\n        _this.setState({\n          collapse: collapse,\n          height: null\n        }, callback());\n      }, _this.getDelay(delayType));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openCollapse\", function () {\n      var onOpened = _this.props.onOpened;\n\n      _this.setState({\n        collapse: SHOW\n      }, function () {\n        _this.setState({\n          height: _this.getHeight()\n        });\n\n        _this.setTransitionTag(SHOWN, onOpened, 'show');\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeCollapse\", function () {\n      var onClosed = _this.props.onClosed;\n\n      _this.setState({\n        height: _this.getHeight()\n      }, function () {\n        _this.setState({\n          collapse: HIDE,\n          height: _this.getHeight()\n        }, function () {\n          _this.setState({\n            height: 0\n          });\n        });\n      });\n\n      _this.setTransitionTag(HIDDEN, onClosed, 'hide');\n    });\n\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var isOpen = this.props.isOpen;\n      var _this$state = this.state,\n          collapse = _this$state.collapse,\n          id = _this$state.id;\n\n      if ((isOpen === id || isOpen === true) && collapse === HIDDEN) {\n        this.openCollapse();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var isOpen = this.props.isOpen;\n      var collapse = this.state.collapse;\n      var willOpen = typeof isOpen !== 'boolean' ? isOpen === prevState.id : isOpen;\n\n      if (willOpen && collapse === HIDDEN) {\n        this.openCollapse();\n      } else if (!willOpen && prevState.collapse === SHOWN) {\n        this.closeCollapse();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.transitionTag);\n    }\n  }, {\n    key: \"getDelay\",\n    value: function getDelay(key) {\n      var delay = this.props.delay;\n\n      if (_typeof(delay) === 'object') {\n        return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];\n      }\n\n      return delay;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.element.scrollHeight;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          navbar = _this$props.navbar,\n          children = _this$props.children,\n          className = _this$props.className,\n          isOpen = _this$props.isOpen,\n          delay = _this$props.delay,\n          onOpened = _this$props.onOpened,\n          onClosed = _this$props.onClosed,\n          attributes = _objectWithoutProperties(_this$props, [\"navbar\", \"children\", \"className\", \"isOpen\", \"delay\", \"onOpened\", \"onClosed\"]);\n\n      var _this$state2 = this.state,\n          collapse = _this$state2.collapse,\n          height = _this$state2.height;\n      var collapseClass;\n\n      switch (collapse) {\n        case SHOW:\n          collapseClass = 'collapsing';\n          break;\n\n        case SHOWN:\n          collapseClass = 'collapse show';\n          break;\n\n        case HIDE:\n          collapseClass = 'collapsing';\n          break;\n\n        case HIDDEN:\n          collapseClass = 'collapse';\n          break;\n\n        default:\n          // HIDDEN\n          collapseClass = 'collapse';\n      }\n\n      var classes = classNames(collapseClass, navbar ? 'navbar-collapse' : false, className);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"collapse\"\n      }, attributes, {\n        style: _objectSpread2({}, attributes.style, {}, style),\n        className: classes,\n        ref: function ref(c) {\n          _this2.element = c;\n        }\n      }), children);\n    }\n  }]);\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.node,\n  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    hide: PropTypes.number,\n    show: PropTypes.number\n  })]),\n  id: PropTypes.string,\n  isOpen: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  navbar: PropTypes.bool,\n  onClosed: PropTypes.func,\n  onOpened: PropTypes.func\n};\nCollapse.defaultProps = {\n  isOpen: '',\n  delay: DEFAULT_DELAYS,\n  onOpened: function onOpened() {},\n  onClosed: function onClosed() {}\n};\n\nvar Container = function Container(props) {\n  var className = props.className,\n      fluid = props.fluid,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"fluid\", \"tag\"]);\n\n  var classes = classNames(fluid ? 'container-fluid' : 'container', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"container\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nContainer.propTypes = {\n  className: PropTypes.string,\n  fluid: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nContainer.defaultProps = {\n  tag: 'div',\n  fluid: false\n};\n\nvar DataTableHead = function DataTableHead(props) {\n  var color = props.color,\n      columns = props.columns,\n      handleSort = props.handleSort,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      textWhite = props.textWhite;\n  var theadClasses = classNames(color && (color !== 'dark' && color !== 'light' ? color : \"thead-\".concat(color)), textWhite && 'text-white');\n  return React.createElement(React.Fragment, null, (scrollY || scrollX) && React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || 'auto',\n        minWidth: \"\".concat(col.width, \"px\") || 'auto'\n      }\n    });\n  })), React.createElement(\"thead\", {\n    \"data-test\": \"datatable-head\",\n    className: theadClasses || undefined\n  }, React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", _extends({\n      onClick: function onClick() {\n        return sortable && handleSort(col.field, col.sort);\n      },\n      key: col.field,\n      className: classNames(col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : null, sortable && col.sort !== 'disabled' && (sorted && col.sort ? \"sorting_\".concat(col.sort === 'asc' ? 'desc' : 'asc') : 'sorting'))\n    }, col.attributes), col.label);\n  }))));\n};\n\nDataTableHead.propTypes = {\n  sorted: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  handleSort: PropTypes.func,\n  scrollX: PropTypes.bool,\n  scrollY: PropTypes.bool,\n  sortable: PropTypes.bool,\n  textWhite: PropTypes.bool\n};\nDataTableHead.defaultProps = {\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  textWhite: false\n};\nvar css$4 = \".table-wrapper-scroll-y {\\r\\n  display: block;\\r\\n  max-height: 200px;\\r\\n  overflow-y: auto;\\r\\n  -ms-overflow-style: -ms-autohiding-scrollbar;\\r\\n}\\r\\n\";\nstyleInject(css$4);\n\nvar Table = function Table(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      className = props.className,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveLg = props.responsiveLg,\n      responsiveMd = props.responsiveMd,\n      responsiveSm = props.responsiveSm,\n      responsiveXl = props.responsiveXl,\n      scrollY = props.scrollY,\n      small = props.small,\n      striped = props.striped,\n      theadColor = props.theadColor,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"className\", \"dark\", \"fixed\", \"hover\", \"maxHeight\", \"responsive\", \"responsiveLg\", \"responsiveMd\", \"responsiveSm\", \"responsiveXl\", \"scrollY\", \"small\", \"striped\", \"theadColor\"]);\n\n  var tableClasses = classNames('table', {\n    'w-auto': autoWidth,\n    'table-bordered': bordered,\n    'table-borderless': borderless,\n    'btn-table': btn,\n    'table-fixed': fixed,\n    'table-hover': hover,\n    'table-sm': small,\n    'table-striped': striped\n  }, className);\n  var wrapperClasses = classNames({\n    'table-dark': dark,\n    'table-responsive': responsive,\n    'table-responsive-sm': responsiveSm,\n    'table-responsive-md': responsiveMd,\n    'table-responsive-lg': responsiveLg,\n    'table-responsive-xl': responsiveXl,\n    'table-wrapper-scroll-y': scrollY\n  });\n  var wrapperStyles = {\n    maxHeight: maxHeight ? \"\".concat(maxHeight) : null\n  };\n  return React.createElement(\"div\", {\n    \"data-test\": \"table\",\n    className: wrapperClasses,\n    style: wrapperStyles\n  }, React.createElement(\"table\", _extends({}, attributes, {\n    className: tableClasses\n  }), children));\n};\n\nTable.propTypes = {\n  autoWidth: PropTypes.bool,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  btn: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  fixed: PropTypes.bool,\n  hover: PropTypes.bool,\n  maxHeight: PropTypes.string,\n  responsive: PropTypes.bool,\n  responsiveLg: PropTypes.bool,\n  responsiveMd: PropTypes.bool,\n  responsiveSm: PropTypes.bool,\n  responsiveXl: PropTypes.bool,\n  scrollY: PropTypes.bool,\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  theadColor: PropTypes.string\n};\n\nvar TableBody = function TableBody(props) {\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      rows = props.rows,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"rows\", \"textWhite\"]);\n\n  var classes = classNames(color, {\n    'text-white': textWhite\n  });\n\n  var renderTD = function renderTD(field, key, array, row) {\n    if (field === 'clickEvent') {\n      return null;\n    }\n\n    if (field !== 'colspan') {\n      if (row.message) {\n        return key === 0 && React.createElement(\"td\", {\n          key: key,\n          colSpan: row.colspan\n        }, row.message);\n      } else {\n        return array[key + 1] !== 'colspan' && row[field] !== null && React.createElement(\"td\", {\n          key: key\n        }, row[field]) || React.createElement(\"td\", {\n          key: key\n        });\n      }\n    }\n\n    return React.createElement(\"td\", {\n      key: key,\n      colSpan: row.colspan\n    }, row[array[key - 1]]);\n  };\n\n  return React.createElement(\"tbody\", _extends({\n    \"data-test\": \"table-body\"\n  }, attributes, {\n    className: classes || undefined\n  }), rows && rows.map(function (row, index) {\n    return React.createElement(\"tr\", {\n      onClick: row.hasOwnProperty('clickEvent') ? row.clickEvent : undefined,\n      key: index\n    }, columns ? columns.map(function (_ref, key, array) {\n      var field = _ref.field;\n      return renderTD(field, key, array, row);\n    }) : Object.keys(row).map(function (field, key, array) {\n      return renderTD(field, key, array, row);\n    }));\n  }), children);\n};\n\nTableBody.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.string,\n  rows: PropTypes.arrayOf(PropTypes.object),\n  textWhite: PropTypes.bool\n};\nTableBody.defaultProps = {\n  textWhite: false\n};\n\nvar TableFoot = function TableFoot(props) {\n  var _classNames;\n\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var isTheadColor = color === 'dark' || color === 'light';\n  var classes = classNames((_classNames = {\n    'text-white': textWhite\n  }, _defineProperty(_classNames, \"thead-\".concat(color), color && isTheadColor), _defineProperty(_classNames, \"\".concat(color), color && !isTheadColor), _classNames));\n  return React.createElement(\"thead\", _extends({\n    \"data-test\": \"table-foot\"\n  }, attributes, {\n    className: classes || undefined\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : undefined\n    }, col.label);\n  })), children);\n};\n\nTableFoot.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  textWhite: PropTypes.bool\n};\nTableFoot.defaultProps = {\n  textWhite: false\n};\n\nvar DataTableTable = function DataTableTable(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      handleSort = props.handleSort,\n      hover = props.hover,\n      noBottomColumns = props.noBottomColumns,\n      noRecordsFoundLabel = props.noRecordsFoundLabel,\n      responsive = props.responsive,\n      responsiveLg = props.responsiveLg,\n      responsiveMd = props.responsiveMd,\n      responsiveSm = props.responsiveSm,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      small = props.small,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"handleSort\", \"hover\", \"noBottomColumns\", \"noRecordsFoundLabel\", \"responsive\", \"responsiveLg\", \"responsiveMd\", \"responsiveSm\", \"responsiveXl\", \"rows\", \"small\", \"sortable\", \"sorted\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\"]);\n\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-table\",\n    className: \"col-sm-12\"\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    sortable: sortable,\n    sorted: sorted\n  }), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows,\n    columns: columns\n  }), !noBottomColumns && React.createElement(TableFoot, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns\n  }), children));\n};\n\nDataTableTable.propTypes = {\n  autoWidth: PropTypes.bool.isRequired,\n  bordered: PropTypes.bool.isRequired,\n  borderless: PropTypes.bool.isRequired,\n  btn: PropTypes.bool.isRequired,\n  dark: PropTypes.bool.isRequired,\n  fixed: PropTypes.bool.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  hover: PropTypes.bool.isRequired,\n  responsive: PropTypes.bool.isRequired,\n  responsiveLg: PropTypes.bool.isRequired,\n  responsiveMd: PropTypes.bool.isRequired,\n  responsiveSm: PropTypes.bool.isRequired,\n  responsiveXl: PropTypes.bool.isRequired,\n  small: PropTypes.bool.isRequired,\n  sortable: PropTypes.bool.isRequired,\n  sorted: PropTypes.bool.isRequired,\n  striped: PropTypes.bool.isRequired,\n  tbodyColor: PropTypes.string.isRequired,\n  tbodyTextWhite: PropTypes.bool.isRequired,\n  theadColor: PropTypes.string.isRequired,\n  theadTextWhite: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  noBottomColumns: PropTypes.bool,\n  rows: PropTypes.arrayOf(PropTypes.object)\n};\n\nvar DataTableTableScroll = function DataTableTableScroll(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      handleSort = props.handleSort,\n      handleTableBodyScroll = props.handleTableBodyScroll,\n      hover = props.hover,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveLg = props.responsiveLg,\n      responsiveMd = props.responsiveMd,\n      responsiveSm = props.responsiveSm,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      small = props.small,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      translateScrollHead = props.translateScrollHead,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"handleSort\", \"handleTableBodyScroll\", \"hover\", \"maxHeight\", \"responsive\", \"responsiveLg\", \"responsiveMd\", \"responsiveSm\", \"responsiveXl\", \"rows\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"sorted\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\", \"translateScrollHead\"]);\n\n  var minWidth = scrollX ? \"\".concat(columns.map(function (col) {\n    return col.width;\n  }).reduce(function (prev, curr) {\n    return prev + curr;\n  }, 0), \"px\") : 'auto';\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-table-scroll\",\n    className: \"col-sm-12\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scroll\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHead\",\n    style: {\n      overflow: 'hidden'\n    }\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHeadInner\",\n    style: {\n      position: 'relative',\n      transform: \"translateX(-\".concat(translateScrollHead, \"px)\"),\n      boxSizing: 'content-box',\n      paddingRight: scrollY ? '15px' : null,\n      minWidth: minWidth\n    }\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    scrollX: scrollX,\n    scrollY: scrollY,\n    sortable: sortable,\n    sorted: sorted\n  })))), React.createElement(\"div\", {\n    className: \"dataTable_scrollBody\",\n    style: {\n      overflow: 'auto'\n    },\n    onScroll: handleTableBodyScroll\n  }, React.createElement(Table, _extends({\n    style: {\n      minWidth: minWidth\n    },\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    maxHeight: maxHeight,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    scrollY: scrollY,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || 'auto',\n        minWidth: \"\".concat(col.width, \"px\") || 'auto'\n      }\n    });\n  })), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows,\n    columns: columns\n  }), children))));\n};\n\nDataTableTableScroll.propTypes = {\n  autoWidth: PropTypes.bool.isRequired,\n  bordered: PropTypes.bool.isRequired,\n  borderless: PropTypes.bool.isRequired,\n  btn: PropTypes.bool.isRequired,\n  dark: PropTypes.bool.isRequired,\n  fixed: PropTypes.bool.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  handleTableBodyScroll: PropTypes.func.isRequired,\n  hover: PropTypes.bool.isRequired,\n  responsive: PropTypes.bool.isRequired,\n  responsiveLg: PropTypes.bool.isRequired,\n  responsiveMd: PropTypes.bool.isRequired,\n  responsiveSm: PropTypes.bool.isRequired,\n  responsiveXl: PropTypes.bool.isRequired,\n  small: PropTypes.bool.isRequired,\n  sortable: PropTypes.bool.isRequired,\n  sorted: PropTypes.bool.isRequired,\n  striped: PropTypes.bool.isRequired,\n  tbodyColor: PropTypes.string.isRequired,\n  tbodyTextWhite: PropTypes.bool.isRequired,\n  theadColor: PropTypes.string.isRequired,\n  theadTextWhite: PropTypes.bool.isRequired,\n  translateScrollHead: PropTypes.number.isRequired,\n  children: PropTypes.node,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  maxHeight: PropTypes.string,\n  rows: PropTypes.arrayOf(PropTypes.object),\n  scrollX: PropTypes.bool,\n  scrollY: PropTypes.bool\n};\n\nvar DataTableSelect = function DataTableSelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      entries = _ref.entries,\n      label = _ref.label;\n\n  var getValue = function getValue(e) {\n    var value = parseInt(e.target.value, 10);\n    onChange(value);\n  };\n\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-select\",\n    className: \"dataTables_length bs-select\"\n  }, React.createElement(\"label\", null, label, React.createElement(\"select\", {\n    value: value,\n    onChange: getValue,\n    className: \"custom-select custom-select-sm form-control form-control-sm\",\n    style: {\n      marginLeft: '.5rem'\n    }\n  }, entries.map(function (entry) {\n    return React.createElement(\"option\", {\n      key: entry,\n      value: entry\n    }, entry);\n  }))));\n};\n\nDataTableSelect.propTypes = {\n  entries: PropTypes.arrayOf(PropTypes.number).isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired\n};\n\nvar DataTableEntries = function DataTableEntries(props) {\n  var handleEntriesChange = props.handleEntriesChange,\n      displayEntries = props.displayEntries,\n      entries = props.entries,\n      entriesArr = props.entriesArr,\n      paging = props.paging,\n      label = props.label,\n      barReverse = props.barReverse;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-entries\",\n    className: \"col-sm-12 col-md-6\"\n  }, paging && displayEntries && React.createElement(DataTableSelect, {\n    value: entries,\n    onChange: handleEntriesChange,\n    entries: entriesArr,\n    label: label,\n    barReverse: barReverse\n  }));\n};\n\nDataTableEntries.propTypes = {\n  displayEntries: PropTypes.bool.isRequired,\n  entries: PropTypes.number.isRequired,\n  entriesArr: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleEntriesChange: PropTypes.func.isRequired,\n  label: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.string]).isRequired,\n  paging: PropTypes.bool.isRequired,\n  barReverse: PropTypes.bool\n};\n\nvar DataTableInput = function DataTableInput(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      label = _ref.label;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-input\",\n    className: \"dataTables_filter\"\n  }, React.createElement(\"label\", null, label || 'Search', React.createElement(\"input\", {\n    value: value,\n    onChange: onChange,\n    type: \"search\",\n    className: \"form-control form-control-sm\",\n    placeholder: label || 'Search'\n  })));\n};\n\nDataTableInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.string]),\n  onChange: PropTypes.func,\n  value: PropTypes.string\n};\n\nvar DataTableSearch = function DataTableSearch(props) {\n  var handleSearchChange = props.handleSearchChange,\n      search = props.search,\n      searching = props.searching,\n      label = props.label,\n      barReverse = props.barReverse;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-search\",\n    className: \"col-sm-12 col-md-6\"\n  }, searching && React.createElement(DataTableInput, {\n    value: search,\n    onChange: handleSearchChange,\n    label: label,\n    barReverse: barReverse\n  }));\n};\n\nDataTableSearch.propTypes = {\n  handleSearchChange: PropTypes.func.isRequired,\n  search: PropTypes.string.isRequired,\n  searching: PropTypes.bool.isRequired,\n  barReverse: PropTypes.bool,\n  label: PropTypes.string\n};\n\nvar DataTableInfo = function DataTableInfo(props) {\n  var activePage = props.activePage,\n      entries = props.entries,\n      filteredRows = props.filteredRows,\n      info = props.info,\n      label = props.label,\n      noRecordsFoundLabel = props.noRecordsFoundLabel,\n      pages = props.pages;\n  var SHOWING_LABEL = label[0];\n  var TO_LABEL = label[1];\n  var OF_LABEL = label[2];\n  var ENTRIES_LABEL = label[3];\n  var NO_RECORDS = filteredRows.length > 0 && filteredRows[0].message === noRecordsFoundLabel;\n  var RECORDS = activePage > 0 ? activePage * entries + 1 : activePage + 1;\n  var RECORDS_ON_PAGE = pages.length - 1 > activePage ? pages[activePage].length * (activePage + 1) : filteredRows.length;\n  var ENTRIES = filteredRows.length;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-info\",\n    className: \"col-sm-12 col-md-5\"\n  }, info && React.createElement(\"div\", {\n    className: \"dataTables_info\",\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, !NO_RECORDS ? \"\".concat(SHOWING_LABEL, \" \").concat(RECORDS, \" \").concat(TO_LABEL, \" \").concat(RECORDS_ON_PAGE, \" \").concat(OF_LABEL, \" \").concat(ENTRIES, \" \").concat(ENTRIES_LABEL) : \"\".concat(SHOWING_LABEL, \" 0 \").concat(ENTRIES_LABEL)));\n};\n\nDataTableInfo.propTypes = {\n  activePage: PropTypes.number.isRequired,\n  entries: PropTypes.number.isRequired,\n  filteredRows: PropTypes.array.isRequired,\n  info: PropTypes.bool.isRequired,\n  noRecordsFoundLabel: PropTypes.string.isRequired,\n  pages: PropTypes.array.isRequired,\n  label: PropTypes.arrayOf(PropTypes.string)\n};\nDataTableInfo.defaultProps = {\n  label: ['Showing', 'to', 'of', 'entries']\n};\n\nvar Pagination = function Pagination(props) {\n  var _classNames;\n\n  var children = props.children,\n      circle = props.circle,\n      className = props.className,\n      color = props.color,\n      Tag = props.tag,\n      size = props.size,\n      attributes = _objectWithoutProperties(props, [\"children\", \"circle\", \"className\", \"color\", \"tag\", \"size\"]);\n\n  var classes = classNames((_classNames = {\n    'pagination-circle': circle\n  }, _defineProperty(_classNames, \"pg-\".concat(color), color), _defineProperty(_classNames, \"pagination-\".concat(size), size), _classNames), 'pagination', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"pagination\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPagination.propTypes = {\n  children: PropTypes.node,\n  circle: PropTypes.bool,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  size: PropTypes.oneOf(['lg', 'sm']),\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPagination.defaultProps = {\n  circle: false,\n  className: '',\n  color: '',\n  tag: 'ul'\n};\n\nvar PageItem = function PageItem(props) {\n  var active = props.active,\n      className = props.className,\n      children = props.children,\n      disabled = props.disabled,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"className\", \"children\", \"disabled\", \"tag\"]);\n\n  var classes = classNames({\n    disabled: disabled,\n    active: active\n  }, 'page-item', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"page-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPageItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPageItem.defaultProps = {\n  active: false,\n  className: '',\n  disabled: false,\n  tag: 'li'\n};\n\nvar PageLink = function PageLink(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('page-link', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"page-link\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPageLink.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPageLink.defaultProps = {\n  tag: 'a'\n};\n\nvar DataTablePagination =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTablePagination, _Component);\n\n  function DataTablePagination() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataTablePagination);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataTablePagination)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      pages: _this.props.pages,\n      pGroups: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps) {\n      var pages = _this.props.pages;\n\n      if (prevProps.pages !== pages) {\n        _this.setState({\n          pages: pages\n        }, function () {\n          return _this.groupPages();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pagesIndexify\", function () {\n      var pages = _this.state.pages;\n\n      var mutablePages = _toConsumableArray(pages);\n\n      mutablePages.forEach(function (page, index) {\n        return page.index = index;\n      });\n      return mutablePages;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"groupPages\", function () {\n      var pGroups = [];\n\n      var pages = _this.pagesIndexify();\n\n      var pagesAmount = _this.props.pagesAmount;\n\n      while (pages.length > 0) {\n        pGroups.push(pages.splice(0, pagesAmount));\n      }\n\n      _this.setState({\n        pGroups: pGroups\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"choosePagesGroup\", function () {\n      var _this$props = _this.props,\n          activePage = _this$props.activePage,\n          pagesAmount = _this$props.pagesAmount;\n      var pGroups = _this.state.pGroups;\n      var pGroupNumber = Math.floor(activePage / pagesAmount);\n      return pGroups.length ? pGroups[pGroupNumber] : [];\n    });\n\n    return _this;\n  }\n\n  _createClass(DataTablePagination, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.groupPages();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          activePage = _this$props2.activePage,\n          changeActivePage = _this$props2.changeActivePage,\n          pages = _this$props2.pages,\n          label = _this$props2.label;\n      return React.createElement(\"div\", {\n        \"data-test\": \"datatable-pagination\",\n        className: \"col-sm-12 col-md-7\"\n      }, React.createElement(\"div\", {\n        className: \"dataTables_paginate\"\n      }, React.createElement(Pagination, null, React.createElement(PageItem, {\n        disabled: activePage <= 0\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[0],\n        onClick: function onClick() {\n          return changeActivePage(activePage - 1);\n        }\n      }, React.createElement(\"span\", null, label[0]))), this.choosePagesGroup().map(function (page) {\n        return React.createElement(PageItem, {\n          key: Object.keys(page[0])[0] + page.index,\n          active: page.index === activePage\n        }, React.createElement(PageLink, {\n          className: \"page-link\",\n          onClick: function onClick() {\n            return changeActivePage(page.index);\n          }\n        }, page.index + 1, page.index === activePage && React.createElement(\"span\", {\n          className: \"sr-only\"\n        }, \"(current)\")));\n      }), React.createElement(PageItem, {\n        disabled: !pages.length || activePage === pages.length - 1\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[1],\n        onClick: function onClick() {\n          return changeActivePage(activePage + 1);\n        }\n      }, React.createElement(\"span\", null, label[1]))))));\n    }\n  }]);\n\n  return DataTablePagination;\n}(Component);\n\nDataTablePagination.propTypes = {\n  activePage: PropTypes.number.isRequired,\n  changeActivePage: PropTypes.func.isRequired,\n  label: PropTypes.arrayOf(PropTypes.string).isRequired,\n  pages: PropTypes.array.isRequired,\n  pagesAmount: PropTypes.number.isRequired\n};\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTable, _Component);\n\n  function DataTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activePage: 0,\n      columns: _this.props.data.columns || [],\n      entries: _this.props.entries,\n      filteredRows: _this.props.data.rows || [],\n      filterOptions: [],\n      order: _this.props.order || [],\n      pages: [],\n      rows: _this.props.data.rows || [],\n      search: '',\n      searchSelect: '',\n      sorted: false,\n      translateScrollHead: 0,\n      unsearchable: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setData\", function () {\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n      _this.setState(function () {\n        return {\n          columns: columns,\n          rows: rows,\n          filteredRows: _this.props.disableRetreatAfterSorting ? _this.filterRows() : rows\n        };\n      }, callback && typeof callback === 'function' && function () {\n        return callback();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setUnsearchable\", function (columns) {\n      var unsearchable = [];\n      columns.forEach(function (column) {\n        if (column.searchable !== undefined && column.searchable === false) {\n          unsearchable.push(column.field);\n        }\n      });\n\n      _this.setState({\n        unsearchable: unsearchable\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchData\", function (link, isPaginateRows) {\n      fetch(link).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        return _this.setData(json.rows, json.columns, isPaginateRows ? _this.paginateRows : null);\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pagesAmount\", function () {\n      return Math.ceil(_this.state.filteredRows.length / _this.state.entries);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRowsInitialy\", function () {\n      var _this$state = _this.state,\n          rows = _this$state.rows,\n          entries = _this$state.entries,\n          pages = _this$state.pages;\n\n      var pagesAmount = _this.pagesAmount();\n\n      for (var i = 1; i <= pagesAmount; i++) {\n        var pageEndIndex = i * entries;\n        pages.push(rows.slice(pageEndIndex - entries, pageEndIndex));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEntriesChange\", function (value) {\n      _this.setState({\n        entries: Array.isArray(value) ? value[0] : value\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearchChange\", function (e) {\n      _this.setState({\n        search: e.target.value\n      }, function () {\n        return _this.filterRows();\n      }, _this.props.onSearch && typeof _this.props.onSearch === 'function' && _this.props.onSearch(e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkFieldValue\", function (array, field) {\n      return array[field] && typeof array[field] !== 'string' ? array[field].props.searchvalue : array[field];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkField\", function (field, a, b, direction) {\n      var _ref = [_this.checkFieldValue(a, field), _this.checkFieldValue(b, field)],\n          aField = _ref[0],\n          bField = _ref[1];\n      var comp = aField > bField ? -1 : 1;\n\n      if (direction === 'asc') {\n        comp *= -1;\n      }\n\n      return comp;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sort\", function (rows, sortRows, field, direction) {\n      rows.sort(function (a, b) {\n        if (sortRows && sortRows.includes(field)) {\n          return _this.checkField(field, a, b, direction);\n        }\n\n        return direction === 'asc' ? a[field] < b[field] ? -1 : 1 : a[field] > b[field] ? -1 : 1;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (field, sort) {\n      var onSort = _this.props.onSort;\n\n      if (sort === 'disabled') {\n        return;\n      }\n\n      _this.setState(function (prevState) {\n        var sortRows = _this.props.sortRows;\n        var rows = prevState.rows,\n            columns = prevState.columns;\n        var direction = sort === 'desc' ? 'desc' : 'asc';\n\n        _this.sort(rows, sortRows, field, direction);\n\n        columns.forEach(function (col) {\n          if (col.sort === 'disabled') {\n            return;\n          }\n\n          col.sort = col.field === field ? col.sort === 'desc' ? 'asc' : 'desc' : '';\n        });\n        return {\n          rows: rows,\n          columns: columns,\n          sorted: true\n        };\n      }, function () {\n        return _this.filterRows();\n      });\n\n      onSort && typeof onSort === 'function' && onSort({\n        column: field,\n        direction: sort === 'desc' ? 'desc' : 'asc'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterRows\", function () {\n      var search = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.search;\n      var unsearchable = _this.state.unsearchable;\n      var _this$props = _this.props,\n          sortRows = _this$props.sortRows,\n          noRecordsFoundLabel = _this$props.noRecordsFoundLabel;\n\n      _this.setState(function (prevState) {\n        var filteredRows = prevState.rows.filter(function (row) {\n          for (var key in row) {\n            if ((!unsearchable.length || !unsearchable.includes(key)) && typeof row[key] !== 'function') {\n              var stringValue = '';\n\n              if (sortRows && typeof row[key] !== 'string') {\n                (function () {\n                  var content = [];\n\n                  var getContent = function getContent(element) {\n                    return _typeof(element) === 'object' ? element.props.children && Array.from(element.props.children).map(function (el) {\n                      return getContent(el);\n                    }) : content.push(element);\n                  };\n\n                  getContent(row[key]);\n                  stringValue = content.join('');\n                })();\n              } else if (row[key]) {\n                stringValue = row[key].toString();\n              }\n\n              if (stringValue.toLowerCase().includes(search.toLowerCase())) {\n                return true;\n              }\n            }\n          }\n\n          return false;\n        });\n\n        if (filteredRows.length === 0) {\n          filteredRows.push({\n            message: noRecordsFoundLabel,\n            colspan: prevState.columns.length\n          });\n        }\n\n        var test = {};\n\n        if (_this.props.disableRetreatAfterSorting) {\n          test = {\n            filteredRows: filteredRows,\n            activePage: prevState.activePage = prevState.activePage < prevState.pages.length || prevState.activePage === 0 ? prevState.activePage : prevState.pages.length - 1\n          };\n        } else if (!_this.props.disableRetreatAfterSorting) {\n          test = {\n            filteredRows: filteredRows,\n            activePage: 0\n          };\n        }\n\n        return test;\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRows\", function () {\n      var pagesAmount = _this.pagesAmount();\n\n      _this.setState(function (prevState) {\n        var pages = prevState.pages,\n            entries = prevState.entries,\n            filteredRows = prevState.filteredRows,\n            activePage = prevState.activePage;\n        var _this$props2 = _this.props,\n            paging = _this$props2.paging,\n            disableRetreatAfterSorting = _this$props2.disableRetreatAfterSorting;\n        pages = [];\n\n        if (paging) {\n          for (var i = 1; i <= pagesAmount; i++) {\n            var pageEndIndex = i * entries;\n            pages.push(filteredRows.slice(pageEndIndex - entries, pageEndIndex));\n          }\n\n          if (!disableRetreatAfterSorting) {\n            activePage = activePage < pages.length || activePage === 0 ? activePage : pages.length - 1;\n          }\n        } else {\n          pages.push(filteredRows);\n          activePage = 0;\n        }\n\n        return {\n          pages: pages,\n          filteredRows: filteredRows,\n          activePage: activePage\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeActivePage\", function (page) {\n      var onPageChange = _this.props.onPageChange;\n\n      _this.setState({\n        activePage: page\n      });\n\n      onPageChange && typeof onPageChange === 'function' && onPageChange({\n        activePage: page + 1,\n        pagesAmount: _this.pagesAmount()\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableBodyScroll\", function (e) {\n      _this.setState({\n        translateScrollHead: e.target.scrollLeft\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props3 = this.props,\n          data = _this$props3.data,\n          paging = _this$props3.paging;\n      var _this$state2 = this.state,\n          order = _this$state2.order,\n          columns = _this$state2.columns,\n          pages = _this$state2.pages,\n          rows = _this$state2.rows;\n\n      if (typeof data === 'string') {\n        this.fetchData(data, this.paginateRows);\n      }\n\n      order.length && this.handleSort(order[0], order[1]);\n      this.setUnsearchable(columns);\n\n      if (paging) {\n        this.paginateRowsInitialy();\n      } else {\n        pages.push(rows);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var columns = this.state.columns;\n      var data = this.props.data;\n\n      if (prevProps.data !== data) {\n        typeof data === 'string' ? this.fetchData(data) : this.setData(data.rows, data.columns, this.paginateRows);\n        this.setUnsearchable(columns);\n        this.filterRows();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          autoWidth = _this$props4.autoWidth,\n          barReverse = _this$props4.barReverse,\n          bordered = _this$props4.bordered,\n          borderless = _this$props4.borderless,\n          btn = _this$props4.btn,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          dark = _this$props4.dark,\n          data = _this$props4.data,\n          disableRetreatAfterSorting = _this$props4.disableRetreatAfterSorting,\n          displayEntries = _this$props4.displayEntries,\n          entriesLabel = _this$props4.entriesLabel,\n          entriesOptions = _this$props4.entriesOptions,\n          exportToCSV = _this$props4.exportToCSV,\n          filter = _this$props4.filter,\n          fixed = _this$props4.fixed,\n          hover = _this$props4.hover,\n          info = _this$props4.info,\n          infoLabel = _this$props4.infoLabel,\n          maxHeight = _this$props4.maxHeight,\n          noBottomColumns = _this$props4.noBottomColumns,\n          noRecordsFoundLabel = _this$props4.noRecordsFoundLabel,\n          onPageChange = _this$props4.onPageChange,\n          onSearch = _this$props4.onSearch,\n          onSort = _this$props4.onSort,\n          order = _this$props4.order,\n          pagesAmount = _this$props4.pagesAmount,\n          paginationLabel = _this$props4.paginationLabel,\n          paging = _this$props4.paging,\n          responsive = _this$props4.responsive,\n          responsiveLg = _this$props4.responsiveLg,\n          responsiveMd = _this$props4.responsiveMd,\n          responsiveSm = _this$props4.responsiveSm,\n          responsiveXl = _this$props4.responsiveXl,\n          scrollX = _this$props4.scrollX,\n          scrollY = _this$props4.scrollY,\n          searching = _this$props4.searching,\n          searchLabel = _this$props4.searchLabel,\n          small = _this$props4.small,\n          sortable = _this$props4.sortable,\n          sortRows = _this$props4.sortRows,\n          striped = _this$props4.striped,\n          tbodyColor = _this$props4.tbodyColor,\n          tbodyTextWhite = _this$props4.tbodyTextWhite,\n          theadColor = _this$props4.theadColor,\n          theadTextWhite = _this$props4.theadTextWhite,\n          attributes = _objectWithoutProperties(_this$props4, [\"autoWidth\", \"barReverse\", \"bordered\", \"borderless\", \"btn\", \"children\", \"className\", \"dark\", \"data\", \"disableRetreatAfterSorting\", \"displayEntries\", \"entriesLabel\", \"entriesOptions\", \"exportToCSV\", \"filter\", \"fixed\", \"hover\", \"info\", \"infoLabel\", \"maxHeight\", \"noBottomColumns\", \"noRecordsFoundLabel\", \"onPageChange\", \"onSearch\", \"onSort\", \"order\", \"pagesAmount\", \"paginationLabel\", \"paging\", \"responsive\", \"responsiveLg\", \"responsiveMd\", \"responsiveSm\", \"responsiveXl\", \"scrollX\", \"scrollY\", \"searching\", \"searchLabel\", \"small\", \"sortable\", \"sortRows\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\"]);\n\n      var _this$state3 = this.state,\n          columns = _this$state3.columns,\n          entries = _this$state3.entries,\n          filteredRows = _this$state3.filteredRows,\n          filterOptions = _this$state3.filterOptions,\n          pages = _this$state3.pages,\n          activePage = _this$state3.activePage,\n          search = _this$state3.search,\n          sorted = _this$state3.sorted,\n          translateScrollHead = _this$state3.translateScrollHead;\n      var tableClasses = classNames('dataTables_wrapper dt-bootstrap4', className);\n      return React.createElement(\"div\", {\n        \"data-test\": \"datatable\",\n        className: tableClasses\n      }, React.createElement(\"div\", {\n        className: \"row\".concat(barReverse ? ' flex-row-reverse' : '')\n      }, React.createElement(DataTableEntries, {\n        paging: paging,\n        displayEntries: displayEntries,\n        entries: entries,\n        handleEntriesChange: this.handleEntriesChange,\n        entriesArr: entriesOptions,\n        label: entriesLabel,\n        barReverse: barReverse\n      }), React.createElement(DataTableSearch, {\n        handleSearchChange: this.handleSearchChange,\n        search: search,\n        searching: searching,\n        label: searchLabel,\n        barReverse: barReverse\n      })), !scrollY && !scrollX && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTable, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        hover: hover,\n        noBottomColumns: noBottomColumns,\n        noRecordsFoundLabel: noRecordsFoundLabel,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        sorted: sorted\n      }, attributes))), (scrollY || scrollX) && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTableScroll, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        handleTableBodyScroll: this.handleTableBodyScroll,\n        hover: hover,\n        maxHeight: maxHeight,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        scrollX: scrollX,\n        scrollY: scrollY,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        sorted: sorted,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        translateScrollHead: translateScrollHead\n      }, attributes))), paging && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableInfo, {\n        activePage: activePage,\n        entries: entries,\n        filteredRows: filteredRows,\n        info: info,\n        pages: pages,\n        label: infoLabel,\n        noRecordsFoundLabel: noRecordsFoundLabel\n      }), React.createElement(DataTablePagination, {\n        activePage: activePage,\n        changeActivePage: this.changeActivePage,\n        pages: pages,\n        pagesAmount: pagesAmount,\n        label: paginationLabel\n      })));\n    }\n  }]);\n\n  return DataTable;\n}(Component);\n\nDataTable.propTypes = {\n  autoWidth: PropTypes.bool,\n  barReverse: PropTypes.bool,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  btn: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  disableRetreatAfterSorting: PropTypes.bool,\n  displayEntries: PropTypes.bool,\n  entries: PropTypes.number,\n  entriesLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  entriesOptions: PropTypes.arrayOf(PropTypes.number),\n  exportToCSV: PropTypes.bool,\n  filter: PropTypes.string,\n  fixed: PropTypes.bool,\n  hover: PropTypes.bool,\n  info: PropTypes.bool,\n  infoLabel: PropTypes.arrayOf(PropTypes.string),\n  maxHeight: PropTypes.string,\n  noBottomColumns: PropTypes.bool,\n  noRecordsFoundLabel: PropTypes.string,\n  onPageChange: PropTypes.func,\n  onSearch: PropTypes.func,\n  onSort: PropTypes.func,\n  order: PropTypes.arrayOf(PropTypes.string),\n  pagesAmount: PropTypes.number,\n  paginationLabel: PropTypes.arrayOf(PropTypes.string),\n  paging: PropTypes.bool,\n  responsive: PropTypes.bool,\n  responsiveLg: PropTypes.bool,\n  responsiveMd: PropTypes.bool,\n  responsiveSm: PropTypes.bool,\n  responsiveXl: PropTypes.bool,\n  scrollX: PropTypes.bool,\n  scrollY: PropTypes.bool,\n  searching: PropTypes.bool,\n  searchLabel: PropTypes.string,\n  small: PropTypes.bool,\n  sortable: PropTypes.bool,\n  sortRows: PropTypes.arrayOf(PropTypes.string),\n  striped: PropTypes.bool,\n  tbodyColor: PropTypes.string,\n  tbodyTextWhite: PropTypes.bool,\n  theadColor: PropTypes.string,\n  theadTextWhite: PropTypes.bool\n};\nDataTable.defaultProps = {\n  autoWidth: false,\n  barReverse: false,\n  bordered: false,\n  borderless: false,\n  btn: false,\n  dark: false,\n  data: {\n    columns: [],\n    rows: []\n  },\n  disableRetreatAfterSorting: false,\n  displayEntries: true,\n  entries: 10,\n  entriesLabel: 'Show entries',\n  entriesOptions: [10, 20, 50, 100],\n  exportToCSV: false,\n  fixed: false,\n  hover: false,\n  info: true,\n  infoLabel: ['Showing', 'to', 'of', 'entries'],\n  noRecordsFoundLabel: 'No matching records found',\n  noBottomColumns: false,\n  order: [],\n  pagesAmount: 8,\n  paging: true,\n  paginationLabel: ['Previous', 'Next'],\n  responsive: false,\n  responsiveSm: false,\n  responsiveMd: false,\n  responsiveLg: false,\n  responsiveXl: false,\n  searching: true,\n  searchLabel: 'Search',\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  small: false,\n  striped: false,\n  theadColor: '',\n  theadTextWhite: false,\n  tbodyColor: '',\n  tbodyTextWhite: false\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getContainer\", function () {\n      return ReactDOM.findDOMNode(_assertThisInitialized(_this));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addEvents\", function () {\n      ['click', 'touchstart', 'keyup'].forEach(function (event) {\n        return document.addEventListener(event, _this.handleDocumentClick, true);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeEvents\", function () {\n      ['click', 'touchstart', 'keyup'].forEach(function (event) {\n        return document.removeEventListener(event, _this.handleDocumentClick, true);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (e) {\n      var keyCode = e.which,\n          type = e.type,\n          target = e.target;\n      var tab = keyCodes.tab;\n      var MOUSE_RIGHT_CLICK = keyCode === 3;\n      var TAB = keyCode === tab;\n      var KEYUP = type === 'keyup';\n\n      if (MOUSE_RIGHT_CLICK || KEYUP && !TAB) {\n        return;\n      }\n\n      var container = _this.getContainer();\n\n      if (container.contains(target) && container !== target && (!KEYUP || TAB)) {\n        return;\n      }\n\n      _this.toggle();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (e, items) {\n      var up = keyCodes.up,\n          down = keyCodes.down;\n      var keyCode = e.which,\n          target = e.target;\n      var UP = keyCode === up;\n      var DOWN = keyCode === down;\n\n      var index = _toConsumableArray(items).findIndex(function (item) {\n        return item === target;\n      });\n\n      if (UP && index > 0) {\n        index -= 1;\n      }\n\n      if (DOWN && index < items.length - 1) {\n        index += 1;\n      }\n\n      if (index < 0) {\n        index = 0;\n      }\n\n      items[index].focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e) {\n      var isOpen = _this.state.isOpen;\n      var disabled = _this.props.disabled;\n      var keyCode = e.which,\n          target = e.target;\n      var esc = keyCodes.esc,\n          up = keyCodes.up,\n          down = keyCodes.down,\n          space = keyCodes.space;\n      var SPACE = keyCode === space;\n      var ESC = keyCode === esc;\n\n      if (![esc, up, down, space].includes(keyCode) || /button/i.test(target.tagName) && SPACE || /input|textarea/i.test(target.tagName)) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (disabled) {\n        return;\n      }\n\n      var container = _this.getContainer();\n\n      if (SPACE && isOpen && container !== target) {\n        target.click();\n      }\n\n      if (ESC || !isOpen) {\n        _this.toggle();\n\n        var btn = container.children[0];\n        btn.focus();\n        return;\n      }\n\n      var items = container.querySelectorAll('.dropdown-menu .dropdown-item:not(.disabled)');\n      items.length && _this.handleFocus(e, items);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      var isOpen = _this.state.isOpen;\n\n      _this.setState({\n        isOpen: !isOpen\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var isOpen = this.state.isOpen;\n      var _this$props = this.props,\n          dropup = _this$props.dropup,\n          dropright = _this$props.dropright,\n          dropleft = _this$props.dropleft;\n      return {\n        isOpen: isOpen,\n        dropup: dropup,\n        dropright: dropright,\n        dropleft: dropleft,\n        toggle: this.toggle\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeEvents();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"handleEventsBinding\",\n    value: function handleEventsBinding() {\n      var isOpen = this.state.isOpen;\n      isOpen ? this.addEvents() : this.removeEvents();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _omit = omit(this.props, ['toggle', 'disabled']),\n          className = _omit.className,\n          children = _omit.children,\n          dropup = _omit.dropup,\n          group = _omit.group,\n          size = _omit.size,\n          dropright = _omit.dropright,\n          dropleft = _omit.dropleft;\n\n      var isOpen = this.state.isOpen;\n      var classes = classNames((_classNames = {\n        'btn-group': group\n      }, _defineProperty(_classNames, \"btn-group-\".concat(size), !!size), _defineProperty(_classNames, \"dropdown\", !group), _defineProperty(_classNames, \"show\", isOpen), _defineProperty(_classNames, \"dropup\", dropup), _defineProperty(_classNames, \"dropright\", dropright), _defineProperty(_classNames, \"dropleft\", dropleft), _classNames), className);\n      return React.createElement(Manager, null, React.createElement(\"div\", {\n        \"data-test\": \"dropdown\",\n        className: classes,\n        onKeyDown: this.handleKeyDown\n      }, children));\n    }\n  }]);\n\n  return Dropdown;\n}(Component);\n\nDropdown.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  dropleft: PropTypes.bool,\n  dropright: PropTypes.bool,\n  dropup: PropTypes.bool,\n  group: PropTypes.bool,\n  size: PropTypes.string,\n  tag: PropTypes.string,\n  toggle: PropTypes.func\n};\nDropdown.defaultProps = {\n  dropleft: false,\n  dropright: false,\n  dropup: false,\n  tag: 'div'\n};\nDropdown.childContextTypes = {\n  dropleft: PropTypes.bool.isRequired,\n  dropright: PropTypes.bool.isRequired,\n  dropup: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired\n};\n\nvar DropdownItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownItem, _Component);\n\n  function DropdownItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          header = _this$props.header,\n          divider = _this$props.divider,\n          onClick = _this$props.onClick,\n          toggle = _this$props.toggle;\n\n      if (disabled || header || divider) {\n        e.preventDefault();\n        return;\n      }\n\n      if (onClick) {\n        onClick(e);\n      }\n\n      if (toggle) {\n        _this.context.toggle(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTabIndex\", function () {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          header = _this$props2.header,\n          divider = _this$props2.divider;\n\n      if (disabled || header || divider) {\n        return '-1';\n      }\n\n      return '0';\n    });\n\n    return _this;\n  }\n\n  _createClass(DropdownItem, [{\n    key: \"render\",\n    value: function render() {\n      var tabIndex = this.getTabIndex();\n\n      var _omit = omit(this.props, ['toggle']),\n          className = _omit.className,\n          divider = _omit.divider,\n          Tag = _omit.tag,\n          header = _omit.header,\n          href = _omit.href,\n          active = _omit.active,\n          disabled = _omit.disabled,\n          props = _objectWithoutProperties(_omit, [\"className\", \"divider\", \"tag\", \"header\", \"href\", \"active\", \"disabled\"]);\n\n      var toggle = this.props.toggle;\n      var classes = classNames({\n        active: active,\n        disabled: disabled,\n        'dropdown-item': !divider && !header,\n        'dropdown-header': header,\n        'dropdown-divider': divider\n      }, className);\n\n      if (Tag === 'button') {\n        if (header) {\n          Tag = 'h6';\n        } else if (divider) {\n          Tag = 'div';\n        } else if (href) {\n          Tag = 'a';\n        }\n      }\n\n      var type = Tag === 'button' && (props.onClick || toggle) ? 'button' : undefined;\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"dropdown-item\",\n        type: type\n      }, props, {\n        tabIndex: tabIndex,\n        className: classes,\n        onClick: this.onClick,\n        href: href\n      }));\n    }\n  }]);\n\n  return DropdownItem;\n}(Component);\n\nDropdownItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  divider: PropTypes.bool,\n  header: PropTypes.bool,\n  onClick: PropTypes.func,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  toggle: PropTypes.bool\n};\nDropdownItem.defaultProps = {\n  tag: 'button',\n  toggle: true\n};\nDropdownItem.contextTypes = {\n  toggle: PropTypes.func\n};\n\nvar DropdownMenuComponent = function DropdownMenuComponent(_ref) {\n  var Tag = _ref.tag,\n      tabIndex = _ref.tabIndex,\n      role = _ref.role,\n      attributes = _ref.attributes,\n      aria = _ref.aria,\n      d_key = _ref.d_key,\n      children = _ref.children;\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"dropdown-menu-component\",\n    tabIndex: tabIndex,\n    role: role\n  }, attributes, {\n    \"aria-hidden\": aria,\n    key: d_key\n  }), children);\n};\n\nDropdownMenuComponent.propTypes = {\n  aria: PropTypes.bool.isRequired,\n  attributes: PropTypes.object.isRequired,\n  children: PropTypes.node.isRequired,\n  d_key: PropTypes.string.isRequired,\n  role: PropTypes.string.isRequired,\n  tabIndex: PropTypes.string.isRequired,\n  tag: PropTypes.any.isRequired\n};\nvar css$5 = \".dropup .dropdown-menu {\\r\\n  top: auto !important;\\r\\n  bottom: 100% !important;\\r\\n  transform: translate3d(5px, 5px, 0px) !important;\\r\\n}\\r\\n\\r\\n.dropdown-menu-right {\\r\\n  left: 0 !important;\\r\\n  right: auto !important;\\r\\n}\\r\\n\";\nstyleInject(css$5);\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownMenu, _Component);\n\n  function DropdownMenu() {\n    _classCallCheck(this, DropdownMenu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropdownMenu).apply(this, arguments));\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          basic = _this$props.basic,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          flip = _this$props.flip,\n          modifiers = _this$props.modifiers,\n          right = _this$props.right,\n          tag = _this$props.tag,\n          attrs = _objectWithoutProperties(_this$props, [\"basic\", \"children\", \"className\", \"color\", \"flip\", \"modifiers\", \"right\", \"tag\"]);\n\n      var _this$context = this.context,\n          isOpen = _this$context.isOpen,\n          dropup = _this$context.dropup,\n          dropright = _this$context.dropright,\n          dropleft = _this$context.dropleft;\n      var classes = classNames((_classNames = {\n        'dropdown-menu-right': right\n      }, _defineProperty(_classNames, \"dropdown-\".concat(color), color), _defineProperty(_classNames, \"show\", isOpen), _defineProperty(_classNames, \"basic\", basic), _classNames), 'dropdown-menu', className);\n      var Tag = tag;\n\n      if (isOpen) {\n        var position1 = dropup ? 'top' : dropright ? 'right' : dropleft ? 'left' : 'bottom';\n        var position2 = right ? 'end' : 'start';\n        attrs.placement = \"\".concat(position1, \"-\").concat(position2);\n        attrs.component = tag;\n      }\n\n      return React.createElement(Popper, {\n        modifiers: modifiers || !flip && {\n          flip: {\n            enabled: false\n          }\n        },\n        eventsEnabled: true,\n        positionFixed: false,\n        placement: attrs.placement,\n        \"data-test\": \"dropdown-menu\"\n      }, function (_ref) {\n        var placement = _ref.placement,\n            ref = _ref.ref,\n            style = _ref.style;\n        return React.createElement(Tag, {\n          ref: ref,\n          style: style,\n          \"data-placement\": placement,\n          className: classes\n        }, React.createElement(DropdownMenuComponent, {\n          isOpen: isOpen,\n          tag: Tag,\n          tabIndex: \"-1\",\n          role: \"menu\",\n          attributes: attrs,\n          aria: !isOpen,\n          d_key: \"dropDownMenu\",\n          color: color\n        }, children));\n      });\n    }\n  }]);\n\n  return DropdownMenu;\n}(Component);\n\nDropdownMenu.propTypes = {\n  children: PropTypes.node.isRequired,\n  basic: PropTypes.bool,\n  className: PropTypes.string,\n  flip: PropTypes.bool,\n  modifiers: PropTypes.object,\n  right: PropTypes.bool,\n  tag: PropTypes.string\n};\nDropdownMenu.defaultProps = {\n  basic: false,\n  className: '',\n  flip: true,\n  right: false,\n  tag: 'div',\n  color: false\n};\nDropdownMenu.contextTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  dropup: PropTypes.bool.isRequired,\n  dropright: PropTypes.bool.isRequired,\n  dropleft: PropTypes.bool.isRequired,\n  color: PropTypes.oneOfType([PropTypes.oneOf(['primary', 'default', 'secondary', 'success', 'dark', 'danger', 'info', 'warning', 'ins']), PropTypes.bool])\n};\n\nvar Button = function Button(props) {\n  var _classNames;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    e.stopPropagation(); // Waves - Get Cursor Position\n\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var action = props.action,\n      active = props.active,\n      block = props.block,\n      children = props.children,\n      circle = props.circle,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      download = props.download,\n      flat = props.flat,\n      gradient = props.gradient,\n      innerRef = props.innerRef,\n      outline = props.outline,\n      role = props.role,\n      rounded = props.rounded,\n      size = props.size,\n      social = props.social,\n      Tag = props.tag,\n      target = props.target,\n      type = props.type,\n      attributes = _objectWithoutProperties(props, [\"action\", \"active\", \"block\", \"children\", \"circle\", \"className\", \"color\", \"disabled\", \"download\", \"flat\", \"gradient\", \"innerRef\", \"outline\", \"role\", \"rounded\", \"size\", \"social\", \"tag\", \"target\", \"type\"]);\n\n  var classes = classNames(color !== '' && \"btn-\".concat(color), color && outline && \"btn-outline-\".concat(color), 'btn', 'Ripple-parent', gradient && \"\".concat(gradient, \"-gradient\"), (_classNames = {\n    active: active,\n    'btn-circle': circle,\n    'btn-block': block,\n    'btn-action': action\n  }, _defineProperty(_classNames, \"btn-\".concat(social), social), _defineProperty(_classNames, \"btn-\".concat(size), size), _defineProperty(_classNames, \"disabled\", disabled), _classNames), className);\n\n  if (attributes.href && Tag === 'button') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"button\",\n    type: Tag === 'button' && !type ? 'button' : type,\n    target: target,\n    role: Tag === 'a' && !role ? 'button' : role,\n    className: classes,\n    ref: innerRef,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick\n  }, attributes, {\n    download: download,\n    disabled: disabled\n  }), children, !disabled && React.createElement(Waves, {\n    cursorPos: cursorPos,\n    outline: outline,\n    flat: flat || rounded\n  }));\n};\n\nButton.defaultProps = {\n  color: 'default',\n  tag: 'button'\n};\nButton.propTypes = {\n  action: PropTypes.bool,\n  active: PropTypes.bool,\n  block: PropTypes.bool,\n  children: PropTypes.node,\n  circle: PropTypes.bool,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  download: PropTypes.string,\n  flat: PropTypes.bool,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  role: PropTypes.string,\n  size: PropTypes.string,\n  social: PropTypes.string,\n  tag: PropTypes.string,\n  target: PropTypes.string,\n  type: PropTypes.string\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownToggle, _React$Component);\n\n  function DropdownToggle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownToggle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownToggle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          nav = _this$props.nav,\n          tag = _this$props.tag,\n          onClick = _this$props.onClick;\n      var toggle = _this.context.toggle;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (nav && !tag) {\n        e.preventDefault();\n      }\n\n      if (onClick) {\n        onClick(e);\n      }\n\n      toggle(e);\n    });\n\n    return _this;\n  }\n\n  _createClass(DropdownToggle, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          color = _this$props2.color,\n          caret = _this$props2.caret,\n          nav = _this$props2.nav,\n          tag = _this$props2.tag,\n          props = _objectWithoutProperties(_this$props2, [\"className\", \"color\", \"caret\", \"nav\", \"tag\"]);\n\n      var isOpen = this.context.isOpen;\n      var ariaLabel = props['aria-label'] || 'Toggle Dropdown';\n      var classes = classNames({\n        'dropdown-toggle': caret,\n        'nav-link': nav\n      }, className);\n      var children = props.children || React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, ariaLabel);\n      var Tag = tag;\n\n      if (nav && !tag) {\n        Tag = 'a';\n        props.href = '#';\n      } else if (!tag) {\n        Tag = Button;\n        props.color = color;\n      }\n\n      return React.createElement(Reference, {\n        \"data-test\": \"dropdown-toggle\"\n      }, function (_ref) {\n        var ref = _ref.ref;\n        return tag || nav ? React.createElement(Tag, _extends({}, props, {\n          className: classes,\n          onClick: _this2.onClick,\n          \"aria-expanded\": isOpen,\n          ref: ref\n        }), children) : React.createElement(Tag, _extends({}, props, {\n          className: classes,\n          onClick: _this2.onClick,\n          \"aria-expanded\": isOpen,\n          innerRef: ref\n        }), children);\n      });\n    }\n  }]);\n\n  return DropdownToggle;\n}(React.Component);\n\nDropdownToggle.propTypes = {\n  'aria-haspopup': PropTypes.bool,\n  caret: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  nav: PropTypes.bool,\n  onClick: PropTypes.func,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nDropdownToggle.defaultProps = {\n  'aria-haspopup': true,\n  color: 'secondary'\n};\nDropdownToggle.contextTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired\n};\n\nvar EdgeHeader = function EdgeHeader(props) {\n  var color = props.color,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"color\", \"className\", \"tag\"]);\n\n  var classes = classNames('edge-header', color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"edgeHeader\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nEdgeHeader.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nEdgeHeader.defaultProps = {\n  color: 'deep-purple',\n  tag: 'div'\n};\n\nvar Footer = function Footer(props) {\n  var color = props.color,\n      children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"color\", \"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('page-footer', color && color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"footer\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nFooter.defaultProps = {\n  tag: 'footer'\n};\n\nvar FormInline = function FormInline(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var className = props.className,\n      waves = props.waves,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"waves\", \"children\"]);\n\n  var classes = classNames('form-inline', waves && 'Ripple-parent', className);\n  return React.createElement(\"form\", _extends({\n    \"data-test\": \"form-inline\"\n  }, attributes, {\n    className: classes,\n    onMouseDown: handleClick,\n    onTouchStart: handleClick\n  }), children, waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nFormInline.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  waves: PropTypes.bool\n};\n\nvar FreeBird = function FreeBird(props) {\n  var className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\"]);\n\n  var classes = classNames('container free-bird', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"freebird\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nFreeBird.propTypes = {\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nFreeBird.defaultProps = {\n  tag: 'div'\n};\nvar css$6 = \".mdb-gallery {\\r\\n  display: flex;\\r\\n  flex-wrap: wrap;\\r\\n  overflow-y: auto;\\r\\n  list-style: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\";\nstyleInject(css$6);\nvar Gallery = React.forwardRef(function Gallery(props, ref) {\n  var _props$cellHeight = props.cellHeight,\n      cellHeight = _props$cellHeight === void 0 ? 180 : _props$cellHeight,\n      children = props.children,\n      className = props.className,\n      _props$cols = props.cols,\n      cols = _props$cols === void 0 ? 2 : _props$cols,\n      tag = props.tag,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 4 : _props$spacing,\n      style = props.style,\n      attributes = _objectWithoutProperties(props, [\"cellHeight\", \"children\", \"className\", \"cols\", \"tag\", \"spacing\", \"style\"]);\n\n  var classes = classNames('mdb-gallery', className);\n  return React.createElement(MDBBox, _extends({\n    tag: tag\n  }, attributes, {\n    style: _objectSpread2({\n      margin: -spacing / 2\n    }, style),\n    className: classes,\n    ref: ref\n  }), React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    var childCols = child.props.cols || 1;\n    var childRows = child.props.rows || 1;\n    return React.cloneElement(child, {\n      style: _objectSpread2({\n        width: \"\".concat(100 / cols * childCols, \"%\"),\n        height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + spacing,\n        padding: spacing / 2\n      }, child.props.style)\n    });\n  }));\n});\nGallery.propTypes = {\n  cellHeight: PropTypes.number,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cols: PropTypes.number,\n  spacing: PropTypes.number,\n  style: PropTypes.object,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nGallery.defaultProps = {\n  tag: 'ul'\n};\nvar css$7 = \".mdb-gallery-element {\\r\\n  box-sizing: border-box;\\r\\n  flex-shrink: 0;\\r\\n}\\r\\n\\r\\n.mdb-gallery-title {\\r\\n  height: 100%;\\r\\n  display: block;\\r\\n  overflow: hidden;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.img-full-height {\\r\\n  height: 100%;\\r\\n  transform: translateX(-50%);\\r\\n  position: relative;\\r\\n  left: 50%;\\r\\n}\\r\\n\\r\\n.img-full-width {\\r\\n  width: 100%;\\r\\n  transform: translateY(-50%);\\r\\n  position: relative;\\r\\n  top: 50%;\\r\\n}\\r\\n\";\nstyleInject(css$7);\n\nvar imgClass = function imgClass(img) {\n  if (!img || !img.complete) {\n    return;\n  }\n\n  if (img.width / img.height > img.parentElement.offsetWidth / img.parentElement.offsetHeight) {\n    img.classList.remove('img-full-width');\n    img.classList.add('img-full-height');\n  } else {\n    img.classList.remove('img-full-height');\n    img.classList.add('img-full-width');\n  }\n};\n\nfunction ensureImageCover(img) {\n  if (!img) {\n    return;\n  }\n\n  if (img.complete) {\n    imgClass(img);\n  } else {\n    img.addEventListener('load', function () {\n      imgClass(img);\n    });\n  }\n}\n\nvar GalleryList = React.forwardRef(function GalleryList(props, ref) {\n  var children = props.children,\n      className = props.className,\n      cols = props.cols,\n      tag = props.tag,\n      rows = props.rows,\n      titleClasses = props.titleClasses,\n      elementClasses = props.elementClasses,\n      styles = props.styles,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"cols\", \"tag\", \"rows\", \"titleClasses\", \"elementClasses\", \"styles\"]);\n\n  var imgRef = useRef(null);\n  var ec = classNames('mdb-gallery-element', elementClasses);\n  var tc = classNames('mdb-gallery-title', titleClasses);\n  useEffect(function () {\n    ensureImageCover(imgRef.current);\n  });\n  useEffect(function () {\n    var handleResize = debounce(function () {\n      imgClass(imgRef.current);\n    });\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('resive', handleResize);\n    };\n  }, []);\n  return React.createElement(MDBBox, _extends({\n    tag: tag,\n    ref: ref\n  }, attributes, {\n    className: ec\n  }), React.createElement(MDBBox, {\n    style: _objectSpread2({}, styles),\n    className: tc\n  }, React.Children.map(children, function (child) {\n    if (!React.isValidElement) {\n      return null;\n    }\n\n    if (child.type === 'img') {\n      return React.cloneElement(child, {\n        ref: imgRef\n      });\n    }\n\n    return child;\n  })));\n});\nGalleryList.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cols: PropTypes.number,\n  elementClasses: PropTypes.string,\n  rows: PropTypes.number,\n  style: PropTypes.object,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  titleClasses: PropTypes.string\n};\nGalleryList.defaultProps = {\n  tag: 'li'\n};\nvar css$8 = \".hamburger-button__checkbox {\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n.hamburger-button__button {\\r\\n  background-color: transparent;\\r\\n  height: 100%;\\r\\n  width: 100%;\\r\\n  text-align: center;\\r\\n  cursor: pointer;\\r\\n  top: -5px;\\r\\n}\\r\\n\\r\\nlabel.hamburger-button__button {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n#nav-icon1 {\\r\\n  width: 1.5em;\\r\\n  height: 1.5em;\\r\\n  position: relative;\\r\\n  -webkit-transform: rotate(0deg);\\r\\n  -moz-transform: rotate(0deg);\\r\\n  -o-transform: rotate(0deg);\\r\\n  transform: rotate(0deg);\\r\\n  -webkit-transition: .5s ease-in-out;\\r\\n  -moz-transition: .5s ease-in-out;\\r\\n  -o-transition: .5s ease-in-out;\\r\\n  transition: .5s ease-in-out;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n#nav-icon1 span {\\r\\n  display: block;\\r\\n  position: absolute;\\r\\n  height: 3px;\\r\\n  width: 100%;\\r\\n  border-radius: 1px;\\r\\n  background-color: #fff;\\r\\n  opacity: 1;\\r\\n  left: 0;\\r\\n  -webkit-transform: rotate(0deg);\\r\\n  -moz-transform: rotate(0deg);\\r\\n  -o-transform: rotate(0deg);\\r\\n  transform: rotate(0deg);\\r\\n  -webkit-transition: .25s ease-in-out;\\r\\n  -moz-transition: .25s ease-in-out;\\r\\n  -o-transition: .25s ease-in-out;\\r\\n  transition: .25s ease-in-out;\\r\\n}\\r\\n\\r\\n#nav-icon1 span:nth-child(1) {\\r\\n  top: 5px;\\r\\n}\\r\\n\\r\\n#nav-icon1 span:nth-child(2) {\\r\\n  top: 16px;\\r\\n}\\r\\n\\r\\n#nav-icon1 span:nth-child(3) {\\r\\n  top: 27px;\\r\\n}\\r\\n\\r\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(1) {\\r\\n  top: 16px;\\r\\n  -webkit-transform: rotate(135deg);\\r\\n  -moz-transform: rotate(135deg);\\r\\n  -o-transform: rotate(135deg);\\r\\n  transform: rotate(135deg);\\r\\n}\\r\\n\\r\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(2) {\\r\\n  opacity: 0;\\r\\n  left: -60px;\\r\\n}\\r\\n\\r\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(3) {\\r\\n  top: 16px;\\r\\n  -webkit-transform: rotate(-135deg);\\r\\n  -moz-transform: rotate(-135deg);\\r\\n  -o-transform: rotate(-135deg);\\r\\n  transform: rotate(-135deg);\\r\\n}\\r\\n\";\nstyleInject(css$8);\n\nvar HamburgerToggler = function HamburgerToggler(props) {\n  var id = props.id,\n      color = props.color,\n      className = props.className,\n      isOpen = props.isOpen,\n      onClick = props.onClick;\n  var classes = classNames('hamburger-button__button', className);\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    \"data-test\": \"hamburger-toggler\",\n    type: \"checkbox\",\n    defaultChecked: isOpen || false,\n    onChange: onClick,\n    className: \"hamburger-button__checkbox\",\n    id: id\n  }), React.createElement(\"label\", {\n    id: \"nav-icon1\",\n    className: classes,\n    htmlFor: id\n  }, React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  }), React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  }), React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  })));\n};\n\nHamburgerToggler.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  id: PropTypes.string\n};\n\nvar Iframe =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Iframe, _Component);\n\n  function Iframe() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Iframe);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Iframe)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      stateWidth: '',\n      stateHeight: '',\n      ratio: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var ratio = _this.props.ratio;\n      var _this$props = _this.props,\n          width = _this$props.width,\n          height = _this$props.height;\n      var ratioNumber = 9 / 16;\n\n      if (ratio) {\n        var newRatio = ratio.split('by')[0] / ratio.split('by')[1];\n\n        if (typeof ratioNumber === 'number') {\n          ratioNumber = newRatio;\n        }\n      }\n\n      if (width && height) {\n        return;\n      }\n\n      if (width) {\n        height = width * ratioNumber;\n      } else if (height) {\n        width = height * (1 / ratioNumber);\n      }\n\n      _this.setState(_objectSpread2({}, _this.state, {\n        width: width,\n        height: height,\n        ratio: ratio\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Iframe, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          allowFullScreen = _this$props2.allowFullScreen,\n          className = _this$props2.className,\n          id = _this$props2.id,\n          name = _this$props2.name,\n          onMouseOver = _this$props2.onMouseOver,\n          onMouseOut = _this$props2.onMouseOut,\n          onLoad = _this$props2.onLoad,\n          sandbox = _this$props2.sandbox,\n          src = _this$props2.src,\n          style = _this$props2.style,\n          _this$props2$title = _this$props2.title,\n          title = _this$props2$title === void 0 ? '' : _this$props2$title,\n          ratio = _this$props2.ratio,\n          height = _this$props2.height,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          stateWidth = _this$state.stateWidth,\n          stateHeight = _this$state.stateHeight;\n      var classes = classNames('embed-responsive-item', className);\n      var wrapperClasses = classNames(!(height || width) && 'embed-responsive', ratio ? \"embed-responsive-\".concat(ratio) : 'embed-responsive-16by9');\n      var iframeAttributes = {\n        src: src,\n        id: id || false,\n        frameBorder: '0',\n        target: '_parent',\n        allowFullScreen: allowFullScreen || true,\n        height: stateHeight || '100%',\n        name: name || undefined,\n        width: stateWidth || '100%',\n        onLoad: onLoad || undefined,\n        onMouseOver: onMouseOver || undefined,\n        onMouseOut: onMouseOut || undefined,\n        sandbox: sandbox || undefined,\n        style: style || undefined\n      };\n      iframeAttributes = returnAttributes(iframeAttributes);\n      return React.createElement(\"div\", {\n        \"data-test\": \"iframe\",\n        className: wrapperClasses\n      }, React.createElement(\"iframe\", _extends({\n        title: title,\n        className: classes\n      }, iframeAttributes)));\n    }\n  }]);\n\n  return Iframe;\n}(Component);\n\nIframe.propTypes = {\n  src: PropTypes.string.isRequired,\n  allowFullScreen: PropTypes.bool,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  onLoad: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  ratio: PropTypes.string,\n  sandbox: PropTypes.string,\n  styles: PropTypes.object,\n  title: PropTypes.string,\n  width: PropTypes.number\n};\n\nvar Input =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      innerValue: _this.props.value || _this.props.valueDefault,\n      isFocused: false,\n      isPristine: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inputElementRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      event.stopPropagation();\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        isFocused: false\n      });\n\n      onBlur && onBlur(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      event.stopPropagation();\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        isFocused: true\n      });\n\n      onFocus && onFocus(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      event.stopPropagation();\n      var _this$props = _this.props,\n          type = _this$props.type,\n          onChange = _this$props.onChange,\n          getValue = _this$props.getValue;\n\n      if (type !== 'checkbox' && type !== 'radio') {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      onChange && onChange(event);\n      getValue && getValue(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInput\", function (event) {\n      event.stopPropagation();\n      var _this$props2 = _this.props,\n          type = _this$props2.type,\n          onInput = _this$props2.onInput;\n\n      if (type !== 'checkbox' && type !== 'radio') {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      onInput && onInput(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFocus\", function () {\n      _this.inputElementRef.current.focus();\n    });\n\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // User wants to access the input ref, but we have to use it intenrally to.\n      // Return Ref instance to share ref with parent\n      // then user sets ref as a callback -> inputRef={ref => this.myInputRef = ref}\n      var inputRef = this.props.inputRef;\n      inputRef && inputRef(this.inputElementRef.current);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          background = _this$props3.background,\n          children = _this$props3.children,\n          className = _this$props3.className,\n          containerClass = _this$props3.containerClass,\n          disabled = _this$props3.disabled,\n          error = _this$props3.error,\n          filled = _this$props3.filled,\n          gap = _this$props3.gap,\n          getValue = _this$props3.getValue,\n          group = _this$props3.group,\n          hint = _this$props3.hint,\n          icon = _this$props3.icon,\n          iconBrand = _this$props3.iconBrand,\n          iconClass = _this$props3.iconClass,\n          iconLight = _this$props3.iconLight,\n          onIconClick = _this$props3.onIconClick,\n          onIconMouseEnter = _this$props3.onIconMouseEnter,\n          onIconMouseLeave = _this$props3.onIconMouseLeave,\n          iconRegular = _this$props3.iconRegular,\n          iconSize = _this$props3.iconSize,\n          id = _this$props3.id,\n          inputRef = _this$props3.inputRef,\n          noTag = _this$props3.noTag,\n          outline = _this$props3.outline,\n          label = _this$props3.label,\n          labelClass = _this$props3.labelClass,\n          labelId = _this$props3.labelId,\n          size = _this$props3.size,\n          success = _this$props3.success,\n          Tag = _this$props3.tag,\n          type = _this$props3.type,\n          validate = _this$props3.validate,\n          value = _this$props3.value,\n          valueDefault = _this$props3.valueDefault,\n          attributes = _objectWithoutProperties(_this$props3, [\"background\", \"children\", \"className\", \"containerClass\", \"disabled\", \"error\", \"filled\", \"gap\", \"getValue\", \"group\", \"hint\", \"icon\", \"iconBrand\", \"iconClass\", \"iconLight\", \"onIconClick\", \"onIconMouseEnter\", \"onIconMouseLeave\", \"iconRegular\", \"iconSize\", \"id\", \"inputRef\", \"noTag\", \"outline\", \"label\", \"labelClass\", \"labelId\", \"size\", \"success\", \"tag\", \"type\", \"validate\", \"value\", \"valueDefault\"]);\n\n      var _this$state = this.state,\n          innerValue = _this$state.innerValue,\n          isFocused = _this$state.isFocused;\n      var isNotEmpty = (!!innerValue || !!hint || isFocused || innerValue === 0) && type !== 'checkbox' && type !== 'radio';\n      var TagInput = '';\n      var formControlClass = '';\n\n      if (type === 'textarea') {\n        formControlClass = outline ? 'form-control' : 'md-textarea form-control';\n        TagInput = 'textarea';\n      } else {\n        formControlClass = 'form-control';\n        TagInput = 'input';\n        attributes.type = type;\n      }\n\n      attributes.disabled = disabled;\n      var classes = classNames(formControlClass, size ? \"form-control-\".concat(size) : false, validate ? 'validate' : false, filled ? 'filled-in' : false, gap ? 'with-gap' : false, type === 'checkbox' ? gap ? false : 'form-check-input' : false, type === 'radio' ? 'form-check-input' : false, className);\n      var containerClassFix = classNames(type === 'checkbox' || type === 'radio' ? typeof label === 'boolean' && label ? 'd-flex' : 'form-check' : 'md-form', group ? 'form-group' : false, size ? \"form-\".concat(size) : false, outline && 'md-outline', background && 'md-bg', containerClass);\n      var iconClassFix = classNames(isNotEmpty && isFocused ? 'active' : false, iconClass, 'prefix');\n      var labelClassFix = classNames(isNotEmpty ? 'active' : false, disabled ? 'disabled' : false, type === 'checkbox' ? 'form-check-label' : false, type === 'radio' ? 'form-check-label' : false, labelClass);\n\n      var renderFunction = function renderFunction() {\n        return React.createElement(React.Fragment, null, icon && React.createElement(Fa, {\n          icon: icon,\n          size: iconSize,\n          brand: iconBrand,\n          light: iconLight,\n          regular: iconRegular,\n          className: iconClassFix,\n          onClick: onIconClick || _this2.setFocus,\n          onMouseEnter: onIconMouseEnter,\n          onMouseLeave: onIconMouseLeave\n        }), React.createElement(TagInput, _extends({\n          \"data-test\": \"input\"\n        }, attributes, {\n          className: classes,\n          id: id,\n          placeholder: hint,\n          ref: _this2.inputElementRef,\n          value: innerValue,\n          onBlur: _this2.onBlur,\n          onChange: _this2.onChange,\n          onInput: _this2.onInput,\n          onFocus: _this2.onFocus\n        })), label && React.createElement(\"label\", {\n          className: labelClassFix,\n          htmlFor: id,\n          \"data-error\": error,\n          \"data-success\": success,\n          id: labelId,\n          onClick: _this2.setFocus\n        }, label), children);\n      };\n\n      return noTag ? renderFunction() : React.createElement(Tag, {\n        className: containerClassFix\n      }, renderFunction());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.value) {\n        return {\n          innerValue: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  containerClass: PropTypes.string,\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n  filled: PropTypes.bool,\n  gap: PropTypes.bool,\n  getValue: PropTypes.func,\n  group: PropTypes.bool,\n  hint: PropTypes.string,\n  icon: PropTypes.string,\n  iconBrand: PropTypes.bool,\n  iconClass: PropTypes.string,\n  iconLight: PropTypes.bool,\n  iconRegular: PropTypes.bool,\n  iconSize: PropTypes.string,\n  id: PropTypes.string,\n  inputRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object, PropTypes.bool]),\n  labelClass: PropTypes.string,\n  labelId: PropTypes.string,\n  noTag: PropTypes.bool,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onIconClick: PropTypes.func,\n  onIconMouseEnter: PropTypes.func,\n  onIconMouseLeave: PropTypes.func,\n  onInput: PropTypes.func,\n  outline: PropTypes.bool,\n  size: PropTypes.string,\n  success: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  type: PropTypes.string,\n  validate: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  valueDefault: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nInput.defaultProps = {\n  className: '',\n  containerClass: '',\n  disabled: false,\n  error: '',\n  filled: false,\n  gap: false,\n  group: false,\n  hint: undefined,\n  icon: '',\n  iconBrand: false,\n  iconClass: '',\n  iconLight: false,\n  onIconMouseEnter: function onIconMouseEnter() {},\n  onIconMouseLeave: function onIconMouseLeave() {},\n  iconRegular: false,\n  iconSize: undefined,\n  id: undefined,\n  noTag: false,\n  outline: false,\n  label: '',\n  labelClass: '',\n  labelId: '',\n  size: '',\n  success: '',\n  tag: 'div',\n  type: 'text',\n  validate: false,\n  valueDefault: ''\n};\n\nvar InputGroup = function InputGroup(_ref) {\n  var append = _ref.append,\n      appendClassName = _ref.appendClassName,\n      ariaLabel = _ref.ariaLabel,\n      children = _ref.children,\n      className = _ref.className,\n      containerClassName = _ref.containerClassName,\n      containerId = _ref.containerId,\n      hint = _ref.hint,\n      id = _ref.id,\n      inputs = _ref.inputs,\n      inputTag = _ref.inputTag,\n      label = _ref.label,\n      labelClassName = _ref.labelClassName,\n      material = _ref.material,\n      prepend = _ref.prepend,\n      prependClassName = _ref.prependClassName,\n      size = _ref.size,\n      Tag = _ref.tag,\n      textClassName = _ref.textClassName,\n      type = _ref.type,\n      value = _ref.value,\n      valueDefault = _ref.valueDefault,\n      getValue = _ref.getValue,\n      onChange = _ref.onChange,\n      attributes = _objectWithoutProperties(_ref, [\"append\", \"appendClassName\", \"ariaLabel\", \"children\", \"className\", \"containerClassName\", \"containerId\", \"hint\", \"id\", \"inputs\", \"inputTag\", \"label\", \"labelClassName\", \"material\", \"prepend\", \"prependClassName\", \"size\", \"tag\", \"textClassName\", \"type\", \"value\", \"valueDefault\", \"getValue\", \"onChange\"]);\n\n  var containerClassNames = classNames('input-group', material && 'md-form', size && \"input-group-\".concat(size), containerClassName);\n  var inputClassNames = classNames(className);\n  var prependClassNames = classNames('input-group-prepend', prependClassName);\n  var appendClassNames = classNames('input-group-append', appendClassName);\n  var textClassNames = classNames('input-group-text', material && 'md-addon', textClassName);\n\n  var handleChange = function handleChange(event) {\n    event.persist();\n    onChange && onChange(event);\n    getValue && getValue(event.target.value);\n  };\n\n  return React.createElement(React.Fragment, null, label && React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClassName\n  }, label), React.createElement(Tag, _extends({\n    \"data-test\": \"input-group\"\n  }, attributes, {\n    className: containerClassNames,\n    id: containerId\n  }), prepend && React.createElement(\"div\", {\n    className: prependClassNames\n  }, typeof prepend === 'string' ? React.createElement(\"span\", {\n    className: textClassNames\n  }, prepend) : prepend), inputs || React.createElement(Input, {\n    noTag: true,\n    type: type,\n    className: inputClassNames,\n    id: id,\n    value: value,\n    valueDefault: valueDefault,\n    hint: hint,\n    \"aria-label\": ariaLabel,\n    onChange: handleChange\n  }), append && React.createElement(\"div\", {\n    className: appendClassNames\n  }, typeof append === 'string' ? React.createElement(\"span\", {\n    className: textClassNames\n  }, append) : append), children));\n};\n\nInputGroup.propTypes = {\n  append: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  appendClassNames: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  containerClassName: PropTypes.string,\n  containerId: PropTypes.string,\n  getValue: PropTypes.func,\n  hint: PropTypes.string,\n  id: PropTypes.string,\n  inputs: PropTypes.node,\n  label: PropTypes.string,\n  labelClassName: PropTypes.string,\n  material: PropTypes.bool,\n  onChange: PropTypes.func,\n  prepend: PropTypes.any,\n  prependClassName: PropTypes.string,\n  size: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  textClassName: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  valueDefault: PropTypes.string\n};\nInputGroup.defaultProps = {\n  tag: 'div',\n  type: 'text'\n};\n\nvar InputNumeric = function InputNumeric(props) {\n  var onChangeHandler = function onChangeHandler(value) {\n    props.getValue && props.getValue(value);\n  };\n\n  var className = props.className,\n      getValue = props.getValue,\n      attributes = _objectWithoutProperties(props, [\"className\", \"getValue\"]);\n\n  var classes = classNames('form-control', className);\n  return React.createElement(NumericInput, _extends({\n    \"data-test\": \"input-numeric\"\n  }, attributes, {\n    onChange: onChangeHandler,\n    className: classes\n  }));\n};\n\nInputNumeric.propTypes = {\n  className: PropTypes.string,\n  getValue: PropTypes.func\n};\n\nvar Jumbotron = function Jumbotron(props) {\n  var className = props.className,\n      children = props.children,\n      fluid = props.fluid,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"fluid\"]);\n\n  var classes = classNames('jumbotron', fluid ? 'jumbotron-fluid' : false, className);\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"jumbotron\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nJumbotron.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  fluid: PropTypes.bool\n};\n\nvar Link = function Link(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      link = props.link,\n      to = props.to,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"className\", \"disabled\", \"link\", \"to\"]);\n\n  var classes = classNames('nav-link', disabled ? 'disabled' : 'Ripple-parent', active && 'active', className);\n\n  var handleClick = function handleClick(e) {\n    if (!disabled) {\n      e.stopPropagation();\n      var _cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      setCursorPos(_cursorPos);\n    }\n  };\n\n  return React.createElement(Link$1, _extends({\n    \"data-test\": \"link-router\",\n    className: classes,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick,\n    to: to\n  }, attributes), children, disabled ? false : React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nLink.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  to: PropTypes.string\n};\nLink.defaultProps = {\n  active: false,\n  className: '',\n  disabled: false\n};\n\nvar ListGroup = function ListGroup(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('list-group', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"list-group\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nListGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nListGroup.defaultProps = {\n  tag: 'ul'\n};\n\nvar ListGroupItem = function ListGroupItem(props) {\n  var _classNames;\n\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      hover = props.hover,\n      success = props.success,\n      info = props.info,\n      warning = props.warning,\n      danger = props.danger,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"className\", \"color\", \"disabled\", \"hover\", \"success\", \"info\", \"warning\", \"danger\", \"tag\"]);\n\n  var classes = classNames('list-group-item', className, (_classNames = {\n    active: active,\n    disabled: disabled\n  }, _defineProperty(_classNames, \"list-group-item-\".concat(color), ' color'), _defineProperty(_classNames, 'list-group-item-action', hover), _classNames));\n\n  if (attributes.href && Tag === 'li') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"list-group-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nListGroupItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark']),\n  danger: PropTypes.bool,\n  disabled: PropTypes.bool,\n  hover: PropTypes.bool,\n  info: PropTypes.bool,\n  success: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  warning: PropTypes.bool\n};\nListGroupItem.defaultProps = {\n  tag: 'li'\n};\n\nvar Media = function Media(props) {\n  var body = props.body,\n      bottom = props.bottom,\n      className = props.className,\n      heading = props.heading,\n      left = props.left,\n      list = props.list,\n      middle = props.middle,\n      object = props.object,\n      right = props.right,\n      round = props.round,\n      thumbnail = props.thumbnail,\n      figure = props.figure,\n      figImg = props.figImg,\n      figCap = props.figCap,\n      figCapRight = props.figCapRight,\n      figCapLeft = props.figCapLeft,\n      tag = props.tag,\n      top = props.top,\n      attributes = _objectWithoutProperties(props, [\"body\", \"bottom\", \"className\", \"heading\", \"left\", \"list\", \"middle\", \"object\", \"right\", \"round\", \"thumbnail\", \"figure\", \"figImg\", \"figCap\", \"figCapRight\", \"figCapLeft\", \"tag\", \"top\"]);\n\n  var defaultTag;\n\n  if (heading) {\n    defaultTag = 'h4';\n  } else if (left || right) {\n    defaultTag = 'a';\n  } else if (object || figImg) {\n    defaultTag = 'img';\n  } else if (list) {\n    defaultTag = 'ul';\n  } else if (figure) {\n    defaultTag = 'figure';\n  } else if (figCap || figCapRight || figCapLeft) {\n    defaultTag = 'figcaption';\n  } else {\n    defaultTag = 'div';\n  }\n\n  var Tag = tag || defaultTag;\n  var classes = classNames({\n    'media-body': body,\n    'mt-0': heading,\n    'media-left': left,\n    'media-right': right,\n    'align-self-start': top,\n    'align-self-center': middle,\n    'align-self-end': bottom,\n    'media-object': object,\n    'img-thumbnail': thumbnail,\n    'media-list': list,\n    figure: figure,\n    'figure-img': figImg,\n    'figure-caption text-center': figCap,\n    'figure-caption text-right': figCapRight,\n    'figure-caption text-left': figCapLeft,\n    'rounded-circle z-depth-1-half': round\n  }, !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list && !figCap && !figCapRight && !figCapRight && !figImg && !figure ? 'media' : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"media\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nMedia.propTypes = {\n  body: PropTypes.bool,\n  bottom: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  figCap: PropTypes.bool,\n  figCapLeft: PropTypes.bool,\n  figCapRight: PropTypes.bool,\n  figImg: PropTypes.bool,\n  figure: PropTypes.bool,\n  heading: PropTypes.bool,\n  left: PropTypes.bool,\n  list: PropTypes.bool,\n  middle: PropTypes.bool,\n  object: PropTypes.bool,\n  right: PropTypes.bool,\n  round: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  thumbnail: PropTypes.bool,\n  top: PropTypes.bool\n};\nvar css$9 = \".overflow-y-scroll {\\r\\n  overflow-y: scroll !important;\\r\\n}\\r\\n\";\nstyleInject(css$9);\n\nvar Modal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Modal, _Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: _this.props.isOpen || false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"modalContent\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      document.body.classList.add('modal-open');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      document.body.classList.remove('modal-open');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps, prevState) {\n      var _this$props = _this.props,\n          isOpen = _this$props.isOpen,\n          overflowScroll = _this$props.overflowScroll;\n      var overflowStatement = overflowScroll ? 'overflow-y-scroll' : 'overflow-hidden';\n\n      if (prevState.isOpen !== isOpen) {\n        _this.setState({\n          isOpen: isOpen\n        }, function () {\n          if (isOpen) {\n            document.body.classList.add(overflowStatement);\n          } else {\n            document.body.classList.remove(overflowStatement);\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnEntered\", function (type, node) {\n      if (type === 'backdrop' && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.add('show');\n      _this.props.autoFocus && node.focus();\n\n      if (type === 'modal') {\n        _this.props.showModal && _this.props.showModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExit\", function (type, node) {\n      if (type === 'backdrop' && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.remove('show');\n\n      if (type === 'modal') {\n        _this.props.hideModal && _this.props.hideModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExited\", function (node) {\n      _this.props.hiddenModal && _this.props.hiddenModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackdropClick\", function (e) {\n      console.log(e);\n\n      if (!_this.props.backdrop || e.target.closest('[role=\"dialog\"]') && !e.target.classList.contains('modal')) {\n        return;\n      }\n\n      if (!_this.modalContent.contains(e.target)) {\n        _this.props.toggle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      if (_this.props.keyboard && e.keyCode === 27) {\n        e.preventDefault();\n\n        _this.props.toggle();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _this$props2 = this.props,\n          animation = _this$props2.animation,\n          backdrop = _this$props2.backdrop,\n          backdropClassName = _this$props2.backdropClassName,\n          cascading = _this$props2.cascading,\n          centered = _this$props2.centered,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          contentClassName = _this$props2.contentClassName,\n          disableFocusTrap = _this$props2.disableFocusTrap,\n          fade = _this$props2.fade,\n          frame = _this$props2.frame,\n          fullHeight = _this$props2.fullHeight,\n          id = _this$props2.id,\n          inline = _this$props2.inline,\n          modalStyle = _this$props2.modalStyle,\n          position = _this$props2.position,\n          role = _this$props2.role,\n          side = _this$props2.side,\n          size = _this$props2.size,\n          tabIndex = _this$props2.tabIndex,\n          wrapClassName = _this$props2.wrapClassName;\n      var isOpen = this.state.isOpen;\n      var timeout = fade ? 300 : 0;\n      var modalDialogClasses = classNames((_classNames = {\n        'cascading-modal': cascading,\n        'modal-side': side,\n        'modal-full-height': fullHeight,\n        'modal-frame': frame,\n        'modal-dialog-centered': centered\n      }, _defineProperty(_classNames, \"modal-\".concat(size), size), _defineProperty(_classNames, \"modal-\".concat(position), position), _defineProperty(_classNames, \"modal-notify white-text modal-\".concat(modalStyle), modalStyle), _classNames), 'modal-dialog', className);\n      var wrapperClasses = classNames(_defineProperty({\n        modal: !inline,\n        fade: fade,\n        top: fade && !animation && !position\n      }, \"\".concat(animation), fade && animation), fade && position && position.split('-')[1], wrapClassName);\n      var backdropClasses = classNames('modal-backdrop', fade ? 'fade' : 'show', backdropClassName);\n      var contentClasses = classNames('modal-content', contentClassName);\n      var modalAttributes = returnAttributes({\n        style: {\n          display: 'block'\n        },\n        id: id,\n        tabIndex: tabIndex,\n        role: role,\n        'aria-hidden': 'true'\n      });\n      var modal = React.createElement(\"div\", _extends({\n        \"data-test\": \"modal\",\n        onKeyUp: this.handleEscape,\n        className: wrapperClasses\n      }, modalAttributes), React.createElement(\"div\", {\n        className: modalDialogClasses,\n        role: \"document\"\n      }, React.createElement(\"div\", {\n        ref: function ref(elem) {\n          return _this2.modalContent = elem;\n        },\n        className: contentClasses\n      }, children)));\n      return React.createElement(React.Fragment, null, backdrop && React.createElement(Transition, {\n        timeout: timeout,\n        \"in\": isOpen,\n        appear: isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered('backdrop', node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit('backdrop', node);\n        },\n        onExited: this.handleOnExited\n      }, React.createElement(\"div\", {\n        className: backdropClasses\n      })), React.createElement(Transition, {\n        timeout: timeout,\n        \"in\": isOpen,\n        appear: isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onMouseDown: function onMouseDown(e) {\n          return _this2.handleBackdropClick(e);\n        },\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered('modal', node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit('modal', node);\n        }\n      }, !disableFocusTrap ? React.createElement(FocusTrap, null, modal) : modal));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.defaultProps = {\n  autoFocus: true,\n  backdrop: true,\n  backdropTransitionTimeout: 150,\n  disableFocusTrap: true,\n  fade: true,\n  isOpen: false,\n  keyboard: true,\n  modalTransitionTimeout: 300,\n  overflowScroll: true,\n  role: 'dialog',\n  tabIndex: '-1',\n  zIndex: 1050\n};\nModal.propTypes = {\n  animation: PropTypes.string,\n  backdrop: PropTypes.bool,\n  backdropClassName: PropTypes.string,\n  cascading: PropTypes.bool,\n  centered: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  contentClassName: PropTypes.string,\n  disableFocusTrap: PropTypes.bool,\n  fade: PropTypes.bool,\n  frame: PropTypes.bool,\n  fullHeight: PropTypes.bool,\n  hiddenModal: PropTypes.func,\n  hideModal: PropTypes.func,\n  id: PropTypes.string,\n  keyboard: PropTypes.bool,\n  modalClassName: PropTypes.string,\n  modalStyle: PropTypes.string,\n  overflowScroll: PropTypes.bool,\n  position: PropTypes.string,\n  role: PropTypes.string,\n  showModal: PropTypes.func,\n  side: PropTypes.bool,\n  size: PropTypes.string,\n  tabIndex: PropTypes.string,\n  wrapClassName: PropTypes.string\n};\n\nvar ModalBody = function ModalBody(props) {\n  var className = props.className,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\"]);\n\n  var classes = classNames('modal-body', className);\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-body\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nModalBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nvar ModalFooter = function ModalFooter(props) {\n  var className = props.className,\n      children = props.children,\n      center = props.center,\n      start = props.start,\n      end = props.end,\n      around = props.around,\n      between = props.between,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"center\", \"start\", \"end\", \"around\", \"between\"]);\n\n  var classes = classNames('modal-footer', className, {\n    'justify-content-start': start,\n    'justify-content-end': end,\n    'justify-content-center': center,\n    'justify-content-between': between,\n    'justify-content-around': around\n  });\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-footer\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nvar ModalHeader = function ModalHeader(props) {\n  var closeButton;\n\n  var className = props.className,\n      children = props.children,\n      toggle = props.toggle,\n      Tag = props.tag,\n      closeAriaLabel = props.closeAriaLabel,\n      titleClass = props.titleClass,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"toggle\", \"tag\", \"closeAriaLabel\", \"titleClass\"]);\n\n  var classes = classNames('modal-header', className);\n  var titleClasses = classNames('modal-title', titleClass);\n\n  if (toggle) {\n    closeButton = React.createElement(\"button\", {\n      type: \"button\",\n      onClick: toggle,\n      className: \"close\",\n      \"aria-label\": closeAriaLabel\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, String.fromCharCode(215)));\n  }\n\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-header\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(Tag, {\n    className: titleClasses\n  }, children), closeButton);\n};\n\nModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  toggle: PropTypes.func\n};\nModalHeader.defaultProps = {\n  tag: 'h4',\n  closeAriaLabel: 'Close'\n};\n\nvar Nav = function Nav(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      tabs = props.tabs,\n      color = props.color,\n      classicTabs = props.classicTabs,\n      pills = props.pills,\n      header = props.header,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\", \"tabs\", \"color\", \"classicTabs\", \"pills\", \"header\"]);\n\n  var classes = classNames('nav', tabs && 'md-tabs', pills && 'md-pills', header && 'nav-pills card-header-pills', color && !tabs && !classicTabs && !pills ? color : false, pills && color ? \"pills-\".concat(color) : false, (tabs || classicTabs) && color ? \"tabs-\".concat(color) : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"nav\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNav.propTypes = {\n  children: PropTypes.node,\n  classicTabs: PropTypes.bool,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  header: PropTypes.bool,\n  pills: PropTypes.bool,\n  tabs: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nNav.defaultProps = {\n  tag: 'ul',\n  classicTabs: false,\n  pills: false,\n  tabs: false,\n  header: false\n};\n\nvar getExpandClass = function getExpandClass(expand) {\n  if (expand === false) {\n    return false;\n  }\n\n  if (expand === true || expand === 'xs') {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\".concat(expand);\n};\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Navbar, _Component);\n\n  function Navbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Navbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Navbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isCollapsed: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      var scrollingNavbarOffset = _this.props.scrollingNavbarOffset || 50;\n\n      if (window.pageYOffset > scrollingNavbarOffset) {\n        _this.setState({\n          isCollapsed: true\n        });\n      } else {\n        _this.setState({\n          isCollapsed: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Navbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          scrolling = _this$props.scrolling,\n          scrollingNavbarOffset = _this$props.scrollingNavbarOffset;\n\n      if (scrolling || scrollingNavbarOffset) {\n        window.addEventListener('scroll', this.handleScroll);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n          scrolling = _this$props2.scrolling,\n          scrollingNavbarOffset = _this$props2.scrollingNavbarOffset;\n\n      if (scrolling || scrollingNavbarOffset) {\n        window.removeEventListener('scroll', this.handleScroll);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props3 = this.props,\n          expand = _this$props3.expand,\n          light = _this$props3.light,\n          dark = _this$props3.dark,\n          sticky = _this$props3.sticky,\n          fixed = _this$props3.fixed,\n          scrolling = _this$props3.scrolling,\n          color = _this$props3.color,\n          className = _this$props3.className,\n          scrollingNavbarOffset = _this$props3.scrollingNavbarOffset,\n          Tag = _this$props3.tag,\n          _double = _this$props3[\"double\"],\n          transparent = _this$props3.transparent,\n          attributes = _objectWithoutProperties(_this$props3, [\"expand\", \"light\", \"dark\", \"sticky\", \"fixed\", \"scrolling\", \"color\", \"className\", \"scrollingNavbarOffset\", \"tag\", \"double\", \"transparent\"]);\n\n      var isCollapsed = this.state.isCollapsed;\n      var classes = classNames((_classNames = {\n        'navbar-light': light,\n        'navbar-dark': dark\n      }, _defineProperty(_classNames, \"sticky-\".concat(sticky), sticky), _defineProperty(_classNames, \"fixed-\".concat(fixed), fixed), _defineProperty(_classNames, 'scrolling-navbar', scrolling || scrollingNavbarOffset), _defineProperty(_classNames, 'double-nav', _double), _defineProperty(_classNames, 'top-nav-collapse', isCollapsed), _defineProperty(_classNames, \"\".concat(color), color && transparent ? isCollapsed : color), _classNames), 'navbar', getExpandClass(expand), className);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"navbar\"\n      }, attributes, {\n        className: classes,\n        role: \"navigation\"\n      }));\n    }\n  }]);\n\n  return Navbar;\n}(Component);\n\nNavbar.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  dark: PropTypes.bool,\n  \"double\": PropTypes.bool,\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  fixed: PropTypes.string,\n  light: PropTypes.bool,\n  scrolling: PropTypes.bool,\n  scrollingNavbarOffset: PropTypes.number,\n  sticky: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transparent: PropTypes.bool\n};\nNavbar.defaultProps = {\n  tag: 'nav',\n  expand: false,\n  scrolling: false\n};\n\nvar NavbarBrand = function NavbarBrand(_ref) {\n  var className = _ref.className,\n      href = _ref.href,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"href\"]);\n\n  var classes = classNames('navbar-brand', className);\n\n  var navbarBrand = function navbarBrand() {\n    if (href) {\n      return React.createElement(NavLink$1, _extends({\n        \"data-test\": \"navbar-brand\",\n        to: href\n      }, attributes, {\n        className: classes\n      }));\n    }\n\n    return React.createElement(\"div\", _extends({\n      \"data-test\": \"navbar-brand\"\n    }, attributes, {\n      className: classes\n    }));\n  };\n\n  return navbarBrand();\n};\n\nNavbarBrand.propTypes = {\n  className: PropTypes.string,\n  href: PropTypes.string\n};\n\nvar NavbarNav = function NavbarNav(props) {\n  var children = props.children,\n      className = props.className,\n      right = props.right,\n      left = props.left,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"right\", \"left\", \"tag\"]);\n\n  var classes = classNames('navbar-nav', right ? 'ml-auto' : left ? 'mr-auto' : 'justify-content-around w-100', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"navbar-nav\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNavbarNav.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  left: PropTypes.bool,\n  right: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nNavbarNav.defaultProps = {\n  tag: 'ul'\n};\n\nvar NavbarToggler = function NavbarToggler(props) {\n  var right = props.right,\n      left = props.left,\n      children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      image = props.image,\n      attributes = _objectWithoutProperties(props, [\"right\", \"left\", \"children\", \"className\", \"tag\", \"image\"]);\n\n  var classes = classNames({\n    'navbar-toggler-right': right,\n    'navbar-toggler-left': left\n  }, 'navbar-toggler', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"navbar-toggler\"\n  }, attributes, {\n    className: classes\n  }), children || (image ? React.createElement(\"span\", {\n    className: \"navbar-toggler-icon\",\n    style: {\n      backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n    }\n  }) : React.createElement(\"span\", {\n    className: \"navbar-toggler-icon\"\n  })));\n};\n\nNavbarToggler.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  image: PropTypes.string,\n  left: PropTypes.bool,\n  right: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  type: PropTypes.string\n};\nNavbarToggler.defaultProps = {\n  tag: 'button',\n  type: 'button'\n};\n\nvar NavItem = function NavItem(props) {\n  var children = props.children,\n      className = props.className,\n      active = props.active,\n      text = props.text,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"active\", \"text\", \"tag\"]);\n\n  var classes = classNames('nav-item', active && 'active', text && 'navbar-text', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"nav-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNavItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nNavItem.defaultProps = {\n  tag: 'li'\n};\n\nvar NavLink = function NavLink(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      active = props.active,\n      to = props.to,\n      link = props.link,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"active\", \"to\", \"link\"]);\n\n  var classes = classNames('nav-link', disabled ? 'disabled' : 'Ripple-parent', active && 'active', className);\n\n  var handleClick = function handleClick(e) {\n    if (!disabled) {\n      e.stopPropagation(); // Waves - Get Cursor Position\n\n      var _cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      setCursorPos(_cursorPos);\n    }\n  };\n\n  var Tag = link ? Link : NavLink$1;\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"nav-link\",\n    className: classes,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick,\n    to: to\n  }, attributes), children, disabled ? false : React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nNavLink.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  link: PropTypes.bool,\n  to: PropTypes.string\n};\nNavLink.defaultProps = {\n  active: false,\n  className: '',\n  disabled: false,\n  link: false\n};\n\nvar Notification =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Notification, _React$Component);\n\n  function Notification() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Notification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      componentState: _this.props.show ? 'show' : 'hide'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hide\", function () {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (_typeof(time) === 'object') {\n        time = 0;\n      }\n\n      setTimeout(function () {\n        _this.setState({\n          componentState: ''\n        }, function () {\n          setTimeout(function () {\n            _this.setState({\n              componentState: 'hide'\n            });\n          }, 150);\n        });\n      }, time);\n    });\n\n    return _this;\n  }\n\n  _createClass(Notification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var autohide = this.props.autohide;\n\n      if (autohide > 0) {\n        this.hide(autohide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          className = _this$props.className,\n          show = _this$props.show,\n          fade = _this$props.fade,\n          message = _this$props.message,\n          bodyClassName = _this$props.bodyClassName,\n          icon = _this$props.icon,\n          iconClassName = _this$props.iconClassName,\n          title = _this$props.title,\n          titleClassName = _this$props.titleClassName,\n          text = _this$props.text,\n          closeClassName = _this$props.closeClassName,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"className\", \"show\", \"fade\", \"message\", \"bodyClassName\", \"icon\", \"iconClassName\", \"title\", \"titleClassName\", \"text\", \"closeClassName\"]);\n\n      var componentState = this.state.componentState;\n      var classes = classNames('toast', fade && 'fade', componentState, className);\n      var headerClasses = classNames('toast-header', titleClassName);\n      var iconClassNames = classNames('mr-2', iconClassName);\n      var bodyClasses = classNames('toast-body', bodyClassName);\n      var closeClasses = classNames('ml-2', 'mb-1', closeClassName);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"notification\"\n      }, attributes, {\n        className: classes\n      }), React.createElement(\"div\", {\n        className: headerClasses\n      }, React.createElement(Fa, {\n        icon: icon,\n        className: iconClassNames,\n        size: \"lg\"\n      }), React.createElement(\"strong\", {\n        className: \"mr-auto\"\n      }, title), React.createElement(\"small\", null, text), React.createElement(MDBCloseIcon, {\n        className: closeClasses,\n        onClick: this.hide\n      })), React.createElement(\"div\", {\n        className: bodyClasses\n      }, message));\n    }\n  }]);\n\n  return Notification;\n}(React.Component);\n\nNotification.propTypes = {\n  autohide: PropTypes.number,\n  bodyClassName: PropTypes.string,\n  bodyColor: PropTypes.string,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  fade: PropTypes.bool,\n  iconClassName: PropTypes.string,\n  message: PropTypes.string,\n  show: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  text: PropTypes.string,\n  title: PropTypes.string,\n  titleClassName: PropTypes.string,\n  titleColor: PropTypes.string\n};\nNotification.defaultProps = {\n  icon: 'square',\n  tag: 'div',\n  closeClassName: 'text-dark'\n};\nvar css$a = \".popover {\\r\\n  width: auto;\\r\\n  background-color: white;\\r\\n  color: #97999b;\\r\\n  text-align: center;\\r\\n  display: inline-block;\\r\\n  border-radius: 3px;\\r\\n  position: absolute;\\r\\n  font-size: 0.83em;\\r\\n  font-weight: normal;\\r\\n  border: 1px rgb(0, 0, 0) solid;\\r\\n  /* z-index: 200000; */\\r\\n  z-index: 10;\\r\\n  /* max-width: initial; */\\r\\n  max-width: 274px;\\r\\n  text-align: start;\\r\\n  background-color: #fff;\\r\\n  border: 1px solid rgba(0, 0, 0, 0.2);\\r\\n  border-radius: 0.3rem;\\r\\n  opacity: 0;\\r\\n  transition: opacity 0.3s, visibility 0.3s;\\r\\n  visibility: hidden;\\r\\n}\\r\\n\\r\\n.show.popover {\\r\\n  z-index: 999;\\r\\n  opacity: 1;\\r\\n  visibility: visible;\\r\\n}\\r\\n\\r\\n.popover-body {\\r\\n  color: #6c6e71;\\r\\n}\\r\\n\\r\\n.popover .popover_arrow {\\r\\n  width: 0;\\r\\n  height: 0;\\r\\n  border-style: solid;\\r\\n  position: absolute;\\r\\n  margin: 6px;\\r\\n  color: transparent;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"top\\\"] {\\r\\n  margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"top\\\"] .popover_arrow {\\r\\n  border-width: 8px 8px 0 8px;\\r\\n  border-color: #d6d6d6 transparent transparent transparent;\\r\\n  bottom: -8px;\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"top\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  left: -8px;\\r\\n  bottom: 1.5px;\\r\\n  border: solid;\\r\\n  border-width: 8px 8px 0 8px;\\r\\n  border-color: white transparent transparent transparent;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"bottom\\\"] {\\r\\n  margin-top: 15px;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"bottom\\\"] .popover_arrow {\\r\\n  border-width: 0 8px 8px 8px;\\r\\n  border-color: transparent transparent #d6d6d6 transparent;\\r\\n  top: -8px;\\r\\n  margin-top: 0;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"bottom\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  left: -8px;\\r\\n  top: 1.45px;\\r\\n  border: solid;\\r\\n  border-width: 0 8px 8px 8px;\\r\\n  border-color: transparent transparent white transparent;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"right\\\"] {\\r\\n  margin-left: 15px;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"right\\\"] .popover_arrow {\\r\\n  border-width: 8px 8px 8px 0;\\r\\n  border-color: transparent #d6d6d6 transparent transparent;\\r\\n  left: -8px;\\r\\n  margin-left: 0;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"right\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  top: -8px;\\r\\n  left: 1.45px;\\r\\n  border: solid;\\r\\n  border-width: 8px 8px 8px 0;\\r\\n  border-color: transparent white transparent transparent;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"left\\\"] {\\r\\n  margin-right: 15px;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"left\\\"] .popover_arrow {\\r\\n  border-width: 8px 0 8px 8px;\\r\\n  border-color: transparent transparent transparent #d6d6d6;\\r\\n  right: -8px;\\r\\n  margin-right: 0;\\r\\n}\\r\\n\\r\\n.popover[x-placement^=\\\"left\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  top: -8px;\\r\\n  right: 1.45px;\\r\\n  border: solid;\\r\\n  border-width: 8px 0 8px 8px;\\r\\n  border-color: transparent transparent transparent white;\\r\\n}\\r\\n\\r\\n.tooltip {\\r\\n  width: auto;\\r\\n  background-color: black;\\r\\n  color: white;\\r\\n  text-align: center;\\r\\n  display: inline-block;\\r\\n  border-radius: 3px;\\r\\n  position: absolute;\\r\\n  /* font-size: 0.83em; */\\r\\n  font-weight: normal;\\r\\n  border: 1px rgb(0, 0, 0) solid;\\r\\n  /* z-index: 200000; */\\r\\n  z-index: 15;\\r\\n  /* max-width: initial; */\\r\\n  max-width: 274px;\\r\\n  text-align: start;\\r\\n  border: 1px solid rgba(0, 0, 0, 0.2);\\r\\n  border-radius: 0.3rem;\\r\\n  opacity: 0;\\r\\n  transition: opacity 0.3s, visibility 0.3s;\\r\\n  visibility: hidden;\\r\\n}\\r\\n\\r\\n.tooltip-inner {\\r\\n  display: block;\\r\\n}\\r\\n\\r\\n.show.tooltip {\\r\\n  z-index: 999;\\r\\n\\r\\n  opacity: 1;\\r\\n  visibility: visible;\\r\\n}\\r\\n\\r\\n.tooltip .popover_arrow {\\r\\n  width: 0;\\r\\n  height: 0;\\r\\n  border-style: solid;\\r\\n  position: absolute;\\r\\n  margin: 6px;\\r\\n  color: transparent;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"top\\\"],\\r\\n.show[x-placement^=\\\"top\\\"]:not(.tooltip) {\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"top\\\"] .popover_arrow {\\r\\n  border-width: 6px 6px 0 6px;\\r\\n  border-color: #131313 transparent transparent transparent;\\r\\n  bottom: -6px;\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"top\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  left: -6px;\\r\\n  bottom: 1.5px;\\r\\n  border: solid;\\r\\n  border-width: 6px 6px 0 6px;\\r\\n  border-color: black transparent transparent transparent;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"bottom\\\"],\\r\\n.show[x-placement^=\\\"bottom\\\"]:not(.tooltip) {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"bottom\\\"] .popover_arrow {\\r\\n  border-width: 0 6px 6px 6px;\\r\\n  border-color: transparent transparent #131313 transparent;\\r\\n  top: -6px;\\r\\n  margin-top: 0;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"bottom\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  left: -6px;\\r\\n  top: 1.45px;\\r\\n  border: solid;\\r\\n  border-width: 0 6px 6px 6px;\\r\\n  border-color: transparent transparent black transparent;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"right\\\"],\\r\\n.show[x-placement^=\\\"right\\\"]:not(.tooltip) {\\r\\n  margin-left: 5px;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"right\\\"] .popover_arrow {\\r\\n  border-width: 6px 6px 6px 0;\\r\\n  border-color: transparent #131313 transparent transparent;\\r\\n  left: -6px;\\r\\n  margin-left: 0;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"right\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  top: -6px;\\r\\n  left: 1.45px;\\r\\n  border: solid;\\r\\n  border-width: 6px 6px 6px 0;\\r\\n  border-color: transparent black transparent transparent;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"left\\\"],\\r\\n.show[x-placement^=\\\"left\\\"]:not(.tooltip) {\\r\\n  margin-right: 5px;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"left\\\"] .popover_arrow {\\r\\n  border-width: 6px 0 6px 6px;\\r\\n  border-color: transparent transparent transparent #131313;\\r\\n  right: -6px;\\r\\n  margin-right: 0;\\r\\n}\\r\\n\\r\\n.tooltip[x-placement^=\\\"left\\\"] .popover_arrow::before {\\r\\n  content: \\\"\\\";\\r\\n  display: inline-block;\\r\\n  position: absolute;\\r\\n  top: -6px;\\r\\n  right: 1.45px;\\r\\n  border: solid;\\r\\n  border-width: 6px 0 6px 6px;\\r\\n  border-color: transparent transparent transparent black;\\r\\n}\\r\\n\";\nstyleInject(css$a);\n\nvar Popover =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Popover, _React$Component);\n\n  function Popover() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Popover);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Popover)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      popperJS: null,\n      visible: _this.props.isVisible,\n      showPopper: _this.props.isVisible\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"popoverWrapperRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"referenceElm\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"setPopperJS\", function () {\n      var _this$state = _this.state,\n          showPopper = _this$state.showPopper,\n          popperJS = _this$state.popperJS;\n\n      if (showPopper) {\n        popperJS ? popperJS.scheduleUpdate() : _this.createPopper();\n        setTimeout(function () {\n          return clearInterval(_this.timer);\n        }, 1000);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createPopper\", function () {\n      var _this$props = _this.props,\n          placement = _this$props.placement,\n          modifiers = _this$props.modifiers;\n      var popperJS = _this.state.popperJS;\n\n      if (_this.referenceElm && _this.popoverWrapperRef) {\n        _this.setState({\n          popperJS: new Popper$1(_this.referenceElm, _this.popoverWrapperRef, _objectSpread2({\n            placement: placement\n          }, modifiers), function () {\n            return setTimeout(function () {\n              popperJS.scheduleUpdate();\n            }, 10);\n          })\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"doToggle\", function (toggler) {\n      _this.setState({\n        showPopper: toggler && true\n      }, function () {\n        var _this$state2 = _this.state,\n            showPopper = _this$state2.showPopper,\n            visible = _this$state2.visible;\n\n        if (showPopper) {\n          _this.setState({\n            visible: typeof toggler !== 'undefined' ? toggler : !visible\n          }, function () {\n            _this.createPopper();\n\n            _this.state.popperJS.scheduleUpdate();\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      var target = e.target;\n      var showPopper = _this.state.showPopper;\n\n      if (_this.popoverWrapperRef && showPopper) {\n        if (_this.popoverWrapperRef.contains(target) || _this.referenceElm.contains(target) || target === _this.referenceElm) {\n          return;\n        }\n\n        _this.doToggle(false);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Popover, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var showPopper = this.state.showPopper;\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          onChange = _this$props2.onChange;\n      this.setPopperJS();\n\n      if (prevProps.isVisible !== isVisible && isVisible !== showPopper && showPopper !== prevProps.showPopper) {\n        this.setState({\n          showPopper: isVisible\n        });\n      }\n\n      if (onChange && showPopper !== prevState.showPopper) {\n        onChange(showPopper);\n      }\n\n      if (showPopper && prevState.showPopper !== showPopper) {\n        this.createPopper();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.timer = setInterval(function () {\n        return _this2.setPopperJS();\n      }, 3);\n      document.addEventListener('click', this.handleClick);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          className = _this$props3.className,\n          clickable = _this$props3.clickable,\n          domElement = _this$props3.domElement,\n          email = _this$props3.email,\n          id = _this$props3.id,\n          isVisible = _this$props3.isVisible,\n          material = _this$props3.material,\n          modifiers = _this$props3.modifiers,\n          placement = _this$props3.placement,\n          popover = _this$props3.popover,\n          sm = _this$props3.sm,\n          style = _this$props3.style,\n          onChange = _this$props3.onChange,\n          Tag = _this$props3.tag,\n          attributes = _objectWithoutProperties(_this$props3, [\"children\", \"className\", \"clickable\", \"domElement\", \"email\", \"id\", \"isVisible\", \"material\", \"modifiers\", \"placement\", \"popover\", \"sm\", \"style\", \"onChange\", \"tag\"]);\n\n      var _this$state3 = this.state,\n          visible = _this$state3.visible,\n          showPopper = _this$state3.showPopper;\n      var Popper = children[1];\n      var Wrapper = children[0];\n      var classes = classNames(visible && 'show', popover ? 'popover' : !material && !email && 'tooltip px-2', className);\n      var popperClasses = classNames((material || email) && 'tooltip-inner', material && (sm ? 'md-inner' : 'md-inner-main'), email && (sm ? 'md-inner' : 'md-inner-email'));\n      return React.createElement(React.Fragment, null, !domElement ? React.createElement(Wrapper.type, _extends({}, Wrapper.props, {\n        onMouseEnter: function onMouseEnter() {\n          return !clickable && _this3.doToggle(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return !clickable && !popover && setTimeout(function () {\n            return _this3.doToggle(false);\n          }, 0);\n        },\n        onTouchStart: function onTouchStart() {\n          return !clickable && _this3.doToggle(true);\n        },\n        onTouchEnd: function onTouchEnd() {\n          return !clickable && !popover && _this3.doToggle(false);\n        },\n        onMouseDown: function onMouseDown() {\n          clickable && _this3.doToggle(!showPopper);\n          setTimeout(function () {\n            return _this3.setPopperJS();\n          }, 100);\n        },\n        onMouseUp: function onMouseUp() {\n          return setTimeout(function () {\n            return _this3.setPopperJS();\n          }, 0);\n        },\n        innerRef: function innerRef(ref) {\n          return _this3.referenceElm = ref;\n        },\n        \"data-popper\": id\n      })) : React.createElement(Wrapper.type, _extends({}, Wrapper.props, {\n        onMouseEnter: function onMouseEnter() {\n          return !clickable && _this3.doToggle(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return !clickable && !popover && setTimeout(function () {\n            return _this3.doToggle(false);\n          }, 0);\n        },\n        onTouchStart: function onTouchStart() {\n          return !clickable && _this3.doToggle(true);\n        },\n        onTouchEnd: function onTouchEnd() {\n          return !clickable && !popover && _this3.doToggle(false);\n        },\n        onMouseDown: function onMouseDown() {\n          return clickable && _this3.doToggle(!showPopper);\n        },\n        onMouseUp: function onMouseUp() {\n          return setTimeout(function () {\n            return _this3.setPopperJS();\n          }, 0);\n        },\n        ref: function ref(_ref) {\n          return _this3.referenceElm = _ref;\n        },\n        \"data-popper\": id\n      })), showPopper && React.createElement(Tag, _extends({\n        ref: function ref(_ref2) {\n          return _this3.popoverWrapperRef = _ref2;\n        },\n        className: classes,\n        \"data-popper\": id\n      }, attributes), React.createElement(Popper.type, {\n        className: classNames(popperClasses, Popper.props.className)\n      }, Popper.props.children), React.createElement(\"span\", {\n        \"x-arrow\": \"\",\n        className: classNames('popover_arrow')\n      })));\n    }\n  }]);\n\n  return Popover;\n}(React.Component);\n\nPopover.propTypes = {\n  children: PropTypes.node,\n  clickable: PropTypes.bool,\n  domElement: PropTypes.bool,\n  email: PropTypes.bool,\n  id: PropTypes.string,\n  isVisible: PropTypes.bool,\n  material: PropTypes.bool,\n  modifiers: PropTypes.object,\n  placement: PropTypes.string,\n  popover: PropTypes.bool,\n  sm: PropTypes.bool,\n  style: PropTypes.objectOf(PropTypes.string),\n  tag: PropTypes.string\n};\nPopover.defaultProps = {\n  clickable: false,\n  domElement: false,\n  id: 'popper',\n  isVisible: false,\n  placement: 'top',\n  popover: false,\n  style: {\n    display: 'inline-block'\n  },\n  tag: 'div'\n};\n\nvar PopoverBody = function PopoverBody(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      className = _ref.className,\n      Tag = _ref.tag;\n  var classes = classNames('popover-body', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"popover-body\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPopoverBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPopoverBody.defaultProps = {\n  tag: 'div'\n};\n\nvar PopoverHeader = function PopoverHeader(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      className = _ref.className,\n      Tag = _ref.tag;\n  var classes = classNames('popover-header', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"popover-header\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPopoverHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPopoverHeader.defaultProps = {\n  className: '',\n  tag: 'h3'\n};\n\nvar Progress = function Progress(_ref) {\n  var animated = _ref.animated,\n      barClassName = _ref.barClassName,\n      children = _ref.children,\n      className = _ref.className,\n      color = _ref.color,\n      height = _ref.height,\n      material = _ref.material,\n      max = _ref.max,\n      min = _ref.min,\n      preloader = _ref.preloader,\n      striped = _ref.striped,\n      value = _ref.value,\n      wrapperStyle = _ref.wrapperStyle,\n      attributes = _objectWithoutProperties(_ref, [\"animated\", \"barClassName\", \"children\", \"className\", \"color\", \"height\", \"material\", \"max\", \"min\", \"preloader\", \"striped\", \"value\", \"wrapperStyle\"]);\n\n  var percent = (value - min) / (max - min) * 100;\n  var progressClasses = classNames('progress', material && 'md-progress', preloader && \"\".concat(color ? \"\".concat(color, \"-color\") : 'primary-color', \"-dark\"), className);\n  var progressBarClasses = classNames(preloader ? 'indeterminate' : 'progress-bar', barClassName || null, animated ? 'progress-bar-animated' : null, color ? \"bg-\".concat(color) : null, striped || animated ? 'progress-bar-striped' : null);\n  var computedHeight = height || children && '1rem';\n\n  var computedWrapperStyle = _objectSpread2({}, wrapperStyle, {\n    height: computedHeight\n  });\n\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"progress\"\n  }, attributes, {\n    className: progressClasses,\n    style: computedWrapperStyle\n  }), React.createElement(\"div\", {\n    className: progressBarClasses,\n    style: {\n      width: \"\".concat(percent, \"%\"),\n      height: computedHeight\n    },\n    role: \"progressbar\",\n    \"aria-valuenow\": value,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }, children));\n};\n\nProgress.propTypes = {\n  animated: PropTypes.bool,\n  barClassName: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  height: PropTypes.string,\n  material: PropTypes.bool,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  preloader: PropTypes.bool,\n  striped: PropTypes.bool,\n  value: PropTypes.number,\n  wrapperStyle: PropTypes.object\n};\nProgress.defaultProps = {\n  animated: false,\n  barClassName: '',\n  className: '',\n  color: 'indigo',\n  height: '',\n  material: false,\n  max: 100,\n  min: 0,\n  preloader: false,\n  striped: false,\n  value: 0,\n  wrapperStyle: {}\n};\n\nvar Rating = function Rating(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hovered = _useState4[0],\n      setHovered = _useState4[1];\n\n  var _useState5 = useState({\n    title: '',\n    index: null\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      choosed = _useState6[0],\n      setChoosed = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      feedbackValue = _useState8[0],\n      setFeedbackValue = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      openedForm = _useState10[0],\n      setOpenedForm = _useState10[1];\n\n  var onDocumentClick = function onDocumentClick(e) {\n    if (!e.target.closest('.popover')) {\n      setOpenedForm(null);\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('click', onDocumentClick);\n    return function () {\n      return window.removeEventListener('click', onDocumentClick);\n    };\n  }, []);\n  useEffect(function () {\n    setData(props.data); // eslint-disable-next-line react/destructuring-assignment\n  }, [props.data]);\n  useEffect(function () {\n    var choosedIndex = data.findIndex(function (item) {\n      return item.choosed;\n    });\n\n    if (choosedIndex !== -1) {\n      setChoosed({\n        title: data[choosedIndex].tooltip,\n        index: choosedIndex\n      });\n    }\n  }, [data]);\n  useEffect(function () {\n    if (props.getValue) {\n      var title = choosed.title,\n          index = choosed.index;\n      index = index !== null ? index + 1 : index;\n      props.getValue({\n        title: title,\n        value: index\n      });\n    }\n  }, [choosed, props]);\n\n  var handleMouseEnter = function handleMouseEnter(_, index) {\n    setHovered(index);\n  };\n\n  var handleMouseLeave = function handleMouseLeave() {\n    setHovered(null);\n  };\n\n  var handleClick = function handleClick(title, index, e) {\n    e.stopPropagation();\n\n    if (title === choosed.title && index === choosed.index) {\n      setChoosed({\n        title: '',\n        index: null\n      });\n      feedback && setOpenedForm(null);\n    } else {\n      setChoosed({\n        title: title,\n        index: index\n      });\n      feedback && setTimeout(function () {\n        setOpenedForm(index);\n      }, 1);\n    }\n  };\n\n  var onCloseHanlder = function onCloseHanlder() {\n    setFeedbackValue('');\n    setOpenedForm(null);\n  };\n\n  var feedbackValueHandler = function feedbackValueHandler(e) {\n    setFeedbackValue(e.target.value);\n  };\n\n  var Tag = props.tag,\n      containerClassName = props.containerClassName,\n      iconClassName = props.iconClassName,\n      iconFaces = props.iconFaces,\n      iconSize = props.iconSize,\n      iconRegular = props.iconRegular,\n      fillClassName = props.fillClassName,\n      fillColors = props.fillColors,\n      getValue = props.getValue,\n      feedback = props.feedback,\n      submitHandler = props.submitHandler,\n      commonAttributes = _objectWithoutProperties(props, [\"tag\", \"containerClassName\", \"iconClassName\", \"iconFaces\", \"iconSize\", \"iconRegular\", \"fillClassName\", \"fillColors\", \"getValue\", \"feedback\", \"submitHandler\"]);\n\n  var containerClasses = classNames('mdb-rating', 'd-flex', 'justify-content-start', 'align-items-center', containerClassName);\n  var renderedIcons = [];\n\n  if (data.length) {\n    renderedIcons = data.map(function (_ref, index) {\n      var _ref$icon = _ref.icon,\n          icon = _ref$icon === void 0 ? 'star' : _ref$icon,\n          tooltip = _ref.tooltip,\n          far = _ref.far,\n          size = _ref.size,\n          _ = _ref.choosed,\n          itemAttributes = _objectWithoutProperties(_ref, [\"icon\", \"tooltip\", \"far\", \"size\", \"choosed\"]);\n\n      var isChoosed = choosed.index !== null;\n      var isHovered = hovered !== null;\n      var isFormOpened = openedForm !== null;\n      var isFormActive = feedback && isFormOpened && openedForm === index;\n      var toFill = false;\n\n      if (isChoosed) {\n        toFill = index <= choosed.index;\n\n        if (isHovered && hovered > choosed.index) {\n          toFill = index <= hovered;\n        }\n      } else if (isHovered) {\n        toFill = index <= hovered;\n      }\n\n      var fillColor = '';\n\n      if (fillColors) {\n        var current = null;\n\n        if (isChoosed) {\n          current = choosed.index;\n\n          if (isHovered) {\n            current = hovered;\n          }\n        } else if (isHovered) {\n          current = hovered;\n        }\n\n        var isCustom = Array.isArray(fillColors);\n        var defaultFillColors = ['oneStar', 'twoStars', 'threeStars', 'fourStars', 'fiveStars'];\n\n        if (current !== null) {\n          fillColor = isCustom ? fillColors[current] : defaultFillColors[current];\n        }\n      }\n\n      var iconClasses = classNames('py-2 px-1 rate-popover', toFill && (fillColors ? fillColor : fillClassName), iconClassName);\n      var renderIcon = icon;\n\n      if (iconFaces) {\n        var faces = ['angry', 'frown', 'meh', 'smile', 'laugh'];\n        renderIcon = 'meh-blank';\n\n        if (isChoosed && index <= choosed.index) {\n          renderIcon = faces[choosed.index];\n\n          if (isHovered) {\n            renderIcon = faces[hovered];\n          }\n        } else if (isHovered && index <= hovered) {\n          renderIcon = faces[hovered];\n        }\n      }\n\n      var tooltipContent = tooltip;\n\n      if (isFormActive) {\n        tooltipContent = React.createElement(\"form\", {\n          onSubmit: function onSubmit(e) {\n            submitHandler(e, tooltip, openedForm + 1, feedbackValue);\n            onCloseHanlder();\n          }\n        }, React.createElement(MDBPopoverHeader, null, tooltip), React.createElement(MDBPopoverBody, null, React.createElement(\"textarea\", {\n          type: \"text\",\n          className: \"md-textarea form-control py-0\",\n          value: feedbackValue,\n          onChange: feedbackValueHandler // style={{ resize: 'none' }}\n\n        }), React.createElement(\"div\", {\n          className: \"d-flex align-items-center justify-content-around mt-2\"\n        }, React.createElement(MDBBtn, {\n          type: \"submit\",\n          color: \"primary\",\n          size: \"sm\"\n        }, \"Submit!\"), React.createElement(\"button\", {\n          onMouseDown: onCloseHanlder,\n          style: {\n            backgroundColor: '#fff',\n            border: 'none',\n            padding: '0.5rem 1.6rem'\n          }\n        }, \"Close\"))));\n      }\n\n      return React.createElement(MDBTooltip, {\n        key: tooltip,\n        domElement: true,\n        placement: \"top\",\n        tag: \"span\",\n        popover: isFormActive,\n        isVisible: isFormActive,\n        clickable: isFormActive\n      }, React.createElement(\"span\", null, React.createElement(Fa$1, _extends({\n        style: {\n          cursor: 'pointer'\n        }\n      }, commonAttributes, itemAttributes, {\n        icon: renderIcon,\n        size: size || iconSize,\n        far: far || iconRegular,\n        className: iconClasses,\n        \"data-index\": index,\n        \"data-original-title\": tooltip,\n        onMouseEnter: function onMouseEnter() {\n          return handleMouseEnter(tooltip, index);\n        },\n        onMouseLeave: handleMouseLeave,\n        onClick: function onClick(e) {\n          return handleClick(tooltip, index, e);\n        }\n      }))), React.createElement(\"div\", {\n        style: {\n          userSelect: 'none'\n        }\n      }, tooltipContent));\n    });\n  }\n\n  return React.createElement(Tag, {\n    className: containerClasses\n  }, renderedIcons);\n};\n\nRating.propTypes = {\n  containerClassName: PropTypes.string,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    choosed: PropTypes.bool,\n    icon: PropTypes.string,\n    tooltip: PropTypes.string\n  })),\n  feedback: PropTypes.bool,\n  fillClassName: PropTypes.string,\n  fillColors: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.string)]),\n  getValue: PropTypes.func,\n  iconClassName: PropTypes.string,\n  iconFaces: PropTypes.bool,\n  iconRegular: PropTypes.bool,\n  iconSize: PropTypes.string,\n  submitHandler: PropTypes.func,\n  tag: PropTypes.string\n};\nRating.defaultProps = {\n  containerClassName: '',\n  data: [{\n    tooltip: 'Very Bad'\n  }, {\n    tooltip: 'Poor'\n  }, {\n    tooltip: 'Ok'\n  }, {\n    tooltip: 'Good'\n  }, {\n    tooltip: 'Excellent'\n  }],\n  feedback: false,\n  fillClassName: 'fiveStars',\n  iconClassName: '',\n  iconSize: '1x',\n  iconRegular: false,\n  tag: 'div',\n  submitHandler: function submitHandler(e) {\n    return e.preventDefault();\n  }\n};\n\nvar Row = function Row(props) {\n  var around = props.around,\n      between = props.between,\n      bottom = props.bottom,\n      center = props.center,\n      className = props.className,\n      end = props.end,\n      middle = props.middle,\n      start = props.start,\n      Tag = props.tag,\n      top = props.top,\n      attributes = _objectWithoutProperties(props, [\"around\", \"between\", \"bottom\", \"center\", \"className\", \"end\", \"middle\", \"start\", \"tag\", \"top\"]);\n\n  var classes = classNames('row', end && 'justify-content-end', start && 'justify-content-start', center && 'justify-content-center', between && 'justify-content-between', around && 'justify-content-around', top && 'align-self-start', middle && 'align-self-center', bottom && 'align-self-end', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"row\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = {\n  around: PropTypes.bool,\n  between: PropTypes.bool,\n  bottom: PropTypes.bool,\n  center: PropTypes.bool,\n  className: PropTypes.string,\n  end: PropTypes.bool,\n  middle: PropTypes.bool,\n  start: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  top: PropTypes.bool\n};\nRow.defaultProps = {\n  tag: 'div'\n};\nvar propTypes = {\n  activeItem: PropTypes.any,\n  className: PropTypes.string,\n  tabId: PropTypes.any\n};\n\nvar TabContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabContent, _React$Component);\n\n  function TabContent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabContent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabContent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeItem: _this.props.activeItem\n    });\n\n    return _this;\n  }\n\n  _createClass(TabContent, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var activeItem = this.state.activeItem;\n      return {\n        activeItemId: activeItem\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      var attributes = omit(this.props, Object.keys(propTypes));\n      var classes = classNames('tab-content', className);\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"tabContent\"\n      }, attributes, {\n        className: classes\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return prevState.activeItem !== nextProps.activeItem ? {\n        activeItem: nextProps.activeItem\n      } : null;\n    }\n  }]);\n\n  return TabContent;\n}(React.Component);\n\nTabContent.childContextTypes = {\n  activeItemId: PropTypes.any\n};\nTabContent.propTypes = propTypes;\n\nvar TabPane =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabPane, _React$Component);\n\n  function TabPane() {\n    _classCallCheck(this, TabPane);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TabPane).apply(this, arguments));\n  }\n\n  _createClass(TabPane, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          tabId = _this$props.tabId,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tabId\"]);\n\n      var activeItemId = this.context.activeItemId;\n      var classes = classNames('tab-pane', {\n        active: tabId === activeItemId\n      }, className);\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"tab-pane\"\n      }, attributes, {\n        className: classes,\n        role: \"tabpanel\"\n      }));\n    }\n  }]);\n\n  return TabPane;\n}(React.Component);\n\nTabPane.contextTypes = {\n  activeItemId: PropTypes.any\n};\nTabPane.propTypes = {\n  className: PropTypes.string,\n  tabId: PropTypes.any\n};\n\nvar TableHead = function TableHead(props) {\n  var _classNames;\n\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var isTheadColor = color === 'dark' || color === 'light';\n  var classes = classNames((_classNames = {\n    'text-white': textWhite\n  }, _defineProperty(_classNames, \"thead-\".concat(color), color && isTheadColor), _defineProperty(_classNames, \"\".concat(color), color && !isTheadColor), _classNames));\n  return React.createElement(\"thead\", _extends({\n    \"data-test\": \"table-head\"\n  }, attributes, {\n    className: classes\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : ''\n    }, col.label);\n  })), children);\n};\n\nTableHead.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  textWhite: PropTypes.bool\n};\nTableHead.defaultProps = {\n  textWhite: false\n};\nvar TreeviewContext = React.createContext();\n\nvar Treeview = function Treeview(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useEffect(function () {\n    if (props.getValue) {\n      props.getValue({\n        item: active ? active.closest('li') : active,\n        value: active ? active.closest('li').childNodes[1].textContent : active\n      });\n    }\n  }, [active, props]);\n\n  var getActive = function getActive(target) {\n    setActive(target);\n    return target;\n  };\n\n  var theme = props.theme,\n      children = props.children,\n      className = props.className,\n      getValue = props.getValue,\n      header = props.header,\n      listClassName = props.listClassName,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"theme\", \"children\", \"className\", \"getValue\", \"header\", \"listClassName\", \"tag\"]);\n\n  var classes = classNames('border', theme ? \"treeview-\".concat(theme) : 'treeview', className);\n  var ulClasses = classNames('list-unstyled', header ? 'pb-2 mb-1' : 'py-2 my-1', theme && \"treeview-\".concat(theme, \"-list\"), theme === 'animated' || !theme && 'pl-3', listClassName);\n  var head = header && React.createElement(React.Fragment, null, React.createElement(\"h6\", {\n    className: \"pt-3 pl-3\"\n  }, header), React.createElement(\"hr\", null));\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"treeview\"\n  }, attributes, {\n    className: classes\n  }), head, React.createElement(\"ul\", {\n    className: ulClasses\n  }, React.createElement(TreeviewContext.Provider, {\n    value: {\n      active: active,\n      theme: theme,\n      getActive: getActive\n    }\n  }, children)));\n};\n\nTreeview.propTypes = {\n  className: PropTypes.string,\n  getValue: PropTypes.func,\n  header: PropTypes.string,\n  listClassName: PropTypes.string,\n  tag: PropTypes.string,\n  theme: PropTypes.string\n};\nTreeview.defaultProps = {\n  tag: 'div',\n  theme: '',\n  getValue: function getValue() {}\n};\n\nvar TreeviewItem = function TreeviewItem(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      target = _useState2[0],\n      setTarget = _useState2[1];\n\n  var targetRef = useRef(null);\n\n  var className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      icon = props.icon,\n      opened = props.opened,\n      Tag = props.tag,\n      title = props.title,\n      attributes = _objectWithoutProperties(props, [\"className\", \"disabled\", \"disabledClassName\", \"fab\", \"fal\", \"far\", \"icon\", \"opened\", \"tag\", \"title\"]);\n\n  var _useContext = useContext(TreeviewContext),\n      active = _useContext.active,\n      getActive = _useContext.getActive,\n      theme = _useContext.theme;\n\n  useEffect(function () {\n    if (targetRef && targetRef.current) {\n      setTarget(targetRef.current);\n    }\n  }, []);\n\n  var handleClick = function handleClick() {\n    if (!disabled) {\n      target.classList.contains('opened') ? getActive(null) : getActive(target);\n    }\n  };\n\n  var classes = classNames(disabled && disabledClassName, theme && \"treeview-\".concat(theme, \"-items treeview-\").concat(theme, \"-element closed mb-1\"), active === target && !active.classList.contains('opened') ? 'opened' : '', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"treeview-item\"\n  }, attributes, {\n    className: classes,\n    ref: targetRef,\n    onMouseDown: handleClick,\n    style: {\n      transform: 'translateY(0.3em)'\n    }\n  }), React.createElement(Fa, {\n    className: \"mr-2\",\n    fab: fab,\n    fal: fal,\n    far: far,\n    icon: icon\n  }), React.createElement(\"span\", null, title));\n};\n\nTreeviewItem.propTypes = {\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  disabledClassName: PropTypes.string,\n  fab: PropTypes.bool,\n  fal: PropTypes.bool,\n  far: PropTypes.bool,\n  icon: PropTypes.string,\n  opened: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nTreeviewItem.defaultProps = {\n  disabled: false,\n  fab: false,\n  fal: false,\n  far: false,\n  icon: 'folder-open',\n  opened: false,\n  tag: 'li'\n};\n\nvar TreeviewList = function TreeviewList(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      opened = _useState2[0],\n      setOpen = _useState2[1];\n\n  useEffect(function () {\n    var opened = props.opened;\n    setOpen(opened); // eslint-disable-next-line react/destructuring-assignment\n  }, [props, props.opened]);\n\n  var handleSwitch = function handleSwitch() {\n    return setOpen(!opened);\n  };\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      icon = props.icon,\n      _ = props.opened,\n      Tag = props.tag,\n      title = props.title,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"disabledClassName\", \"fab\", \"fal\", \"far\", \"icon\", \"opened\", \"tag\", \"title\"]);\n\n  var _useContext = useContext(TreeviewContext),\n      theme = _useContext.theme;\n\n  var nestedClasses = classNames('nested', opened && 'active');\n  var folder = classNames(theme && \"closed treeview-\".concat(theme, \"-element d-block\"), !children && 'ml-2', opened && 'opened', disabled && disabledClassName);\n  var classes = classNames(theme && \"treeview-\".concat(theme, \"-items px-0\"), className);\n  var iconClasses = classNames(theme ? 'mx-2' : 'mr-2');\n  var child = children && React.createElement(\"ul\", {\n    className: nestedClasses,\n    style: {\n      height: 'calc(100% + 0.6rem)',\n      marginLeft: '2px'\n    }\n  }, children);\n  var collapse = theme && React.createElement(Collapse, {\n    isOpen: opened\n  }, child);\n  var iconArrow = theme !== 'colorful' ? 'angle-right' : opened ? 'minus-circle' : 'plus-circle';\n  var arrow = children && React.createElement(Fa, {\n    icon: iconArrow,\n    rotate: theme !== 'colorful' ? opened ? '90 down' : '0' : '',\n    className: \"rotate\"\n  });\n  var btn = children && React.createElement(Button, {\n    flat: true,\n    className: \"m-0 py-0 px-1 mr-1 z-depth-0\",\n    onClick: handleSwitch\n  }, arrow);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"treeview-list\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(\"span\", {\n    className: folder,\n    onClick: !disabled && theme ? handleSwitch : null\n  }, theme ? arrow : btn, React.createElement(\"span\", null, React.createElement(Fa, {\n    className: iconClasses,\n    fab: fab,\n    fal: fal,\n    far: far,\n    icon: icon\n  }), title)), collapse || child);\n};\n\nTreeviewList.propTypes = {\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  disabledClassName: PropTypes.string,\n  fab: PropTypes.bool,\n  fal: PropTypes.bool,\n  far: PropTypes.bool,\n  icon: PropTypes.string,\n  opened: PropTypes.bool,\n  tag: PropTypes.string\n};\nTreeviewList.defaultProps = {\n  disabled: false,\n  fab: false,\n  fal: false,\n  far: false,\n  icon: 'folder-open',\n  opened: false,\n  tag: 'li'\n};\nTreeviewList.contextTypes = {\n  theme: PropTypes.string\n};\nvar css$b = \".note-dark {\\r\\n  background-color: #000;\\r\\n  color: #fff;\\r\\n  border-color: #58595a;\\r\\n}\\r\\n\\r\\n.note-default {\\r\\n  background-color: rgb(164, 243, 235);\\r\\n  border-color: #00695c;\\r\\n}\\r\\n\\r\\n.note-elegant {\\r\\n  background-color: #2E2E2E;\\r\\n  border-color: #212121;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.note-stylish {\\r\\n  background-color: #4B515D;\\r\\n  border-color: #3E4551;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.note-unique {\\r\\n  background-color: #3F729B;\\r\\n  border-color: #1C2331;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.note-special {\\r\\n  background-color: #37474F;\\r\\n  border-color: #263238;\\r\\n  color: #fff;\\r\\n}\\r\\n\";\nstyleInject(css$b);\n\nvar Typography =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Typography, _React$Component);\n\n  function Typography() {\n    _classCallCheck(this, Typography);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Typography).apply(this, arguments));\n  }\n\n  _createClass(Typography, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          children = _this$props.children,\n          variant = _this$props.variant,\n          blockquote = _this$props.blockquote,\n          bqColor = _this$props.bqColor,\n          bqTitle = _this$props.bqTitle,\n          bqFooter = _this$props.bqFooter,\n          bqText = _this$props.bqText,\n          listUnStyled = _this$props.listUnStyled,\n          listInLine = _this$props.listInLine,\n          colorText = _this$props.colorText,\n          text = _this$props.text,\n          note = _this$props.note,\n          noteColor = _this$props.noteColor,\n          noteTitle = _this$props.noteTitle,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"children\", \"variant\", \"blockquote\", \"bqColor\", \"bqTitle\", \"bqFooter\", \"bqText\", \"listUnStyled\", \"listInLine\", \"colorText\", \"text\", \"note\", \"noteColor\", \"noteTitle\"]);\n\n      var classes = classNames(variant && variant, colorText && \"\".concat(colorText.toLowerCase(), \"-text\"), text && \"text-\".concat(text), className);\n      var bc = classNames('blockquote', bqColor && \"bq-\".concat(bqColor), className);\n      var notes = classNames('note', noteColor && \"note-\".concat(noteColor), className);\n      var isEmptyClass = classes !== '' ? classes : null;\n\n      if (blockquote) {\n        return React.createElement(MDBBox, {\n          tag: \"blockquote\",\n          className: bc\n        }, children);\n      }\n\n      if (listUnStyled) {\n        return React.createElement(MDBBox, {\n          tag: \"ul\",\n          className: \"list-unstyled\"\n        }, children);\n      }\n\n      if (listInLine) {\n        return React.createElement(MDBBox, {\n          tag: \"ul\",\n          className: \"list-inline\"\n        }, children);\n      }\n\n      if (note) {\n        return React.createElement(MDBBox, {\n          tag: \"p\",\n          className: notes\n        }, React.createElement(\"strong\", null, noteTitle), children);\n      }\n\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: isEmptyClass\n      }), children);\n    }\n  }]);\n\n  return Typography;\n}(React.Component);\n\nTypography.propTypes = {\n  blockquote: PropTypes.bool,\n  bqColor: PropTypes.string,\n  bqTitle: PropTypes.string,\n  className: PropTypes.string,\n  colorText: PropTypes.string,\n  listInLine: PropTypes.bool,\n  listUnStyled: PropTypes.bool,\n  note: PropTypes.bool,\n  noteColor: PropTypes.string,\n  noteTitle: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  variant: PropTypes.string\n};\nTypography.defaultProps = {\n  abbr: false,\n  abbrLeftText: true,\n  blockquote: false,\n  listInLine: false,\n  listUnStyled: false,\n  noteColor: 'primary',\n  tag: 'p'\n};\nexport { Alert, Animation, Badge, Box, Breadcrumb, BreadcrumbItem, Button, ButtonGroup, ButtonToolbar, Card, CardBody, CardFooter, CardGroup, CardHeader, CardImage, CardText, CardTitle, CardVideo, Carousel, CarouselCaption, Control as CarouselControl, CarouselIndicator, CarouselIndicators, CarouselInner, CarouselItem, MDBCloseIcon as CloseIcon, Col, Collapse, Container, DataTable, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, EdgeHeader, Fa, Footer, FormInline, FreeBird, Gallery, GalleryList, HamburgerToggler, Iframe, Input, InputGroup, InputNumeric, Jumbotron, Link, ListGroup, ListGroupItem, Alert as MDBAlert, Animation as MDBAnimation, Badge as MDBBadge, Box as MDBBox, Breadcrumb as MDBBreadcrumb, BreadcrumbItem as MDBBreadcrumbItem, Button as MDBBtn, ButtonGroup as MDBBtnGroup, ButtonToolbar as MDBBtnToolbar, Card as MDBCard, CardBody as MDBCardBody, CardFooter as MDBCardFooter, CardGroup as MDBCardGroup, CardHeader as MDBCardHeader, CardImage as MDBCardImage, CardText as MDBCardText, CardTitle as MDBCardTitle, CardVideo as MDBCardVideo, Carousel as MDBCarousel, CarouselCaption as MDBCarouselCaption, CarouselIndicator as MDBCarouselIndicator, CarouselIndicators as MDBCarouselIndicators, CarouselInner as MDBCarouselInner, CarouselItem as MDBCarouselItem, MDBCloseIcon, Col as MDBCol, Collapse as MDBCollapse, Container as MDBContainer, Control as MDBControl, DataTable as MDBDataTable, Dropdown as MDBDropdown, DropdownItem as MDBDropdownItem, DropdownMenu as MDBDropdownMenu, DropdownToggle as MDBDropdownToggle, EdgeHeader as MDBEdgeHeader, Footer as MDBFooter, FormInline as MDBFormInline, FreeBird as MDBFreeBird, Gallery as MDBGallery, GalleryList as MDBGalleryList, HamburgerToggler as MDBHamburgerToggler, Fa as MDBIcon, Iframe as MDBIframe, Input as MDBInput, InputGroup as MDBInputGroup, InputNumeric as MDBInputSelect, Jumbotron as MDBJumbotron, Link as MDBLink, ListGroup as MDBListGroup, ListGroupItem as MDBListGroupItem, Mask as MDBMask, Media as MDBMedia, Modal as MDBModal, ModalBody as MDBModalBody, ModalFooter as MDBModalFooter, ModalHeader as MDBModalHeader, Nav as MDBNav, NavItem as MDBNavItem, NavLink as MDBNavLink, Navbar as MDBNavbar, NavbarBrand as MDBNavbarBrand, NavbarNav as MDBNavbarNav, NavbarToggler as MDBNavbarToggler, Notification as MDBNotification, PageItem as MDBPageItem, PageLink as MDBPageNav, Pagination as MDBPagination, Popover as MDBPopover, PopoverBody as MDBPopoverBody, PopoverHeader as MDBPopoverHeader, Popover as MDBPopper, Progress as MDBProgress, Rating as MDBRating, Row as MDBRow, TabContent as MDBTabContent, TabPane as MDBTabPane, Table as MDBTable, TableBody as MDBTableBody, TableFoot as MDBTableFoot, TableHead as MDBTableHead, Popover as MDBTooltip, Treeview as MDBTreeview, TreeviewItem as MDBTreeviewItem, TreeviewList as MDBTreeviewList, Typography as MDBTypo, Typography as MDBTypography, View as MDBView, Waves as MDBWaves, Mask, Media, Modal, ModalBody, ModalFooter, ModalHeader, Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarNav, NavbarToggler, Notification, PageItem, PageLink, Pagination, Popover, PopoverBody, PopoverHeader, Popover as Popper, Progress, Rating, Row, TabContent, TabPane, Table, TableBody, TableFoot, TableHead, Popover as Tooltip, Treeview, TreeviewItem, TreeviewList, Typography as Typo, Typography, View, Waves };","map":null,"metadata":{},"sourceType":"module"}