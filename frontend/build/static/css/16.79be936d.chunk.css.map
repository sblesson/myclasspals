{"version":3,"sources":["DiscoverGroupModal.scss","../../styles/abstracts/_variables.scss","OnboardingUser.scss","../../styles/abstracts/_include-media.scss"],"names":[],"mappings":"AAEA,YACE,YAAa,CACb,oBAAqB,CACrB,qBAAsB,CACtB,UAAW,CACX,kBAAmB,CACnB,wBAAyB,CACzB,uBAAwB,CACxB,cAAe,CACf,gBAAiB,CACjB,kBAAmB,CACnB,kBACE,mBAAsB,CACtB,aAAc,CACf,mBAEC,mBAAsB,CACtB,kBAAmB,CACnB,iBAAkB,CACnB,YAGD,aAA0B,CAA1B,yBAA0B,CAC1B,aAAe,CAChB,iBAEC,0BAA4B,CAC5B,qBAAuB,CACvB,aAAc,CACd,iBAAmB,CACnB,oBAAsB,CACtB,sBAAuB,CACxB,oBAEC,oBAAqB,CACrB,gBAAiB,CAClB,gBAEC,sBAAuB,CACvB,oBAAsB,CAUtB,kBAAmB,CACnB,gBAAkB,CAbpB,sBAII,aAAc,CAJlB,8DAQI,aAAc,CACd,qBAAsB,CACtB,oBAAqB,CACtB,uCAQC,sBAAuB,CACxB,0BAID,qBAAsB,CACvB,mCAGC,iBAAkB,CAClB,SAAU,CACV,aAAc,CACd,cAAe,CACf,eAAgB,CAChB,oBAAqB,CACrB,iBAAkB,CAClB,mBAAoB,CACpB,UAAW,CCzEb,MASE,2BAAoB,CAEpB,mCAA4B,CAC5B,oBAAa,CACb,iBAAU,CACV,gCAAyB,CACzB,yBAAkB,CAElB,sBAAe,CAEf,4BAAqB,CAGrB,sCAAqB,CACrB,oBAAa,CAEb,yBAAkB,CAClB,6BAAsB,CACtB,6BAAsB,CACtB,sBAAe,CACf,sBAAe,CACf,sBAAe,CACf,qBAAc,CACd,yBAAqB,CACrB,yBAAqB,CACrB,8BAAuB,CACvB,oBAAa,CACb,0BAAmB,CAEnB,iCAA0B,CAC1B,8BAAuB,CACvB,wBAAiB,CACjB,uBAAgB,CAChB,4BAAqB,CACrB,6BAAsB,CACtB,2BAAoB,CACpB,iCAA0B,CAkB1B,yBAAkB,CAElB,wBAAiB,CACjB,oBAAa,CACb,2BAAoB,CAEpB,oBAAa,CACb,qBAAc,CACd,sBAAe,CACf,uBAAgB,CAChB,kBAAc,CACd,uBAAmB,CACnB,2BAAoB,CAEpB,uBAAmB,CACnB,sBAAe,CACf,mBAAe,CACf,sBAAe,CACf,kBAAc,CAEd,sBAAK,CAEL,uBAAM,CAEN,uBAAM,CAEN,4BAAc,CAEd,gCAAe,CAEf,+BAAc,CAEd,wCAAQ,CAER,iDAAQ,CChGV,oBACE,WAAY,CA2Db,yBA5DD,oBAII,SAAU,CAwDb,CC+CC,+CD3GF,oBAQI,SAAU,CAoDb,CC+CC,+CD3GF,oBAaI,SAAU,CA+Cb,CC+CC,gDD3GF,oBAkBI,SAAU,CA0Cb,CC+CC,0BD3GF,oBAsBI,SAAU,CAsCb,CC+CC,gHD3GF,oBA2BI,SAAU,CAiCb,CA5DD,0EA+BI,UAAY,CA/BhB,iDAkCI,WAAY,CACZ,YAAa,CACb,cAAe,CACf,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CAxC3B,8GA2CM,UAAY,CA3ClB,iCA+CI,kBAAmB,CACnB,oBAAqB,CAhDzB,mCAmDI,kBAAoC,CAApC,mCAAoC,CACpC,oBAAA,CAAA,qCAAsC,CApD1C,+CAuDI,iBAAkB,CAClB,UAAY,CACZ,eAAiB,CACjB,gBAAkB","file":"16.79be936d.chunk.css","sourcesContent":["@import '../../../styles/abstracts/variables';\n\n.search-box {\n  display: flex;\n  justify-content: left;\n  vertical-align: middle;\n  width: 100%;\n  border-radius: 5rem;\n  border: 1px solid #f0f2f5;\n  margin: 1rem 0 2rem 1rem;\n  cursor: pointer;\n  line-height: 10px;\n  background: #f0f2f5;\n  &__icon {\n    padding: 0.5rem 0.3rem;\n    color: #45b3e0;\n  }\n  &__input {\n    padding: 0.5rem 0.3rem;\n    background: #f0f2f5;\n    touch-action: none;\n  }\n}\n.icon-group {\n  color: var(--bg-gradient1);\n  padding: 0.5rem;\n}\n.ant-list-header {\n  padding: 0 1.6rem !important;\n  border: none !important;\n  color: #767676;\n  font-size: 0.875rem;\n  padding: 0.1rem 1.6rem;\n  background: transparent;\n}\n.create-btn-wrapper {\n  margin: 3rem 2rem 0 0;\n  text-align: right;\n}\n.discover-group {\n  background: transparent;\n  border-radius: 0.375em;\n  &:hover {\n    color: #767676;\n  }\n  .ant-btn:hover,\n  .ant-btn:focus {\n    color: #767676;\n    background-color: #fff;\n    border-color: #767676;\n  }\n  margin-bottom: 1rem;\n  margin-top: 0.5rem;\n}\n/* Bootstrap 4 text input with search icon */\n\n.form-control {\n  @at-root li.ant-menu-item-selected#{&} {\n    background: transparent;\n  }\n}\n\n.has-search .form-control {\n  padding-left: 2.375rem;\n}\n\n.has-search .form-control-feedback {\n  position: absolute;\n  z-index: 2;\n  display: block;\n  width: 2.375rem;\n  height: 2.375rem;\n  line-height: 2.375rem;\n  text-align: center;\n  pointer-events: none;\n  color: #aaa;\n}\n","$mainColor: #fff;\n\n:root {\n  /*   --bg-header-gradient1: #64cad9;\n  --bg-header-gradient2: #64cad9;\n  --color-input-search-button: #64cad9;\n  --bg-input-search-button: rgb(243, 250, 253);\n  --primary-btn-color: #46bfd1; */\n\n  //original\n\n  --myclasspals-color: #46bfd1;\n\n  --color-input-search-button: #45b3e0;\n  --bg-wrapper: rgb(243, 250, 253);\n  --bg-main: #f5f6f7;\n  --bg-input-search-button: rgb(243, 250, 253);\n  --bg-table-header: #fafafa;\n  //--bg-post-head: #f5f6f7;\n  --bg-post-head: #e6f7ff;\n\n  --main-body-bg-color: #f5f6f7;\n\n  //--bg-leftnav-sidebar: #f3fafd;\n  --bg-leftnav-sidebar: #f7f7f7 !important;\n  --bg-profile: #edf0f4;\n  //--bg-profile: #f0f2f5;\n  --bg-filter-panel: #f7f7f7;\n  --bg-header-gradient1: #46bfd1;\n  --bg-header-gradient2: #45b3e0;\n  --bg-gradient1: #46bfd1;\n  --bg-gradient2: #45b3e0;\n  --color-header: floralwhite;\n  --color-white: floralwhite;\n  --color-header-hover: #444;\n  --color-primary-text: #444;\n  --color-secondary-text: #4a4a4a;\n  --color-link: #0073b1;\n  --color-link-hover: #45b3e0;\n\n  --color-primary-btn-hover: floralwhite;\n  --bg-primary-btn-hover: #45b3e0;\n  --bg-primary-btn: #45b3e0;\n  --primary-color: #45b3e0;\n  --primary-link-color: #45b3e0;\n  --secondary-btn-color: #87ceeb;\n  --primary-btn-color: #45b3e0;\n  --color-active-tab-border: #ea4c89;\n  /* \n  --color-input-search-button: #91a8d2;\n  --bg-input-search-button: rgb(243, 250, 253);\n  --bg-table-header: #fafafa;\n  --bg-post-head: #f5f6f7;\n  --bg-leftnav-sidebar: #f3fafd;\n  --bg-header-gradient1: #91a8d2;\n  --bg-header-gradient2: #91a8d2;\n  --color-header: floralwhite;\n  --color-header-hover: #444;\n  --color-primary-btn-hover: #444;\n  --bg-primary-btn-hover: #87ceeb;\n  --primary-color: #91a8d2;\n  --primary-link-color: #45b3e0;\n  --secondary-btn-color: #87ceeb;\n  --primary-btn-color: #45b3e0; */\n  //--primary-color: #e00083;\n  --secondary-color: #87ceeb;\n  /*--tertiary-color: #ff5a5f;*/\n  --tertiary-color: #e00083;\n  --light-blue: rgb(243, 250, 253);\n  --light-border-grey: #d9d9d9;\n\n  --dark-color: #0892ab;\n  --light-color: #f4f4f4;\n  --danger-color: #dc3545;\n  --success-color: #28a745;\n  --white-color: #fff;\n  --light-grey-color: #bbb;\n  --light-grey-color2: #f5f6f7;\n  --large-text-color: #444;\n  --large-text-color: #444;\n  --font-color-1: floralwhite;\n  --font-color-2: #444;\n  --font-color-3: #757575;\n  --error-color: #cc0000;\n  //additional\n  --bg: #1d1e2a !important;\n  /*  main   */\n  --bg2: #1a1b26 !important;\n  /*  alt   */\n  --bg3: #14151f !important;\n  /*  header   */\n  --first-color: #aaa !important;\n  /*  grey - main color  */\n  --second-color: #74857c !important;\n  /* green - alt text */\n  --third-color: #7587a6 !important;\n  /* blue - links  */\n  --font1: 'Open Sans', 'Segoe UI' !important;\n  /* main font */\n  --font2: 'Open Sans Semibold', 'Segoe UI' !important;\n}\n\n/* // COLORS\n$color-primary: #55c57a;\n$color-primary-light: #7ed56f;\n$color-primary-dark: #28b485;\n\n$color-secondary-light: #ffb900;\n$color-secondary-dark: #ff7730;\n\n$color-tertiary-light: #2998ff;\n$color-tertiary-dark: #5643fa;\n\n$color-grey-light-1: #f7f7f7;\n$color-grey-light-2: #eee;\n\n$color-grey-dark: #777;\n$color-grey-dark-2: #999;\n$color-grey-dark-3: #333;\n\n$color-white: #fff;\n$color-black: #000;\n\n\n// FONT\n$default-font-size: 1.6rem;\n\n\n// GRID\n$grid-width: 114rem;\n$gutter-vertical: 8rem;\n$gutter-vertical-small: 6rem;\n$gutter-horizontal: 6rem; */\n","@import '../../styles/abstracts/variables';\n@import '../../styles/abstracts/include-media';\n\n.onboarding-wrapper {\n  margin: auto;\n  // if the breakpoint is less than or equal to 360px\n  @include media('<=phone') {\n    width: 90%;\n  }\n  // if the breakpoint is greater than 360px and less than or eqaul to 425px\n  @include media('>phone', '<=425px') {\n    width: 80%;\n  }\n\n  // if the screen is going to be greater than 425px and less than or eqaul to 768px\n  @include media('>425px', '<=tablet') {\n    width: 70%;\n  }\n\n  // if the screen is going to be greater than 768px and less than 1366px\n  @include media('>tablet', '<desktop') {\n    width: 70%;\n  }\n  // if the screen is going to be greater than or equal to 1366px\n  @include media('>=desktop') {\n    width: 70%;\n  }\n\n  // if the screen is going to be greater than or equal to 1920px\n  @include media('>=LGdesktop', 'retina2x') {\n    width: 60%;\n  }\n  .fa-hands-helping,\n  .fa-plus-circle {\n    color: white;\n  }\n  .onboarding-action-container {\n    margin: 2rem;\n    padding: 3rem;\n    cursor: pointer;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    &:hover,\n    &:focus {\n      opacity: 0.7;\n    }\n  }\n  .join-action {\n    background: #767caa;\n    border-color: #767caa;\n  }\n  .create-action {\n    background: var(--myclasspals-color);\n    border-color: var(--myclasspals-color);\n  }\n  .onboarding-action-buttons {\n    text-align: center;\n    color: white;\n    font-size: 0.8rem;\n    margin-top: 0.6rem;\n  }\n}\n","$breakpoints: (\n  'phone': 360px,\n  'tablet': 768px,\n  'desktop': 1366px,\n  'LGdesktop': 1920px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)',\n    '(min-resolution: 192dpi)',\n  ),\n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)',\n    '(min-resolution: 350dpi)',\n  ),\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (type-of($expression) != 'string') {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == '=') {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == '-' {\n      $minus: true;\n    } @else if $character == '.' {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw'\n    'vh' 'vmin' 'vmax';\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n/**\n*\n* Testing\n*\n**/\n"]}