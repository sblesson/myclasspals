{"ast":null,"code":"import _slicedToArray from \"/Users/sapnablesson/myGit/devconnector_2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js\";\nimport React, { useState } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport axios from 'axios';\nimport { debounce, throttle } from 'lodash';\nimport Autosuggest from 'react-autosuggest';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\nimport { getSchoolDetails } from '../../actions/profile';\n\nconst AddSchoolForm = ({\n  addSchool,\n  getSchoolDetails\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modal = _useState4[0],\n        setModal = _useState4[1];\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        school = _React$useState2[0],\n        setSchool = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        suggestions = _React$useState4[0],\n        setSuggestions = _React$useState4[1];\n\n  const toggle = () => setModal(!modal);\n\n  const loadSuggestions = async ({\n    value,\n    reason\n  }) => {\n    if (!value) {\n      setSuggestions([]);\n      return;\n    }\n\n    if (reason === '') try {\n      const url = \"https://api.schooldigger.com/v1.2/autocomplete/schools?q=\".concat(value, \"&appID=02e5e1fb&appKey=516f6dd0da01a186ffedea905bec1041\");\n      const response = await axios.get(url);\n      response.data.schoolMatches.map(row => ({\n        schoolName: row.schoolName,\n        schoolCity: row.city,\n        schoolState: row.state,\n        lowGrade: row.lowGrade,\n        highGrade: row.highGrade,\n        schoolLevel: row.schoolLevel\n      }));\n    } catch (e) {\n      [];\n    }\n  };\n\n  const debouncedLoadSuggestions = debounce(loadSuggestions, 2000);\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const renderSuggestion = suggestion => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, suggestion.schoolName, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), suggestion.schoolCity, \",\\xA0\", suggestion.schoolState);\n  };\n\n  const onSuggestionSelected = (event, {\n    suggestion,\n    method\n  }) => {\n    if (method === 'enter') {\n      event.preventDefault();\n    }\n\n    setSchool(suggestion.schoolName);\n  };\n\n  const inputProps = {\n    placeholder: 'Search school name',\n    autoComplete: 'abcd',\n    value: school,\n    name: 'school',\n    onChange: (_event, {\n      newValue\n    }) => {\n      setSchool(newValue);\n    }\n  };\n\n  const getSuggestionValue = suggestion => suggestion.schoolName;\n\n  const shouldRenderSuggestions = suggestion => {\n    if (suggestion.length > 2) {\n      return true;\n    } else return false;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"post-form\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Add School\")), React.createElement(Modal, {\n    isOpen: modal,\n    fade: false,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \" Add School\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Child Name (optional)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))), React.createElement(FormGroup, {\n    tag: \"fieldset\",\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Choose category\"), React.createElement(Col, {\n    sm: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    inputProps: inputProps,\n    onSuggestionsFetchRequested: debouncedLoadSuggestions,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    onSuggestionSelected: onSuggestionSelected,\n    shouldRenderSuggestions: shouldRenderSuggestions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })))))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Add\"))));\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired,\n  getSchoolDetails: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addSchool,\n  getSchoolDetails\n})(AddSchoolForm);","map":{"version":3,"sources":["/Users/sapnablesson/myGit/devconnector_2.0/client/src/components/profile-forms/AddSchoolForm.js"],"names":["React","useState","Col","Button","Form","FormGroup","Label","Input","FormText","Modal","ModalHeader","ModalBody","ModalFooter","axios","debounce","throttle","Autosuggest","PropTypes","connect","addSchool","getSchoolDetails","AddSchoolForm","text","setText","modal","setModal","school","setSchool","suggestions","setSuggestions","toggle","loadSuggestions","value","reason","url","response","get","data","schoolMatches","map","row","schoolName","schoolCity","city","schoolState","state","lowGrade","highGrade","schoolLevel","e","debouncedLoadSuggestions","onSuggestionsClearRequested","renderSuggestion","suggestion","onSuggestionSelected","event","method","preventDefault","inputProps","placeholder","autoComplete","name","onChange","_event","newValue","getSuggestionValue","shouldRenderSuggestions","length","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap';\nimport axios from 'axios';\nimport { debounce, throttle } from 'lodash';\n\nimport Autosuggest from 'react-autosuggest';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addSchool } from '../../actions/profile';\nimport { getSchoolDetails } from '../../actions/profile';\n\nconst AddSchoolForm = ({ addSchool, getSchoolDetails }) => {\n  const [text, setText] = useState('');\n  const [modal, setModal] = useState(false);\n  const [school, setSchool] = React.useState('');\n  const [suggestions, setSuggestions] = React.useState([]);\n\n  const toggle = () => setModal(!modal);\n\n  const loadSuggestions = async ({ value, reason }) => {\n    if (!value) {\n      setSuggestions([]);\n      return;\n    }\n\n    if(reason === '')\n\n    try {\n      const url = `https://api.schooldigger.com/v1.2/autocomplete/schools?q=${value}&appID=02e5e1fb&appKey=516f6dd0da01a186ffedea905bec1041`;\n      const response = await axios.get(url);\n      \n      \n      \n      \n      (\n        response.data.schoolMatches.map(row => ({\n          schoolName: row.schoolName,\n          schoolCity: row.city,\n          schoolState: row.state,\n          lowGrade: row.lowGrade,\n          highGrade: row.highGrade,\n          schoolLevel: row.schoolLevel\n        }))\n      );\n    } catch (e) {\n      \n      \n      \n      \n      ([]);\n    }\n  };\n\n  const debouncedLoadSuggestions = debounce(loadSuggestions, 2000);\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const renderSuggestion = suggestion => {\n    return (\n      <div>\n        {suggestion.schoolName}\n        <br />\n        {suggestion.schoolCity},&nbsp;{suggestion.schoolState}\n      </div>\n    );\n  };\n\n  const onSuggestionSelected = (event, { suggestion, method }) => {\n    if (method === 'enter') {\n      event.preventDefault();\n    }\n    setSchool(suggestion.schoolName);\n  };\n\n  const inputProps = {\n    placeholder: 'Search school name',\n    autoComplete: 'abcd',\n    value: school,\n    name: 'school',\n    onChange: (_event, { newValue }) => {\n      setSchool(newValue);\n    }\n  };\n\n  const getSuggestionValue = suggestion => suggestion.schoolName;\n\n  const shouldRenderSuggestions = suggestion => {\n    if (suggestion.length > 2) {\n      return true;\n    } else return false;\n  };\n\n  return (\n    <div>\n      <div className='post-form' onClick={toggle}>\n        <Button color='primary' onClick={toggle}>\n          Add School\n        </Button>\n      </div>\n      <Modal isOpen={modal} fade={false} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Add School</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup row>\n              <Col sm={10}>\n                <Input\n                  type='text'\n                  name='text'\n                  placeholder='Child Name (optional)'\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup tag='fieldset' row>\n              <legend className='col-form-label'>Choose category</legend>\n              <Col sm={10}>\n                <FormGroup check>\n                  <Autosuggest\n                    suggestions={suggestions}\n                    inputProps={inputProps}\n                    onSuggestionsFetchRequested={debouncedLoadSuggestions}\n                    onSuggestionsClearRequested={onSuggestionsClearRequested}\n                    getSuggestionValue={getSuggestionValue}\n                    renderSuggestion={renderSuggestion}\n                    onSuggestionSelected={onSuggestionSelected}\n                    shouldRenderSuggestions={shouldRenderSuggestions}\n                  />\n                </FormGroup>\n              </Col>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={toggle}>\n            Add\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nAddSchoolForm.propTypes = {\n  addSchool: PropTypes.func.isRequired,\n  getSchoolDetails: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addSchool, getSchoolDetails })(AddSchoolForm);\n"]},"metadata":{},"sourceType":"module"}