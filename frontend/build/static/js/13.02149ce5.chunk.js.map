{"version":3,"sources":["components/groups/modal/GroupSearchResult.js","components/groups/modal/DiscoverGroupModal.js","../node_modules/@ant-design/icons-svg/es/asn/SettingOutlined.js","../node_modules/@ant-design/icons/es/icons/SettingOutlined.js","components/sidebar/SideBar.js","components/groups/Groups.js"],"names":["GroupSearchResult","React","memo","group","newRegistration","console","log","searchResult","length","itemLayout","size","header","searchTerm","pagination","onChange","page","total","pageSize","hideOnSinglePage","dataSource","renderItem","item","GroupCard","currentGroup","type","DiscoverGroupModal","useState","isModalVisible","setModalVisibility","toggleModal","event","preventDefault","onClick","className","SearchOutlined","title","centered","visible","onOk","onCancel","destroyOnClose","cancelButtonProps","style","display","marginBottom","bordered","AutoCompleteCitySearch","margin","textAlign","AutoCompleteGroupSearch","description","connect","state","searchGroup","searchGroupWithFilters","SettingOutlined","props","ref","createElement","AntdIcon","Object","assign","icon","SettingOutlinedSvg","displayName","forwardRef","SubMenu","Menu","auth","getGroupPrivacyLabel","privacy","groupPrivacy","toLowerCase","_","startCase","getMenuItems","requestedItems","map","current","Item","key","id","to","role","color","groupName","SideMenu","padding","marginTop","defaultSelectedKeys","defaultOpenKeys","mode","theme","Divider","ItemGroup","userGroup","pendingInvitedUserGroups","requestedUserGroup","getAllGroups","Content","Card","Meta","Layout","TabPane","Tabs","Input","Search","useEffect","user","_id","operations","CreateGroupModal","loading","Spinner","defaultActiveKey","tabBarExtraContent","tab","index"],"mappings":"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","file":"static/js/13.02149ce5.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { List, Card, Empty } from 'antd';\n\nimport GroupCard from '../GroupCard';\n\nconst GroupSearchResult = React.memo(({ group, newRegistration }) => {\n  console.log('GroupSearchResult');\n\n  return (\n    <>\n      {group !== null && group.searchResult && group.searchResult.length > 0 && (\n        <List\n          itemLayout='vertical'\n          size='small'\n          header={\n            group.searchTerm ? `Groups based on your search` : 'Groups near you'\n          }\n          pagination={{\n            onChange: (page) => {\n              console.log(page);\n            },\n            total: group.searchResult.length,\n            pageSize: 50,\n            hideOnSinglePage: true,\n          }}\n          dataSource={group.searchResult}\n          renderItem={(item) => (\n            <GroupCard currentGroup={item} type='discover' newRegistration />\n          )}\n        />\n      )}\n    </>\n  );\n});\n\nGroupSearchResult.propTypes = {\n  group: PropTypes.object.isRequired,\n};\n\nexport default GroupSearchResult;\n","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { List, Card, Empty, Modal, Button } from 'antd';\nimport AutoCompleteGroupSearch from '../../common/autocompletegroupsearch/AutoCompleteGroupSearch';\nimport AutoCompleteCitySearch from '../../common/autocompletecitysearch/AutoCompleteCitySearch';\nimport { searchGroup, searchGroupWithFilters } from '../../../actions/group';\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport GroupSearchResult from './GroupSearchResult';\n\nimport './DiscoverGroupModal.scss';\n\nconst DiscoverGroupModal = React.memo(({ group, newRegistration }) => {\n  console.log('inside DiscoverGroupModal');\n  const [isModalVisible, setModalVisibility] = useState(false);\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = (event) => {\n    console.log(event);\n    event.preventDefault();\n    setModalVisibility(!isModalVisible);\n  };\n  return (\n    <>\n      {newRegistration ? (\n        <div\n          onClick={(event) => toggleModal(event)}\n          className='onboarding-action-container join-action'\n        >\n          <i className='fas fa-hands-helping'></i>\n          <div className='onboarding-action-buttons'>\n            Join school/class group{' '}\n          </div>\n        </div>\n      ) : (\n        <div onClick={(event) => toggleModal(event)}>\n          <div className='search-box'>\n            <SearchOutlined className='search-box__icon' />\n            <span className='search-box__input'> Search Groups</span>\n          </div>\n        </div>\n      )}\n\n      <Modal\n        className='discover-group-modal'\n        title={'Discover Group'}\n        centered\n        visible={isModalVisible}\n        onOk={hideModal}\n        onCancel={toggleModal}\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n        footer={null}\n      >\n        <Card style={{ marginBottom: 10 }} bordered={false}>\n          <AutoCompleteCitySearch />\n          <div style={{ margin: '10px', textAlign: 'center' }}>OR</div>\n          <AutoCompleteGroupSearch />\n        </Card>\n        {group !== null &&\n          group.searchResult &&\n          group.searchResult.length > 0 && (\n            <GroupSearchResult group={group} newRegistration />\n          )}\n        {group.searchTerm && (\n          <Empty\n            description={\n              'No groups found in your city or school. Check the spelling or try again with another keyword.'\n            }\n          />\n        )}\n      </Modal>\n    </>\n  );\n});\n\nDiscoverGroupModal.propTypes = {\n  searchGroup: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n});\n\nexport default connect(mapStateToProps, {\n  searchGroup,\n  searchGroupWithFilters,\n})(DiscoverGroupModal);\n","// This icon file is generated automatically.\n// tslint:disable\nvar SettingOutlined = { \"name\": \"setting\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M924.8 625.7l-65.5-56c3.1-19 4.7-38.4 4.7-57.8s-1.6-38.8-4.7-57.8l65.5-56a32.03 32.03 0 009.3-35.2l-.9-2.6a443.74 443.74 0 00-79.7-137.9l-1.8-2.1a32.12 32.12 0 00-35.1-9.5l-81.3 28.9c-30-24.6-63.5-44-99.7-57.6l-15.7-85a32.05 32.05 0 00-25.8-25.7l-2.7-.5c-52.1-9.4-106.9-9.4-159 0l-2.7.5a32.05 32.05 0 00-25.8 25.7l-15.8 85.4a351.86 351.86 0 00-99 57.4l-81.9-29.1a32 32 0 00-35.1 9.5l-1.8 2.1a446.02 446.02 0 00-79.7 137.9l-.9 2.6c-4.5 12.5-.8 26.5 9.3 35.2l66.3 56.6c-3.1 18.8-4.6 38-4.6 57.1 0 19.2 1.5 38.4 4.6 57.1L99 625.5a32.03 32.03 0 00-9.3 35.2l.9 2.6c18.1 50.4 44.9 96.9 79.7 137.9l1.8 2.1a32.12 32.12 0 0035.1 9.5l81.9-29.1c29.8 24.5 63.1 43.9 99 57.4l15.8 85.4a32.05 32.05 0 0025.8 25.7l2.7.5a449.4 449.4 0 00159 0l2.7-.5a32.05 32.05 0 0025.8-25.7l15.7-85a350 350 0 0099.7-57.6l81.3 28.9a32 32 0 0035.1-9.5l1.8-2.1c34.8-41.1 61.6-87.5 79.7-137.9l.9-2.6c4.5-12.3.8-26.3-9.3-35zM788.3 465.9c2.5 15.1 3.8 30.6 3.8 46.1s-1.3 31-3.8 46.1l-6.6 40.1 74.7 63.9a370.03 370.03 0 01-42.6 73.6L721 702.8l-31.4 25.8c-23.9 19.6-50.5 35-79.3 45.8l-38.1 14.3-17.9 97a377.5 377.5 0 01-85 0l-17.9-97.2-37.8-14.5c-28.5-10.8-55-26.2-78.7-45.7l-31.4-25.9-93.4 33.2c-17-22.9-31.2-47.6-42.6-73.6l75.5-64.5-6.5-40c-2.4-14.9-3.7-30.3-3.7-45.5 0-15.3 1.2-30.6 3.7-45.5l6.5-40-75.5-64.5c11.3-26.1 25.6-50.7 42.6-73.6l93.4 33.2 31.4-25.9c23.7-19.5 50.2-34.9 78.7-45.7l37.9-14.3 17.9-97.2c28.1-3.2 56.8-3.2 85 0l17.9 97 38.1 14.3c28.7 10.8 55.4 26.2 79.3 45.8l31.4 25.8 92.8-32.9c17 22.9 31.2 47.6 42.6 73.6L781.8 426l6.5 39.9zM512 326c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 01512 614c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 01400 502c0-29.9 11.7-58 32.8-79.2C454 401.6 482.1 390 512 390c29.9 0 58 11.6 79.2 32.8A111.6 111.6 0 01624 502c0 29.9-11.7 58-32.8 79.2z\" } }] } };\nexport default SettingOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport React from 'react';\nimport SettingOutlinedSvg from \"@ant-design/icons-svg/es/asn/SettingOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SettingOutlined = function SettingOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SettingOutlinedSvg\n  }));\n};\n\nSettingOutlined.displayName = 'SettingOutlined';\nexport default React.forwardRef(SettingOutlined);","import React, { Fragment, useState, useEffect } from 'react';\nimport _ from 'lodash';\n\nimport { Link } from 'react-router-dom';\n\nimport { Tabs, Menu, Drawer, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport CreateGroupModal from '../groups/modal/CreateGroupModal';\nimport DiscoverGroupModal from '../groups/modal/DiscoverGroupModal';\nimport UserMenu from '../topnavbar/UserMenu';\n\nimport {\n  SettingOutlined,\n  MenuOutlined,\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n} from '@ant-design/icons';\nimport './SideBar.scss';\n\nconst { SubMenu } = Menu;\n\nconst SideBar = ({ group }) => {\n  const getGroupPrivacyLabel = (privacy) => {\n    if (privacy) {\n      let groupPrivacy = privacy.toLowerCase();\n      groupPrivacy = _.startCase(groupPrivacy);\n\n      if (privacy === 'PRIVATE') {\n        return (\n          <span>\n            <i className='fa fa-lock' title='private group'></i>&nbsp;\n          </span>\n        );\n      } else {\n        return (\n          <span>\n            <i className='fa fa-globe' title='public group'></i> &nbsp;\n          </span>\n        );\n      }\n    }\n  };\n  const getMenuItems = (requestedItems) => {\n    let menuItems = requestedItems.map((current) => (\n      <Menu.Item\n        key={current.id}\n        //onTitleClick={(key, event) => routeChange(key, event)}\n      >\n        <Link to={'/dashboard/' + current.id}>\n          {current.role === 'admin' ? (\n            <span style={{ color: 'grey' }}>\n              {getGroupPrivacyLabel(current.privacy)}\n\n              {current.groupName}\n            </span>\n          ) : (\n            <span style={{ color: '#696969' }}>\n              {getGroupPrivacyLabel(current.privacy)}\n\n              {current.groupName}\n            </span>\n          )}\n        </Link>\n      </Menu.Item>\n    ));\n    return menuItems;\n  };\n\n  const SideMenu = () => {\n    return (\n      <Menu\n        style={{ padding: '.1rem', marginTop: '1rem' }}\n        defaultSelectedKeys={['1']}\n        defaultOpenKeys={['side-menu']}\n        mode={''}\n        theme={'light'}\n      >\n        <Menu.Divider />\n        <Menu.ItemGroup key='side-menu'>\n          {group.userGroup && group.userGroup.length > 0 ? (\n            <SubMenu\n              key='sub-mygroups'\n              icon={<SettingOutlined />}\n              title='My Groups'\n            >\n              {getMenuItems(group.userGroup)}\n            </SubMenu>\n          ) : (\n            ''\n          )}\n\n          {group.pendingInvitedUserGroups &&\n          group.pendingInvitedUserGroups.length > 0 ? (\n            <SubMenu\n              key='sub-pending'\n              icon={<SettingOutlined />}\n              title='Pending Invitations'\n            >\n              {getMenuItems(group.pendingInvitedUserGroups)}\n            </SubMenu>\n          ) : (\n            ''\n          )}\n          {group.requestedUserGroup && group.requestedUserGroup.length > 0 ? (\n            <SubMenu\n              key='sub-requested'\n              icon={<SettingOutlined />}\n              title='Requested To Join'\n            >\n              {getMenuItems(group.requestedUserGroup)}\n            </SubMenu>\n          ) : (\n            ''\n          )}\n        </Menu.ItemGroup>\n      </Menu>\n    );\n  };\n\n  return <SideMenu />;\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {})(SideBar);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../common/spinner/Spinner';\nimport GroupCard from './GroupCard';\nimport SideBar from '../sidebar/SideBar';\n\nimport CreateGroupModal from './modal/CreateGroupModal';\nimport { getAllGroups } from '../../actions/group';\nimport { Tabs, Table, Tag, Button, Input, Empty } from 'antd';\nimport { Layout, Card } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nimport './Groups.scss';\nconst Groups = ({ getAllGroups, group, auth }) => {\n  const { Meta } = Card;\n  const { Content } = Layout;\n\n  const { TabPane } = Tabs;\n\n  const { Search } = Input;\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  useEffect(() => {\n    getAllGroups(auth.user._id);\n  }, []);\n\n  const handleTabChange = (e, { activeIndex }) => setActiveIndex(activeIndex);\n\n  const handlePageChange = (e) => {\n    setActiveIndex(e.target.value);\n  };\n\n  const operations = <CreateGroupModal />;\n\n  return (\n    <Fragment>\n      {group.loading ? (\n        <Spinner />\n      ) : (\n        <Content className='container'>\n          <SideBar />\n          <div className='wrapper'>\n            {group !== null ? (\n              <Tabs\n                defaultActiveKey='1'\n                tabBarExtraContent={operations}\n                mode='top'\n              >\n                <TabPane tab='My Groups' key='1'>\n                  {group.userGroup && group.userGroup.length > 0 ? (\n                    group.userGroup.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        type='mygroup'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={'Current user is not part of any groups.'}\n                    />\n                  )}\n                </TabPane>\n                <TabPane tab='Pending Invitations' key='2'>\n                  {group.pendingInvitedUserGroups &&\n                  group.pendingInvitedUserGroups.length > 0 ? (\n                    group.pendingInvitedUserGroups.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        type='pendingInvitedUserGroups'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={\n                        'There are no pending group invitation for current user.'\n                      }\n                    />\n                  )}\n                </TabPane>\n                <TabPane tab='Requested To Join' key='3'>\n                  {group.requestedUserGroup &&\n                  group.requestedUserGroup.length > 0 ? (\n                    group.requestedUserGroup.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        index={index}\n                        type='requestedUserGroup'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={\n                        'There are no group requests initiated by the current user.'\n                      }\n                    />\n                  )}\n                </TabPane>\n              </Tabs>\n            ) : (\n              <Empty description={'No Group Data Found'} />\n            )}\n          </div>\n        </Content>\n      )}\n    </Fragment>\n  );\n};\n\nGroups.propTypes = {\n  getAllGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  group: state.group,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  getAllGroups,\n})(Groups);\n"],"sourceRoot":""}