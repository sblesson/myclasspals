{"version":3,"sources":["landing/PendingRegistration.js"],"names":["connect","state","auth","isLoading","school","setAlert","getuserbyregistrationid","register","history","match","Title","Typography","Text","useState","regId","setRegId","useEffect","unmounted","params","id","invalidRegistrationToken","window","location","pathname","name","password","password2","formData","componentSize","isLoadingSignUpBtn","setIsLoadingSignUpBtn","formItemLayout","labelCol","xs","span","sm","md","wrapperCol","validateRequired","value","undefined","yourInfo","initialValues","email","onSubmit","values","user","cancelTokenSrc","cancel","authRedirect","validator","children","style","flex","padding","className","layout","size","label","required","validate","placeholder","type","block","loading","marginTop","background","level","to"],"mappings":"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","file":"static/js/17.2fb44557.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { SubmitButton, Input, Form, FormItem, FormikDebug } from 'formik-antd';\nimport { Formik, ErrorMessage } from 'formik';\nimport { Typography } from 'antd';\nimport Services from './Services';\nimport { setAlert } from '../actions/alert';\nimport { getuserbyregistrationid, register } from '../actions/auth';\nimport { authRedirect } from '../utils/authRedirect';\n\nimport PropTypes from 'prop-types';\n\nconst PendingRegistration = ({\n  setAlert,\n  getuserbyregistrationid,\n  register,\n  auth,\n  history,\n  match\n}) => {\n  const { Title, Text } = Typography;\n  const [regId, setRegId] = useState('');\n  useEffect(() => {\n    let unmounted = false;\n    if (match.params && !unmounted) {\n      setRegId(match.params.id);\n      getuserbyregistrationid(match.params.id);\n    }\n    return () => {\n      unmounted = true;\n    };\n  }, [getuserbyregistrationid, match]);\n\n  useEffect(() => {\n    if (auth.invalidRegistrationToken) {\n      //todo change window.location logic later\n      window.location.pathname = '/register';\n    }\n  }, [auth.invalidRegistrationToken]);\n\n  const [formData, setFormData] = useState({\n    name: '',\n    password: '',\n    password2: ''\n  });\n\n  const { name, password, password2 } = formData;\n  const [componentSize, setComponentSize] = useState('small');\n  const [isLoadingSignUpBtn, setIsLoadingSignUpBtn] = useState(false);\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 16 },\n      md: { span: 20 }\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 16 },\n      md: { span: 20 }\n    }\n  };\n\n  const validateRequired = value => {\n    return value ? undefined : 'required';\n  };\n\n  const yourInfo = (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        password2: ''\n      }}\n      onSubmit={values => {\n        setIsLoadingSignUpBtn(true);\n        if (values.password !== values.password2) {\n          setAlert('Passwords do not match', 'error');\n          setIsLoadingSignUpBtn(false);\n        } else {\n          if (auth && auth.user && auth.user.email) {\n            let email = auth.user.email;\n\n            if (regId) {\n              register(\n                {\n                  name: values.name,\n                  email,\n                  password: values.password,\n                  regId\n                },\n                cancelTokenSrc => {\n                  setIsLoadingSignUpBtn(false);\n                  cancelTokenSrc.cancel();\n                  authRedirect(auth, history);\n                }\n              );\n            } else {\n              register(\n                {\n                  name: values.name,\n                  email,\n                  password: values.password\n                },\n                () => {\n                  setIsLoadingSignUpBtn(false);\n                  authRedirect(auth, history);\n                }\n              );\n            }\n          }\n        }\n      }}\n      validator={() => ({})}\n      //validate={values => {}}\n      children={() => (\n        <div style={{ flex: 1, padding: 5 }}>\n          <Form\n            className='form-wrapper'\n            {...formItemLayout}\n            layout='vertical'\n            initialValues={{\n              size: componentSize\n            }}\n          >\n            <FormItem\n              name='name'\n              label='What should we call you?'\n              required={true}\n              validate={validateRequired}\n            >\n              <Input name='name' placeholder='Your name' />\n            </FormItem>\n            <FormItem\n              name='password'\n              label='Password'\n              required={true}\n              validate={validateRequired}\n            >\n              <Input name='password' type='password' placeholder='Password' />\n            </FormItem>\n            <FormItem\n              name='password2'\n              label='Confirm Password'\n              required={true}\n              validate={validateRequired}\n            >\n              <Input\n                name='password2'\n                type='password'\n                placeholder='Confirm Password'\n              />\n            </FormItem>\n            <FormItem name='submit'>\n              <SubmitButton\n                block\n                className='ant-btn btn-primary'\n                loading={isLoadingSignUpBtn}\n              >\n                {' '}\n                Register\n              </SubmitButton>{' '}\n            </FormItem>\n          </Form>\n        </div>\n      )}\n    />\n  );\n\n  return (\n    <Fragment>\n      <div className='row' style={{ marginTop: '20px' }}>\n        <Services />\n        <div className='col col-4' style={{ background: '#fff' }}>\n          <Title className='form-title-text' level={4}>\n            Create Your Account\n          </Title>\n          {yourInfo}\n          <Text className='form-info-text'>\n            Already have an account? <Link to='/login'>Sign In</Link>\n          </Text>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nPendingRegistration.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  isLoading: state.school.isLoading\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  getuserbyregistrationid,\n  register\n})(PendingRegistration);\n"],"sourceRoot":""}