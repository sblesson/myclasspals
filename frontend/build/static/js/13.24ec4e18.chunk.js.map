{"version":3,"sources":["components/groups/modal/DeleteGroupModal.js","components/groups/GroupCard.js","components/groups/Groups.js"],"names":["connect","state","group","deleteGroup","_ref","groupId","_useState","useState","_useState2","Object","slicedToArray","headerTitle","_useState3","_useState4","visible","setModalVisibility","toggleModal","react_default","a","createElement","className","onClick","modal","defineProperty","title","centered","onOk","okText","onCancel","destroyOnClose","cancelButtonProps","style","display","ownProps","auth","acceptUserGroupInvitation","requestToJoinUserGroup","currentGroup","index","type","Meta","Card","requestToJoinUserGroupClickHandler","record","id","role","requestorUserId","user","email","userGroup","console","log","menu","es_menu","key","Item","modal_DeleteGroupModal","acceptPendingInviteActionClick","invitedUserId","getGroupPrivacyLabel","dropdown","overlay","placement","e","preventDefault","EllipsisOutlined","privacy","groupPrivacy","toLowerCase","_","startCase","card","react_router_dom","to","concat","avatar","isSchoolGroup","paddingRight","groupName","description","userGroupMembers","length","getGroupPrivacy","getUserGroupMemberCount","tag","color","getUserGroupRole","es_button","float","groupActionMenu","schoolName","isGroupStatusUpdated","getAllGroups","Content","Layout","TabPane","Tabs","Input","Search","_Users_sapnablesson_production_classvilla_frontend_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","useEffect","_id","operations","react__WEBPACK_IMPORTED_MODULE_1___default","_modal_CreateGroupModal__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_1__","loading","_common_spinner_Spinner__WEBPACK_IMPORTED_MODULE_3__","antd__WEBPACK_IMPORTED_MODULE_7__","defaultActiveKey","tabBarExtraContent","tab","map","_GroupCard__WEBPACK_IMPORTED_MODULE_4__","antd__WEBPACK_IMPORTED_MODULE_9__","pendingInvitedUserGroups","requestedUserGroup"],"mappings":"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","file":"static/js/13.24ec4e18.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteGroup } from '../../../actions/group';\nimport { Modal } from 'antd';\n\nimport _ from 'lodash';\n\nconst DeleteGroupModal = ({ deleteGroup, groupId }) => {\n  const [headerTitle, setHeaderTitle] = useState(\"Please don't delete me!\");\n\n  const [visible, setModalVisibility] = useState(false);\n\n  const showModal = () => {\n    setModalVisibility(true);\n  };\n\n  const hideModal = () => {\n    setModalVisibility(false);\n  };\n  const toggleModal = () => {\n    setModalVisibility(!visible);\n  };\n  const handleDelete = () => {\n    deleteGroup(groupId);\n    hideModal();\n  };\n  return (\n    <div>\n      <div className='account-info-action-container' onClick={toggleModal}>\n        <div className='account-info-delete-button-right'>\n          <span>Delete</span>\n        </div>\n      </div>\n      <Modal\n        title={headerTitle}\n        centered\n        visible={visible}\n        onOk={handleDelete}\n        okText='Delete'\n        onCancel={toggleModal} //pass close logic here\n        destroyOnClose={true}\n        cancelButtonProps={{ style: { display: 'none' } }}\n        destroyOnClose={true}\n      >\n        <div>\n          Deleting this grouop will removes it forever. Are you sure you want to\n          delete?\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  group: state.group\n});\n\nexport default connect(mapStateToProps, {\n  deleteGroup\n})(DeleteGroupModal);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Menu, Tag, Button, Dropdown } from 'antd';\nimport _ from 'lodash';\nimport DeleteGroupModal from './modal/DeleteGroupModal';\n\nimport {\n  EditOutlined,\n  EllipsisOutlined,\n  SettingOutlined\n} from '@ant-design/icons';\n\nimport {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup\n} from '../../actions/group';\n\nimport './GroupCard.scss';\n\nconst GroupCard = ({\n  currentGroup,\n  index,\n  type,\n  auth,\n  group,\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup,\n  deleteGroup\n}) => {\n  const { Meta } = Card;\n  const [isRequestUpdated, setRequestUpdate] = useState(false);\n\n  const requestToJoinUserGroupClickHandler = record => {\n    requestToJoinUserGroup(\n      {\n        groupId: record.id,\n        role: 'member',\n        requestorUserId: auth.user.email\n      },\n      record,\n      userGroup => {\n        console.log(userGroup);\n        //searchGroupWithFilters({ groupKeyword: group.searchTerm });\n      }\n    );\n  };\n\n  const onClick = key => {\n    if (key === 'deletegroup') {\n      console.log('deletegroup');\n    } else if (key === 'editpost') {\n    }\n  };\n\n  const menu = (\n    <Menu onClick={onClick}>\n      <Menu.Item key='deletegroup'>\n        {' '}\n        <DeleteGroupModal groupId={currentGroup.id} />\n      </Menu.Item>\n    </Menu>\n  );\n  const acceptPendingInviteActionClick = record => {\n    acceptUserGroupInvitation({\n      groupId: record.id,\n      role: 'member',\n      invitedUserId: auth.user.email\n    });\n  };\n\n  const adminMemberActionMenu = (\n    <Dropdown overlay={menu} placement='bottomCenter'>\n      <a className='ant-dropdown-link' onClick={e => e.preventDefault()}>\n        <EllipsisOutlined />\n      </a>\n    </Dropdown>\n  );\n\n  const groupActionMenu = (currentGroup, type) => {\n    debugger;\n    if (currentGroup) {\n      switch (type) {\n        case 'mygroup':\n        case 'discover':\n          if (currentGroup.role === null) {\n            //non members\n            if (currentGroup.privacy === 'PUBLIC') {\n              //display join button for public group\n              return (\n                <Button\n                  key={`${currentGroup.id}_join_btn`}\n                  className='btn-primary'\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Join'}\n                </Button>\n              );\n            } else {\n              //display request button for private group\n              return (\n                <Button\n                  className='btn-primary'\n                  key={`${currentGroup.id}_request_btn`}\n                  onClick={() =>\n                    requestToJoinUserGroupClickHandler(currentGroup)\n                  }\n                >\n                  {'Request'}\n                </Button>\n              );\n            }\n          } else if (currentGroup.role === 'admin') {\n            return (\n              <Dropdown\n                overlay={menu}\n                placement='bottomCenter'\n                style={{ float: 'right' }}\n              >\n                <a\n                  className='ant-dropdown-link'\n                  onClick={e => e.preventDefault()}\n                >\n                  <EllipsisOutlined />\n                </a>\n              </Dropdown>\n            );\n          } else if (currentGroup.role === 'member') {\n            return null;\n          } else if (\n            currentGroup.role === 'Pending Invitation' ||\n            currentGroup.role === 'Pending Requests'\n          ) {\n            return <Tag color='green'>{currentGroup.role}</Tag>;\n          }\n        case 'pendingInvitedUserGroups': {\n          if (type === 'discover' && currentGroup.privacy === 'PRIVATE') {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Request'}\n              </Button>\n            );\n          } else {\n            return (\n              <Button\n                key={`${currentGroup.id}_pending_join_btn`}\n                className='btn-primary'\n                onClick={() => acceptPendingInviteActionClick(currentGroup)}\n              >\n                {'Join'}\n              </Button>\n            );\n          }\n        }\n        default:\n          return null;\n      }\n    }\n  };\n\n  const getUserGroupRole = currentGroup => {\n    if (currentGroup.role === 'admin') {\n      return <Tag color={'blue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'member') {\n      return <Tag color={'geekblue'}>{currentGroup.role}</Tag>;\n    } else if (currentGroup.role === 'y      hb youhkujhjmhjhkhvitation') {\n      return <Tag color={'green'}>{currentGroup.role}</Tag>;\n    }\n  };\n\n  const getUserGroupMemberCount = currentGroup => {\n    if (currentGroup && currentGroup.userGroupMembers) {\n      if (currentGroup.userGroupMembers.length <= 1) {\n        return `${currentGroup.userGroupMembers.length} member`;\n      } else if (currentGroup.userGroupMembers.length > 1) {\n        return `${currentGroup.userGroupMembers.length} members`;\n      }\n    }\n  };\n\n  const getGroupPrivacyLabel = privacy => {\n    if (privacy) {\n      let groupPrivacy = privacy.toLowerCase();\n      groupPrivacy = _.startCase(groupPrivacy);\n\n      if (privacy === 'PRIVATE') {\n        return (\n          <span>\n            <i className='fa fa-lock' title='private group'></i>&nbsp;\n            {groupPrivacy}\n          </span>\n        );\n      } else {\n        return (\n          <span>\n            <i className='fa fa-globe' title='public group'></i>\n            &nbsp;{groupPrivacy}\n          </span>\n        );\n      }\n    }\n  };\n\n  const getGroupPrivacy = currentGroup => {\n    if (\n      currentGroup &&\n      currentGroup.userGroupMembers &&\n      currentGroup.userGroupMembers.length > 0\n    ) {\n      if (currentGroup.userGroupMembers.length === 1) {\n        return <div>{getGroupPrivacyLabel(currentGroup.privacy)}</div>;\n      } else {\n        return <div>{getGroupPrivacyLabel()}</div>;\n      }\n    }\n  };\n\n  return (\n    <Card key={index} className='discover-group-card'>\n      <Link to={`/group/${currentGroup.id}`}>\n        <Meta\n          avatar={\n            currentGroup.isSchoolGroup === 'no' ? (\n              <i\n                className='fas fa-users icon-group no-padding'\n                style={{ paddingRight: 0 }}\n              ></i>\n            ) : (\n              <i\n                className='fas fa-school icon-group no-padding'\n                title='school group'\n              ></i>\n            )\n          }\n          title={currentGroup.groupName}\n        ></Meta>\n      </Link>\n      <Meta\n        className='group-card-meta-privacy no-padding'\n        description={getGroupPrivacy(currentGroup)}\n      ></Meta>\n\n      <Meta\n        className='group-card-meta-count no-padding'\n        description={getUserGroupMemberCount(currentGroup)}\n      ></Meta>\n\n      <Meta\n        className='group-card-meta-role no-padding'\n        description={getUserGroupRole(currentGroup)}\n      ></Meta>\n      <Meta\n        className='group-card-meta-action group-action no-padding'\n        description={groupActionMenu(currentGroup, type)}\n      ></Meta>\n      {currentGroup.schoolName ? (\n        <Meta\n          className='group-card-meta-desc no-padding'\n          description={\n            currentGroup.schoolName\n              ? `School Name: ${currentGroup.schoolName}`\n              : ''\n          }\n        />\n      ) : (\n        ''\n      )}\n\n      {currentGroup.isGroupStatusUpdated ? (\n        <Meta\n          className='group-card-update-status-link no-padding'\n          description={\n            <Link to={`/group/${currentGroup.id}`}>Peek inside</Link>\n          }\n        />\n      ) : (\n        ''\n      )}\n    </Card>\n  );\n};\n\nGroupCard.propTypes = {\n  currentGroup: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  auth: state.auth,\n  group: state.group\n});\n\nexport default connect(mapStateToProps, {\n  acceptUserGroupInvitation,\n  requestToJoinUserGroup\n})(GroupCard);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../common/spinner/Spinner';\nimport GroupCard from './GroupCard';\n\nimport CreateGroupModal from './modal/CreateGroupModal';\nimport { getAllGroups } from '../../actions/group';\nimport { Tabs, Table, Tag, Button, Input, Empty } from 'antd';\nimport { Layout, Card } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nimport './Groups.scss';\nconst Groups = ({ getAllGroups, group, auth }) => {\n  const { Meta } = Card;\n  const { Content } = Layout;\n\n  const { TabPane } = Tabs;\n\n  const { Search } = Input;\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  useEffect(() => {\n    getAllGroups(auth.user._id);\n  }, []);\n\n  const handleTabChange = (e, { activeIndex }) => setActiveIndex(activeIndex);\n\n  const handlePageChange = e => {\n    setActiveIndex(e.target.value);\n  };\n\n  const operations = <CreateGroupModal />;\n\n  return (\n    <Fragment>\n      {group.loading ? (\n        <Spinner />\n      ) : (\n        <Content className='container'>\n          <div className='wrapper'>\n            {group !== null ? (\n              <Tabs defaultActiveKey='1' tabBarExtraContent={operations}>\n                <TabPane tab='My Groups' key='1'>\n                  {group.userGroup && group.userGroup.length > 0 ? (\n                    group.userGroup.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        type='mygroup'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={'Current user is not part of any groups.'}\n                    />\n                  )}\n                </TabPane>\n                <TabPane tab='Pending Invitations' key='2'>\n                  {group.pendingInvitedUserGroups &&\n                  group.pendingInvitedUserGroups.length > 0 ? (\n                    group.pendingInvitedUserGroups.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        type='pendingInvitedUserGroups'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={\n                        'There are no pending group invitation for current user.'\n                      }\n                    />\n                  )}\n                </TabPane>\n                <TabPane tab='Requested To Join' key='3'>\n                  {group.requestedUserGroup &&\n                  group.requestedUserGroup.length > 0 ? (\n                    group.requestedUserGroup.map((group, index) => (\n                      <GroupCard\n                        currentGroup={group}\n                        key={index}\n                        index={index}\n                        type='requestedUserGroup'\n                      />\n                    ))\n                  ) : (\n                    <Empty\n                      description={\n                        'There are no group requests initiated by the current user.'\n                      }\n                    />\n                  )}\n                </TabPane>\n              </Tabs>\n            ) : (\n              <Empty description={'No Group Data Found'} />\n            )}\n          </div>\n        </Content>\n      )}\n    </Fragment>\n  );\n};\n\nGroups.propTypes = {\n  getAllGroups: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  group: state.group,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getAllGroups\n})(Groups);\n"],"sourceRoot":""}